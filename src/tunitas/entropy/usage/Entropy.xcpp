// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.entropy.required.Entropy
#import tunitas.keyston.nonce.required.Precision
#import tunitas.time.Clock
#import nonstd.required.Integral
namespace tunitas::entropy::usage {
  //
  // Is this type an entropy source?
  //
  // You will need the complete type of the entropy source to make the determination
  //
  // Usage:
  //
  //   #import tunitas.entropy.Source
  //   #include <hpp/tunitas.entropy.Source>
  //   template<required::Entropy> struct Something;
  //   template<> struct Something<entropy::Source>;
  //
  template<typename ENTROPY> concept Entropy = required::Entropy<ENTROPY> && requires(ENTROPY source) {
    requires std::is_default_constructible_v<ENTROPY>;
    requires not std::is_copy_constructible_v<ENTROPY>;
    requires not std::is_move_constructible_v<ENTROPY>;
    requires not std::is_copy_assignable_v<ENTROPY>;
    requires not std::is_move_assignable_v<ENTROPY>;
    requires not std::is_swappable_v<ENTROPY>;
    //
    { ENTROPY{} };
    //
    // The entropy source axis
    { ENTROPY::BITS } -> convertible_to<Bits>;
    { ENTROPY::BYTES }-> convertible_to<Bytes>;
    //
    typename ENTROPY::Draw;
    requires required::Integral<typename ENTROPY::Draw>;
    { source.draw() } -> same_as<typename ENTROPY::Draw>;
    //
    // And the time axis (gotta look like std::chrono::system_clock)
    typename ENTROPY::Since;
    requires keyston::nonce::required::Precision<typename ENTROPY::Since>;
    { ENTROPY::now() } -> same_as<typename ENTROPY::Since>;
  };
}
#endiv
#divert <cpp>
#import tunitas.entropy.Source
#import tunitas.entropy.Sequence
#import tunitas.entropy.Serial
#import tunitas.entropy.None
namespace {
  namespace testate {
    namespace usage = tunitas::entropy::usage;
    using namespace tunitas::entropy;
    static_assert(usage::Entropy<Source>);
    static_assert(usage::Entropy<Sequence>);
    static_assert(usage::Entropy<Serial>);
    static_assert(usage::Entropy<None>);
  }
}
#endiv
