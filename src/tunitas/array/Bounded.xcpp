// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.array.required.Arrayable
namespace tunitas::array {
  //
  // A bounded array.
  //
  // Specification:
  //
  //   Obvious
  //
  // Design:
  //
  //   Limited length,
  //   Variable length
  //   a.k.a. Bounded Entity-Containing-Type [which] Owns Resources (BECTOR); see VECTOR
  //   https://en.cppreference.com/w/cpp/container/vector
  //   A vector with some limited bounds checking..
  //
  //   We guard against Murphy, not against Machiavelli
  //
  //   [[FIXTHIS]] such exceptions are NOT recovered and re-wrapped as vdaf::exception::Aspect descendants.
  //
  // Usage:
  //
  //   As you would a vector; with the reduced interface.
  //
  template<required::Arrayable TYPE, Size CAPACITY> struct Bounded;
}
#endiv
#divert <hpp>
#import nonstd.required.Convertible_To
#import nonstd.required.iterator.Forward
#import nonstd.required.iterator.Producing
#import std.remove_cvref
#import std.initializer_list // [[REMOVETHIS]]
#import tunitas.array.required.Initializers
#import tunitas.array.Variable
#forward tunitas.array.Fixed
namespace tunitas {
  namespace array {
    using std::move;
    template<required::Arrayable TYPE, Size CAPACITY> inline auto swap(Bounded<TYPE, CAPACITY> &, Bounded<TYPE, CAPACITY> &) noexcept -> void;
  }
  template<array::required::Arrayable TYPE, array::Size CAPACITY> class array::Bounded : public Variable<TYPE> {
    using Ancestor = Variable<TYPE>;
    friend auto array::swap<>(Bounded &, Bounded &) noexcept -> void;
    inline auto throw_if_full(Size more) const -> void;
  public:
    Bounded() = default;
    inline explicit Bounded(Size);
    inline explicit Bounded(Size, typename Ancestor::Value const &);
#if 1
    template<typename... VALUES> inline [[implicit]] Bounded(VALUES &&...)                             requires (sizeof...(VALUES) <= CAPACITY && required::Initializers<typename Ancestor::Value, VALUES...>);
    template<typename... VALUES> inline [[implicit]] Bounded(typename Ancestor::Inplace, VALUES &&...) requires (sizeof...(VALUES) <= CAPACITY && required::Initializers<typename Ancestor::Value, VALUES...>);
#else
    inline [[implicit]] Bounded(std::initializer_list<typename Ancestor::Value>);
  protected:
    template<typename INIT> inline auto check_initializer_size(std::initializer_list<INIT> const &) const -> decltype(auto);
  public:
#endif
    template<Size RECAPACITY> inline [[implicit]] Bounded(Fixed<typename Ancestor::Value, RECAPACITY> const &) requires (RECAPACITY <= CAPACITY);
    template<Size RECAPACITY> inline [[implicit]] Bounded(Fixed<typename Ancestor::Value, RECAPACITY> &&) requires (RECAPACITY <= CAPACITY);
    template<required::iterator::Forward ITERATOR> inline [[implicit]] Bounded(ITERATOR start, ITERATOR finish) requires required::iterator::Producing<ITERATOR, typename Ancestor::Value>;
    //
    inline auto capacity() const noexcept { return CAPACITY; }
    template<required::iterator::Forward ITERATOR> inline auto push_back(ITERATOR start, ITERATOR finish) -> void;
    inline auto push_back(typename Ancestor::Value) -> void;
    template<typename... ARGUMENTS> inline auto emplace_back(ARGUMENTS &&...) -> void;
  };
}
#endiv
#divert <ipp>
#import tunitas.array.Fixed
#import tunitas.array.required.Reservable
#import tunitas.exception.Bound
#import tunitas.exception.Length
#import std.distance
#import std.make_move_iterator
namespace tunitas {
  template<array::required::Arrayable TYPE, array::Size CAPACITY> auto array::swap(Bounded<TYPE, CAPACITY> &a, Bounded<TYPE, CAPACITY> &b) noexcept -> void {
    typename Bounded<TYPE, CAPACITY>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace array {
    template<typename T, Size CAPACITY> template<Size RECAPACITY> Bounded<T,CAPACITY>::Bounded(Fixed<typename Ancestor::Value, RECAPACITY> const &other) requires (RECAPACITY <= CAPACITY)
      : Ancestor{other.begin(), other.end()}
    { }
    template<typename T, Size CAPACITY> template<Size RECAPACITY> Bounded<T,CAPACITY>::Bounded(Fixed<typename Ancestor::Value, RECAPACITY> &&other) requires (RECAPACITY <= CAPACITY)
      : Ancestor{std::make_move_iterator(other.begin()), std::make_move_iterator(other.end())}
    { }
    template<typename T, Size C> Bounded<T,C>::Bounded(Size initial_size) {
      if (this->size() > this->capacity()) {
        throw exception::Length{"too big"};
      } else {
        this->resize(initial_size);
      }
    }
    template<typename T, Size C> Bounded<T,C>::Bounded(Size initial_size, typename Ancestor::Value const &initial_value)
      : Bounded{initial_size} {{
        std::fill_n(Ancestor::begin(), initial_size, initial_value);
      }
    }
#if 1
    template<typename T, Size CAPACITY> template<typename... VALUES> Bounded<T,CAPACITY>::Bounded(VALUES &&...values) requires (sizeof...(VALUES) <= CAPACITY && required::Initializers<typename Ancestor::Value, VALUES...>)
      : Bounded{typename Ancestor::Inplace{}, forward<VALUES>(values)...}
    { }
    template<typename T, Size CAPACITY> template<typename... VALUES> Bounded<T,CAPACITY>::Bounded(typename Ancestor::Inplace inplace, VALUES &&...values) requires (sizeof...(VALUES) <= CAPACITY && required::Initializers<typename Ancestor::Value, VALUES...>)
      : Ancestor{inplace, forward<VALUES>(values)...}
    { }
#else
    template<typename T, Size C> Bounded<T,C>::Bounded(std::initializer_list<typename Ancestor::Value> init) : Ancestor{check_initializer_size(init)} { }
    template<typename T, Size C> template<typename INIT> auto Bounded<T,C>::check_initializer_size(std::initializer_list<INIT> const &init) const -> decltype(auto) {
      if (init.size() > this->capacity()) {
        throw exception::Length{"too big"};
      } else {
        return init;
      }
    }
#endif
    template<typename T, Size C> template<required::iterator::Forward ITERATOR> Bounded<T,C>::Bounded(ITERATOR start, ITERATOR finish) requires required::iterator::Producing<ITERATOR, typename Ancestor::Value> { push_back(start, finish); }
    template<typename T, Size C> auto Bounded<T,C>::throw_if_full(Size more) const -> void {
      if (this->size()+more > this->capacity()) {
        throw exception::Bound{"full"};
      }
    }
    template<typename T, Size C> template<required::iterator::Forward ITERATOR> auto Bounded<T,C>::push_back(ITERATOR start, ITERATOR finish) -> void {
      auto more = std::distance(start, finish);
      throw_if_full(more);
      if constexpr (required::Reservable<typename Ancestor::Value>) {
        Ancestor::reserve(Ancestor::size() + more);
      }
      for (auto here=start; finish != here; ++here) {
        Ancestor::push_back(*here);
      }
    }
    template<typename T, Size C> auto Bounded<T,C>::push_back(typename Ancestor::Value one) -> void {
      throw_if_full(1uz);
      Ancestor::push_back(std::move(one));
    }
    template<typename T, Size C> template<typename... ARGUMENTS> auto Bounded<T,C>::emplace_back(ARGUMENTS &&...arguments) -> void {
      throw_if_full(1uz);
      Ancestor::emplace_back(forward<ARGUMENTS>(arguments)...);
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::array;
    using Subject = Bounded<char, (1uz<<16)>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
  }
}
#endiv
