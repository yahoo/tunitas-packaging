// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.array.range.required.Iterator
namespace tunitas::array::range::package_enumerate::body {
  //
  // The prototype of the iterator (constie and mutable)
  //
  // Specification:
  //
  //   Make the magic happen
  //
  //   rhymes with std::counted_iterator but counts forward and returns a pair
  //
  // Design:
  //
  //   Descendants only into Iterator<SUBITERATOR, CONSTIE> and Iterator<SUBITERATOR, MUTABLE>
  //
  //   Why of course we designed it, why do you ask?
  //   This is a pretty <strike>heavy</strike>cool design, no?
  //   We didn't copilot it, you don't think that do you?
  //   No, nothing like that.  We wouldn't do that.  We are ethical.
  //
  //   All this machinery so that we can have mutable iterators autoconvert into constie iterators.
  //
  // Usage:
  //
  //   see #import tunitas.array.range.enumerate
  //
  template<required::Iterator> struct Iterotype;
}
#endiv
#divert <hpp>
#import nonstd.iterator.Traits // but  you'll need specializations for SUBITERATOR
#import nonstd.required.Convertible_To
#import std.size_t
#import std.convertible_to
#import std.same_as
#import std.ptrdiff_t
#import std.remove_const
#import tunitas.Pair
#import tunitas.array.range.required.Iterator
#import tunitas.array.range.required.iterator.Alternative
#import tunitas.array.range.package_enumerate.Iterator.operations // so they can be friends
namespace tunitas::array::range::package_enumerate {
  namespace body {
    template<required::Iterator SUBITERATOR> inline constexpr auto operator==(Iterotype<SUBITERATOR> const &, Iterotype<SUBITERATOR> const &) -> bool;
  }
  template<required::Iterator SUBITERATOR> struct body::Iterotype {
    using Index = std::size_t;
    using Subiterator = SUBITERATOR;
    Index index{};
    Subiterator subiterator{};
    using Subvalue = typename nonstd::iterator::Traits<Subiterator>::Value;
    using Subreference = typename nonstd::iterator::Traits<Subiterator>::Reference;
    template<typename SUBIT> requires std::same_as<Subiterator, SUBIT> using Rereference = Pair<Index, typename nonstd::iterator::Traits<SUBIT>::Reference>;
    friend auto operator==<>(Iterotype const &, Iterotype const &) -> bool;
    template<required::iterator::Undirected S, Mutability M> friend auto body::operator-(Iterator<S,M> const &, Iterator<S,M> const &) -> std::ptrdiff_t;
    template<required::iterator::Undirected S, Mutability M> friend auto body::operator+(std::ptrdiff_t, Iterator<S,M> const &) -> std::ptrdiff_t;
    template<required::iterator::Undirected S, Mutability M> friend auto body::operator+(Iterator<S,M> const &, std::ptrdiff_t) -> std::ptrdiff_t;
  protected:
    ~Iterotype() = default;
    template<required::Iterator OTHER>
    inline constexpr explicit Iterotype(Index, OTHER const &)
    requires required::Convertible_To<OTHER, Subiterator>;
  public:
    constexpr Iterotype() = default;
    inline constexpr [[implicit]] Iterotype(Subiterator);
#if 0
    template<required::iterator::Alternative<Subiterator> OTHER> inline constexpr [[implicit]] Iterotype(OTHER const &);
#endif
    //
    using Value = Pair<Index, Subvalue>;
    using Reference = Pair<Index, Subreference>;
    //
    inline auto operator*() const -> Rereference<Subiterator>;
#if 202312L < __cplusplus
    template<typename SELF> inline auto operator++(this SELF *) -> nonstd::Like<SELF, Iterotype &>;
    template<typename SELF> inline auto operator++(this SELF *, int) -> nonstd::Like<SELF, Iterotype>;
#else
  protected:
    // Descendants will have to implement their own operator++ on-site with copy-pasta
    template<typename SELF> inline static auto increment(SELF &) -> SELF &;
#endif
  };
}
#endiv
#divert <ipp>
namespace tunitas::array::range::package_enumerate {
  template<required::Iterator SUBITERATOR> constexpr auto body::operator==(Iterotype<SUBITERATOR> const &a, Iterotype<SUBITERATOR> const &b) -> bool {
    // n.b. always compare the iterators, never compare the indices.  The index is derived from progressing the iterator and end() always has a 0 index.
    return a.subiterator == b.subiterator;
  }
  namespace body {
    template<required::Iterator _>
    template<required::Iterator OTHER>    
    constexpr Iterotype<_>::Iterotype(Index here, OTHER const &other)
      requires required::Convertible_To<OTHER, typename Iterotype<_>::Subiterator>
      : index{here}
      , subiterator{other}
    { } 
    template<required::Iterator _> constexpr Iterotype<_>::Iterotype(Subiterator subiterator) : subiterator{subiterator} { } 
#if 0
    template<required::Iterator _> template<required::iterator::Alternative<typename Iterotype<_>::Subiterator> OTHER> constexpr Iterotype<_>::Iterotype(OTHER const &other) : subiterator{other} { }
#endif
    template<required::Iterator _> auto Iterotype<_>::operator*() const -> Rereference<Subiterator> { return {index, *subiterator}; }
#if 202312L < __cplusplus
    template<required::Iterator _> template<typename SELF> auto Iterotype<_>::operator++(this SELF *) -> nonstd::Like<SELF, Iterotype &> {
      ++index;
      ++subiterator;
      return *this;
    }
    template<required::Iterator _> template<typename SELF> auto Iterotype<_>::operator++(this SELF *, int) -> nonstd::Like<SELF, Iterotype> {
      auto old{*this};
      operator++();
      return old;
    }
#else
    template<required::Iterator _> template<typename SELF> auto Iterotype<_>::increment(SELF &self) -> SELF & {
      ++self.index;
      ++self.subiterator;
      return self;
    }
#endif
  }
}
#endiv
