// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.iterator.Forward
namespace tunitas::array::range::required {
  //
  // Is this type an ITERATOR that is suitable for use in package_enumerate::Iterator<ITERATOR>
  //
  template<typename ITERATOR> concept Iterator = iterator::Forward<ITERATOR>;
}
#endiv
#divert <cpp>
#import tunitas.array.Bounded
#import tunitas.array.Fixed
#import tunitas.array.Variable
#import tunitas.array.Series
#import std.vector
namespace {
  namespace testate {
    namespace required = tunitas::array::range::required;
    using namespace tunitas::array;
    class Stamp;
#if 0
    // These don't admit to iterators
    static_assert(required::Iterator<Bounded<int, 1>::iterator>);
    static_assert(required::Iterator<Bounded<int, 1>::const_iterator>);
    static_assert(required::Iterator<Fixed<int, 1>::iterator>);
    static_assert(required::Iterator<Fixed<int, 1>::const_iterator>);
    static_assert(required::Iterator<Variable<int>::iterator>);
    static_assert(required::Iterator<Variable<int>::const_iterator>);
    static_assert(required::Iterator<Series<int>::iterator>);
    static_assert(required::Iterator<Series<int>::const_iterator>);
#endif
    static_assert(required::Iterator<std::vector<Stamp>::iterator>);
    static_assert(required::Iterator<std::vector<Stamp>::const_iterator>);
  }
}
#endiv
