// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Convertible_To
#import nonstd.required.Same_As
#import tunitas.array.range.required.Iterator
namespace tunitas::array::range::required::iterator {
  //
  // Is this ITERATOR an iterator which is suitable for conversion to the DESTINATION?
  //
  template<typename ITERATOR, typename DESTINATION> concept Alternative = requires(ITERATOR iterator, DESTINATION) {
    requires !Same_As<ITERATOR, DESTINATION>;
    requires Iterator<ITERATOR>;
    requires Iterator<DESTINATION>;
    { DESTINATION{iterator} };
  };
}
#endiv
#divert <cpp>
#import std.string
namespace {
  namespace testate {
    namespace required = tunitas::array::range::required;
    static_assert( required::iterator::Alternative<std::string::iterator, std::string::const_iterator>);
    static_assert(!required::iterator::Alternative<std::string::const_iterator, std::string::iterator>);
  }
}
#endiv
