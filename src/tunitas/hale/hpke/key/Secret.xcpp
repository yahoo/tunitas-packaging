// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::hale::hpke::key {
  //
  // A secret key.
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Design:
  //
  //   A new type so that overloading works.
  //
  //   The size 16 appears to be derived from the VDAF work (it does not appear in HPKE or PPM directly)
  //
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-06.html
  //   Section 7.2 Construction
  //     Table 5: VDAF parameters for Prio3.
  //   Section 8.2 Construction
  //     Table 13: VDAF parameters for Poplar1.
  //
  //   VERIFY_KEY_SIZE	Prg.SEED_SIZE
  //
  //   Section 6.2 Pseudorandom Generators
  //   Section 6.2.1 PrgSha3
  //     Figure 12: Definition of PRG PrgSha3.
  //   Section 6.2.2 PrgFixedKeyAes128
  //     no figure number or description
  //
  //   So the number derives from some non-normative(?) python code.
  //
  //   But that number in is required by the underlying algorithms of that section,
  //   namely:
  //     [FIPS202]   SHA-3 eadem ratione.
  //     [SP800-185] cSHAKE128 which uses Keccak
  //
  // Usage:
  //
  //   It's secret .. hide it!
  //
  struct Secret;
}
#endiv
#divert <hpp>
#import tunitas.Opaque
namespace tunitas::hale::hpke {
  namespace key {
    using std::move;
    inline auto swap(Secret &, Secret &) noexcept -> void;
    inline constexpr auto const THE_KEY_SIZE_IS_SIXTEEN_OCTETS = 16uz;
  }
  struct key::Secret : public Opaque<THE_KEY_SIZE_IS_SIXTEEN_OCTETS> {
    using Ancestor = Opaque<THE_KEY_SIZE_IS_SIXTEEN_OCTETS>;
    friend auto swap(Secret &, Secret &) noexcept -> void;
  public:
    explicit Secret() = default;
    using Ancestor::Bounded; // Yes, you "just have to know" that the constructor name is such.
  };
}
#endiv
#divert <ipp>
namespace tunitas::hale::hpke {
  auto key::swap(Secret &a, Secret &b) noexcept -> void {
    Secret::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace key { }
}
#endiv
