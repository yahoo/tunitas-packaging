// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.hale.identifier.generator.required.Unique
#import tunitas.hale.identifier.generator.required.Entropy
#import tunitas.entropy.Source
namespace tunitas::hale::identifier::generator {
  //
  // The random source.
  //
  // Specification:
  //
  //   Like a nonce generator, but bigger.
  //
  // Design:
  //
  //   Use the nonce generator.
  //
  // Usage:
  //
  //   by inheritance.
  //
  template<required::Unique, required::Entropy = entropy::Source> struct Randomizer;
}
#endiv
#divert <hpp>
#import tunitas.entropy.Source
namespace tunitas::hale::identifier {
  template<generator::required::Unique IDENTIFIER, generator::required::Entropy SOURCE> struct generator::Randomizer {
    using Result = IDENTIFIER;
    using Entropy = SOURCE;
    auto operator()() -> Result;
    inline explicit Randomizer(Entropy &);
   protected:
    ~Randomizer() = default;
    Entropy &source;
    static_assert(1 == sizeof (typename Result::Value));
    inline static constexpr auto const DRAW_WIDTH = sizeof (typename Entropy::Draw);
  };
}
#endiv
#divert <ipp>
namespace tunitas::hale::identifier::generator {
  template<required::Unique U, required::Entropy S> Randomizer<U,S>::Randomizer(Entropy &e) : source{e} { }
}
#endiv
#divert <tpp>
#import tunitas.octets.Octet
namespace tunitas::hale::identifier::generator {
  template<required::Unique U, required::Entropy S> auto Randomizer<U,S>::operator()() -> Result {
    auto ret = Result{};
    unsigned ith{0};
    auto cache = typename Entropy::Draw{};
    for (auto &place : ret) {
      if (0 == ith++ % DRAW_WIDTH) {
        cache = source.draw();
      } else {
        auto slice = octets::Octet(cache & 0xff);
        cache >>= 8;
        place = slice;
      }
    }
    return ret;
  }
}
#endiv
