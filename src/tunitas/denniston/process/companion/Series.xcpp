// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.process.companion.required.Subprocess
namespace tunitas::denniston::process::companion {
  //
  // A collection of companion subprocesses
  //
  // Specification:
  //
  //   Ordered by creation-order.
  //   Does NOT lock.
  //   Provides destruction at end-of-life.
  //   Provides a notify-all (notify-all-but-self)
  //
  //   notify_all_except - notify every subprocess thread *except* self to move start moving.
  //
  // Design:
  //
  //   Using the Best Available Means & Methods (UBAMM)
  //   For simplicity, only the default constructor.
  //
  // Usage:
  //
  //   As one does. (as one does any sequential container)
  //
  template<required::Subprocess> struct Series;
}
#endiv
#divert <hpp>
#import tunitas.denniston.process.companion.Pointer
#import tunitas.keyston.array.Series
namespace tunitas::denniston::process {
  template<companion::required::Subprocess SUBPROCESS> struct companion::Series : public keyston::array::Series<Pointer<SUBPROCESS>> {
    using Ancestor = keyston::array::Series<Pointer<SUBPROCESS>>;
    using Subprocess = SUBPROCESS;
  public:
    Series() = default;
    inline auto notify() -> void;
    inline auto notify_all_except(Subprocess *) -> void;
  };
}
#endiv
#divert <ipp>
namespace tunitas::denniston::process::companion {
  template<required::Subprocess _> auto Series<_>::notify() -> void {
    for (auto &item : *this) {
      item->barrier.notify();
    }
  }
  template<required::Subprocess _> auto Series<_>::notify_all_except(Subprocess *that) -> void {
    for (auto &item : *this) {
      if (item.get() != that) {
        item->barrier.notify();
      }
    }
  }
}
#endiv
