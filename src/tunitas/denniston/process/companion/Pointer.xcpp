// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.process.companion.required.Subprocess
namespace tunitas::denniston::process::companion {
  //
  // A pointer to a companion subprocess.
  //
  // Specification:
  //
  //   unique_ptr, you know.
  //
  // Design:
  //
  //   std::unique_ptr
  //   typename Pointer<TYPE>::Value is referenced in required::iterator::Subprocess
  //
  // Usage:
  //
  //   Said it before ... unique_ptr.
  //   See std::make_unique(...)
  //
  template<required::Subprocess> struct Pointer;
}
#endiv
#divert <hpp>
#import std.unique_ptr
namespace tunitas::denniston::process {
  template<companion::required::Subprocess INSTANCE> struct companion::Pointer : public std::unique_ptr<INSTANCE> {
    using Ancestor = std::unique_ptr<INSTANCE>;
  public:
    using Element = typename Ancestor::element_type;
    using Value [[deprecated("prefer Pointer<INSTANCE>::Element because it's called Element in the case of a Pointer")]] = Element;
    Pointer() = default;
    using Ancestor::unique_ptr;
    Pointer(Ancestor &&donor) : Ancestor{forward<Ancestor>(donor)} { }
    using Ancestor::operator=;
    Pointer &operator=(Ancestor &&donor) { Ancestor::operator=(forward<Ancestor>(donor)); return *this; }
  };
}
#endiv
