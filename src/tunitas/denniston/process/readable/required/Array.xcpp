// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Container
#import nonstd.required.Pointer
#import nonstd.container.Traits
#include <hpp/nonstd.container.Traits>
#import std.ranges.range
#import std.begin // need the definition, so maybe <hpp>?
#import std.end 
#import std.prev
#import std.remove_pointer
#import std.size_t
#import tunitas.denniston.process.readable.required.Mutex
namespace tunitas::denniston::process::readable::required {
  //
  // Is this ARRAY (container) suitable for use in readable::Container<ARRAY>?
  //
  template<typename ARRAY> concept Array = requires(ARRAY array, std::size_t index) {
    requires Container<ARRAY>;
    typename nonstd::container::Traits<ARRAY>::Value;
    requires Pointer<typename nonstd::container::Traits<ARRAY>::Value>;
    requires Mutex<std::remove_pointer_t<typename nonstd::container::Traits<ARRAY>::Value>>;
    requires std::ranges::range<ARRAY>;
    // belaboring the point
    { array.empty() };
    { array.size() };
    { array.begin() };
    { array.end() };
    { std::begin(array) };
    { std::end(array) };
    { array.front() };
    { std::prev(std::end(array)) };
    { std::ranges::subrange(std::begin(array), std::end(array)) };
    { array[index] };
  };
}
#endiv
