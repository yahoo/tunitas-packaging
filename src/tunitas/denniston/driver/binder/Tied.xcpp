// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::driver::binder {
  //
  // Tied Together
  //
  // Specification:
  //
  //   A pair of lvals
  //
  // Design:
  //
  //   Obvious, once you see it.
  //
  // Usage:
  //
  //     tie(green.readable, green.face) = left(*noob, blue.ready);
  //     tie(blue.readable, blue.face) = right(*noob, green.ready);
  //
  struct Tied;
}
#endiv
#divert <hpp>
#import tunitas.Tuple
#forward tunitas.denniston.network.pipe.readable.Variable
#forward tunitas.denniston.network.Socket.Interface
#import tunitas.denniston.driver.binder.Untied
class tunitas::denniston::driver::binder::Tied : public Tuple<network::pipe::readable::Variable &, network::Socket::Interface &> {
  using Ancestor = Tuple<network::pipe::readable::Variable &, network::Socket::Interface &>;
public:
  using Ancestor::tuple;
  inline auto operator=(Untied) -> void;
};
#endiv
#divert <ipp>
#import tunitas.denniston.network.pipe.readable.Variable
#import tunitas.denniston.network.Socket.Interface
namespace tunitas::denniston::driver::binder {
  auto Tied::operator=(Untied untied) -> void {
    auto &[readable, face_lhs] = static_cast<Ancestor &>(*this);
    auto [pollability, face_rhs] = untied;
    face_lhs = face_rhs;
    readable.add(*pollability);
  }
}
// Present the rest of the inlines (reduce warnings)
#import tunitas.denniston.network.pipe.readable.Variable
#endiv
