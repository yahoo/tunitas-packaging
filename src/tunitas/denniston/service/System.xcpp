// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.service.instance
#import tunitas.keyston.protocol.constants
namespace tunitas::denniston::service {
  //
  // The manifestation of the service system (all of them comprise the system)
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 2. System Architecture
  //
  //   The static configuration of the processes is represented.
  //   The dynamic operation is managed by the Configuration in the context of a thread pool (not shown)
  //
  // Obligations:
  //
  //   Once constructed, the processes are neither linked nor running.
  //   The caller is responsible for linking up the process communication channels.
  //   The caller must launch the processes into a thread pool.
  //   That thread pool must last longer than this system.
  //
  // Lifetimes:
  //
  //   lifetime(system) < lifetime(...off-stage thread pool...)
  //
  // Design:
  //
  //   The three (no four, no five) roles:
  //   1. configuration & directory
  //   2. collector.
  //   3. processor; a.k.a. "helper", a.k.a. "aggregator"
  //   4. gateway, a.k.a. "leader"
  //
  //   Use deque because we don't need the contiguousness of vector
  //
  //   Responsible for sizing the interface arrays within each of subsystems
  //   See the constructor
  //
  // Usage:
  //
  //   Yes.
  //
  namespace [[eponymous]] system {
    struct System;
    using namespace instance;
    using tunitas::keyston::protocol::constants::PROCESSOR_COUNT;
  }
  using system::System;
}
#endiv
#divert <hpp>
#import tunitas.keyston.entropy.Source
#import tunitas.denniston.Configuration
#import tunitas.denniston.service.instance.Pointer
#import tunitas.denniston.service.instance.Client
#import tunitas.denniston.service.instance.Collector
#import tunitas.denniston.service.instance.Configuration
#import tunitas.denniston.service.instance.Directory
#import tunitas.denniston.service.instance.Gateway
#import tunitas.denniston.service.instance.Processor
#import tunitas.keyston.vdaf.Shards
#import std.deque // [[TODO]] don't use keyston::array::Variable but do use keyston::index::Container or something like that
class tunitas::denniston::service::system::System {
  template<instance::required::Instance TYPE> using Pointer = instance::Pointer<TYPE>;
public:
  std::deque<Pointer<Client>> clients{}; 
  Pointer<Collector> collector{};
  Pointer<Configuration> configuration{};
  Pointer<Directory> directory{};
  Pointer<Gateway> gateway{};
  keyston::vdaf::Shards<Pointer<Processor>> processors{};
  //
  using Entropy = keyston::entropy::Source;
  explicit System(Entropy &, [[inout]] denniston::Configuration &, Size initial_client_count = 0);
  System(System const &) = delete;
  System &operator=(System const &) = delete;
};
#endiv
#divert <cpp>
#import tunitas.denniston.service.instance.make
#import std.to_array
namespace tunitas::denniston::service::system {
  System::System(Entropy &entropy, denniston::Configuration &cfg, Size initial_client_count)
    : collector{make<Collector>(cfg)}
    , configuration{make<Configuration>(cfg)}
    , directory{make<Directory>(cfg)}
    , gateway{make<Gateway>(entropy, cfg)}
    , processors{make<Processor>(entropy, cfg, Species::PROCESSOR1), make<Processor>(entropy, cfg, Species::PROCESSOR2)}
  {
    for (auto i{0uz}; initial_client_count != i; ++i) {
      auto role = role::make_client_species(i);
      clients.push_back(make<Client>(entropy, cfg, role));
    }
    configuration->clients.resize(clients.size());
    directory->clients.resize(clients.size());
    gateway->clients.resize(clients.size());
  }
}
namespace {
  namespace testate {
    using namespace tunitas::denniston::service;
    static_assert(not std::is_default_constructible_v<System> || std::is_default_constructible_v<System>);
    static_assert(not std::is_copy_constructible_v<System>);
    static_assert(not std::is_move_constructible_v<System>);
    static_assert(not std::is_copy_assignable_v<System>);
    static_assert(not std::is_move_assignable_v<System>);
    static_assert(not std::is_swappable_v<System>);
  }
}
#endiv
