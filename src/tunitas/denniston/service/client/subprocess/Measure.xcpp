// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::client::subprocess {
  //
  // Spontaneously generate some measurements
  //
  // Specificiation:
  //
  //   Measure something.
  //   Send it to the server (Gateway) for processing.
  //
  // Design:
  //
  //   Just what you see.
  //
  // Concurrency:
  //
  //   Not within.
  //   Synchronize with (others) in the Client by the Prototype::barrier.
  //
  // Usage:
  //
  //   See service::instance::Client
  //
  struct Measure;
}
#endiv
#divert <hpp>
#import tunitas.denniston.concurrent.entropy.Source
#import tunitas.denniston.report.Generator
#import tunitas.denniston.task.Definition
#import tunitas.denniston.service.client.subprocess.Prototype
#import tunitas.keyston.protocol.report.Produced
#import tunitas.keyston.entropy.Jitter
namespace tunitas::denniston::service::client {
  namespace subprocess {
    inline auto swap(Measure *&a, Measure *&b) noexcept -> void { std::swap(a, b); }
  }
  class subprocess::Measure : public Prototype {
    using Ancestor = Prototype;
  public:
    inline explicit Measure(Client &, task::Definition const &);
    //
    auto run() noexcept -> void;
    //
    denniston::task::Definition const &task;
    report::Generator<concurrent::entropy::Source::Wrapper> measure;
    keyston::entropy::Jitter<concurrent::entropy::Source::Wrapper> delay;
  };
}
#endiv
#divert <ipp>
#import std.this_thread.sleep_for
namespace tunitas::denniston::service::client::subprocess {
  Measure::Measure(Client &owner, task::Definition const &definition)
    : Ancestor{owner}
    , task{definition}
    , measure{owner.entropy}
    , delay{owner.entropy, 250ms, 10ms} {
    // expects this->barrier to already be started (locked)
    subbie = std::jthread{&Measure::run, this};
  }
}
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::denniston::service::client::subprocess::Measure;
    //
    static_assert(not std::semiregular<Measure>);
    //
    // because that barrier in Measure::Ancestor (Prototype) has an immobile mutex within it.
    static_assert(not std::is_default_constructible_v<Measure>);
    static_assert(not std::is_copy_constructible_v<Measure>);
    static_assert(not std::is_move_constructible_v<Measure>);
    static_assert(not std::is_copy_assignable_v<Measure>);
    static_assert(not std::is_move_assignable_v<Measure>);
    static_assert(not std::is_swappable_v<Measure>);
    static_assert(    std::is_swappable_v<Measure *>);
  }
}
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Report
namespace tunitas::denniston::service::client::subprocess {
  auto Measure::run() noexcept -> void try {
    // Slow Down! [[provisionally]]
    while (!owner.is_shutting_down()) {
      auto measured = measure(task.id);
      owner.log.format("measured something for task {}", measured.task_id);
      owner.gateway.write(make<Report<Slice::WHOLE>>(move(measured)));
      std::this_thread::sleep_for(delay());
    }
    owner.log.format("measure is ending");
  } catch (process::companion::Shutdown) {
    // yay!
  } catch(...) {
    owner.log.format("measure has an escaped exception which is suppressed");
  }
}
#endiv
