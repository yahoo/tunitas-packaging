// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::client {
  //
  // A manifestation of a client in the network.
  //
  // Specification:
  //
  //   Provides the source of a measurement.
  //   The client namei is expected to be a positive value; e.g. Species{33}
  //
  // Design:
  //
  //   Something something: a thread.
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Client;
}
#endiv
#divert <hpp>
#import tunitas.denniston.Species
#forward tunitas.denniston.Configuration
#import tunitas.denniston.process.Reactor
#import tunitas.denniston.task.Dictionary
#import tunitas.denniston.task.Definition
#import tunitas.denniston.service.Dictionary
#import tunitas.denniston.service.client.Subprocesses
#import tunitas.denniston.process.companion.Barrier
#import tunitas.denniston.concurrent.entropy.Source
class tunitas::denniston::service::client::Client : public process::Reactor {
  using Ancestor = process::Reactor;
protected:
  auto react() -> void override;
public:
  using Entropy = keyston::entropy::Source;
  inline explicit Client([[inout]] Entropy &, [[inout]] denniston::Configuration &, Species);
  ~Client();
  auto launch(scheduler::Threads &) -> void override;
  Interface configuration{};
  Interface directory{};
  Interface gateway{};
  Subprocesses subprocesses{}; // accessed from the boot subprocess
  //
  task::Dictionary<task::Definition> tasks{};
  service::Dictionary<keyston::hpke::Side::PUBLIC> services{};
  std::atomic<unsigned> howmany_were_recovered{0};
  concurrent::entropy::Source::Wrapper entropy;
};
#endiv
#divert <ipp>
#import tunitas.denniston.Configuration
#import tunitas.denniston.exception.Invalid
namespace tunitas::denniston::service::client {
  Client::Client(Entropy &entropy, denniston::Configuration &, Species role)
    : Ancestor{role}
    , entropy{entropy}
  {
    if (!is_client(role)) {
      throw exception::Invalid{"invalid role for a client"};
    }
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.service.client.subprocess.make
#import tunitas.denniston.service.client.subprocess.Boot
#import tunitas.denniston.protocol.packet.cast // for downcast(...), is<TYPE>(...) and and is_$thing(...)
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Status
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Response
namespace tunitas::denniston::service::client {
  Client::~Client() {
    ready.notify();
    subprocesses.wait_for_all_to_finish();
    disposable.acquire();
  }
  auto Client::launch(scheduler::Threads &pool) -> void {
    disposable.acquire(); // with release() in React::run()
    pool.launch(&Client::run, this);
    subprocesses.spawn(subprocess::make<subprocess::Boot>(*this));
  }
  auto Client::react() -> void {
    if (auto red=configuration.read_if(); red) {
      if (auto got=downcast_get<Status>(*red); nullptr != got) {
        log.format("from configuration failure: {}", got->status.message());
      } else if (auto got=downcast_get<Response<Get::TASKS>>(*red); nullptr != got) {
        log.format("from configuration tasks: count {}", got->tasks.size());
        for (auto &given : got->tasks) {
          static_assert(std::tuple_size<decltype(tasks.insert(move(given)))>::value);
          auto [noob, inserted] = tasks.insert(move(given));
          log.format("{} {}", (inserted ? "inserted"s : "duplicated"s), noob.id);
        }
        subprocesses.notify();
      } else {
        log.format("from configuration something else (ignored)");
      }
    }
    if (auto red=directory.read_if(); red) {
      auto notifiable{false};
      if (auto got=downcast_get<Status>(*red); nullptr != got) {
        ++howmany_were_recovered;
        notifiable = true;
        log.format("from directory, the failure {}", got->status.message());
      } else if (auto got=downcast_get<Response<Get::PUBLIC>>(*red); nullptr != got) {
        ++howmany_were_recovered;
        notifiable = true;
        log.format("from directory, got the hpke for {}", got->service_id);
        auto [noob, inserted] = services.insert(move(got->service_id), move(got->configuration));
        log.format("which is {}", (inserted ? "inserted"s : "duplicated"s));
      } else {
        log.format("from directory, something else (which is ignored)");
      }
      if (notifiable) {
        subprocesses.notify();
      }
    }
    if (auto red=gateway.read_if(); red) {
      if (auto got=downcast_get<Status>(*red); nullptr != got) {
        log.format("from gateway status: {}", got->status.message());
      } else {
        log.format("from gateway, something else (which is ignored)");
      }
    }
  }
}
#endiv
