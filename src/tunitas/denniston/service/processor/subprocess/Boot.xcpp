// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::processor::subprocess {
  //
  // The Bootialization subprocess (thread)
  //
  // Specificiation:
  //
  //   Ask for the tasks.
  //
  // Design:
  //
  //   Just what you see.
  //
  // Concurrency:
  //
  //   Not within.
  //   Synchronize with (others) in the Processor by the Prototype::barrier.
  //
  // Usage:
  //
  //   See service::instance::Processor
  //
  struct Boot;
}
#endiv
#divert <hpp>
#import tunitas.denniston.count
#import tunitas.denniston.service.processor.subprocess.Prototype
namespace tunitas::denniston::service::processor {
  namespace subprocess {
    inline auto swap(Boot *&a, Boot *&b) noexcept -> void { std::swap(a, b); }
  }
  class subprocess::Boot : public Prototype {
    using Ancestor = Prototype;
  public:
    inline explicit Boot(Processor &);
    //
    auto run() noexcept -> void;
  };
}
#endiv
#divert <ipp>
#import tunitas.denniston.job.Corpus
namespace tunitas::denniston::service::processor::subprocess {
  Boot::Boot(Processor &owner) : Ancestor{owner} {
    // expects this->barrier to already be started (locked)
    subbie = std::jthread{&Boot::run, this};
  }
}
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::denniston::service::processor::subprocess::Boot;
    //
    static_assert(not std::semiregular<Boot>);
    //
    // because that barrier in Boot::Ancestor (Prototype) has an immobile mutex within it.
    static_assert(not std::is_default_constructible_v<Boot>);
    static_assert(not std::is_copy_constructible_v<Boot>);
    static_assert(not std::is_move_constructible_v<Boot>);
    static_assert(not std::is_copy_assignable_v<Boot>);
    static_assert(not std::is_move_assignable_v<Boot>);
    static_assert(not std::is_swappable_v<Boot>);
    static_assert(    std::is_swappable_v<Boot *>);
  }
}
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Query
namespace tunitas::denniston::service::processor::subprocess {
  auto Boot::run() noexcept -> void try {
    //
    // 1. Ask for the tasks
    //
    owner.configuration.write(make<Query<Get::TASKS>>());
    barrier.wait([this]{ return !owner.tasks.empty(); });
    //
    // 2. Foreach task, ask for it's crypto goo (the SECRET)
    //
    barrier.start();
    auto howmany_were_sent{0uz};
    for (auto locked=owner.tasks.range(); auto const &task : locked) {
      for (auto const &endpoint : task.definition.services) {
        ++howmany_were_sent;
        owner.directory.write(make<Query<Get::SECRET>>(endpoint, task.definition.id));
      }
    }
    owner.log.format("waiting for {} queries to return", howmany_were_sent);
    barrier.wait([this, howmany_were_sent]{ return howmany_were_sent == owner.howmany_were_recovered.load(); });
    owner.subprocesses.notify_all_except(this);
    owner.log.format("boot is ending, having recovered some tasks and all their secrets");
  } catch (process::companion::Shutdown) {
    // yay!
  } catch(...) {
    owner.log.format("boot has an escaped exception which is suppressed");
  }
}
#endiv
