// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::processor {
  //
  // A manifestation of an processor in the network.
  //
  // Specification:
  //
  //   Computes aggregates.
  //
  // Invariants:
  //
  //   The Processor role is expected to be one of the two aggregator names.
  //
  // Design:
  //
  //   Something something: a thread.
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Processor;
}
#endiv
#divert <hpp>
#import tunitas.Optional
#import tunitas.denniston.concurrent.Channel
#import tunitas.denniston.concurrent.Variable
#forward tunitas.denniston.World
#import tunitas.denniston.process.Reactor
#import tunitas.denniston.protocol.packet.Pointer
#import tunitas.denniston.protocol.packet.Request
#import tunitas.denniston.service.processor.Subprocesses
#import tunitas.keyston.hpke.Configuration
class tunitas::denniston::service::processor::Processor : public process::Reactor {
  using Ancestor = process::Reactor;
  auto react() -> void override;
  auto catchup() -> void override;
public:
  inline explicit Processor(Species);
  inline explicit Processor([[inout]] World &, Species);
  auto launch(driver::Threads &) -> void override;
  Interface configuration{};
  Interface gateway{};
  Subprocesses subprocesses{};
  //
  concurrent::Variable<keyston::hpke::Configuration> hpke{};
  concurrent::Channel<protocol::packet::Pointer<Request<Post::INITIALIZATION>>> initializations{};
  concurrent::Channel<protocol::packet::Pointer<Request<Post::CONTINUATION>>> continuations{};
};
#endiv
#divert <ipp>
#import tunitas.denniston.World
#import tunitas.denniston.exception.Invalid
namespace tunitas::denniston::service::processor {
  Processor::Processor(World &, Species role) : Processor{role} { }
  Processor::Processor(Species role)
    : Ancestor{role}
  {
    if (!is_processor(role)) {
      throw exception::Invalid{"invalid role for a processor"};
    }
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.protocol.packet.cast
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Status
#import tunitas.denniston.protocol.packet.Request
#import tunitas.denniston.protocol.packet.Response
#import tunitas.denniston.role.io
#import tunitas.denniston.service.processor.subprocess.make
#import tunitas.denniston.service.processor.subprocess.Boot
#import tunitas.denniston.service.processor.subprocess.Compute
namespace tunitas::denniston::service::processor {
  auto Processor::launch(driver::Threads &pool) -> void {
    pool.launch(&Processor::run, this);
    subprocesses.push_back(subprocess::make<subprocess::Boot>(*this));
    subprocesses.push_back(subprocess::make<subprocess::Compute>(*this));
  }
  auto Processor::catchup() -> void {
    if (graceful_shutdown.load()) {
      for (auto &sub : subprocesses) {
        sub->barrier.notify();
      }
    }
  }
  auto Processor::react() -> void {
    if (auto red=configuration.read_if(); red) {
      log.format("red from configuration (and ignoring it)");
      if (auto got=downcast_get<Status>(*red); nullptr != got) {
        log.format("from configuration failure: {}", got->status.message());
      } else if (auto got=downcast_get<Response<Get::HPKE>>(*red); nullptr != got) {
        hpke = got->configuration;
        // And yet there is only the one subprocess (boot) at this point.
        for (auto &sub : subprocesses) {
          sub->barrier.notify();
        }
      } else {
        log.format("from configuration, something else (ignored)");
      }
    }
    if (auto red=gateway.read_if(); red) {
      log.format("red from gateway (and ignoring it)");
      // if (auto got=downcast_get<Request<Post::INITIALIZATION>>(*red); nullptr != got) {
      if (is<Request<Post::INITIALIZATION>>(*red)) {
        initializations.push_back(downcast<Request<Post::INITIALIZATION>>(otherwise::Exception{}, move(*red)));
      } else if (is<Request<Post::CONTINUATION>>(*red)) {
        continuations.push_back(downcast<Request<Post::CONTINUATION>>(otherwise::Exception{}, move(*red)));
      } else {
        log.format("from gateway, something else (ignored)");
      }
    }
  }
}
#endiv
