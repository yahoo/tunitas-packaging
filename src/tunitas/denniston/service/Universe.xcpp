// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.service.instance
namespace tunitas::denniston::service {
  //
  // The manifestation of the service universe
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 2. System Architecture
  //
  // Design:
  //
  //   The three roles:
  //   1. collector.
  //   2. processor; a.k.a. "helper", a.k.a. "aggregator"
  //   3. gateway, a.k.a. "leader"
  //
  //   Use deque because we don't need the contiguousness of vector
  //
  // Usage:
  //
  //   Yes.
  //
  namespace [[eponymous]] universe {
    struct Universe;
    using namespace instance;
  }
  using universe::Universe;
}
#endiv
#divert <hpp>
#import tunitas.denniston.service.Instance
#import std.deque
struct tunitas::denniston::service::universe::Universe {
  Instance gateway;
  Instance collector;
  Instance processor[2];
  std::deque<Instance> clients{}; 
  //
  explicit Universe(Size initial_client_count = 0);
  Universe(Universe const &) = delete;
  Universe &operator=(Universe const &) = delete;
};
#endiv
#divert <cpp>
#import tunitas.denniston.service.instance.make
#import tunitas.denniston.service.instance.Gateway
#import tunitas.denniston.service.instance.Collector
#import tunitas.denniston.service.instance.Processor
#import tunitas.denniston.service.instance.Client
namespace tunitas::denniston::service::universe {
  Universe::Universe(Size initial_client_count)
    : gateway{make<Gateway>()}
    , collector{make<Collector>()}
    , processor{make<Processor>(Name::PROCESSOR1), make<Processor>(Name::PROCESSOR2)}
  {
    for (auto i{0uz}; initial_client_count != i; ++i) {
      auto name = Name(underlying(Name::CLIENT) + i);
      clients.push_back(make<Client>(name));
    }
  }
}
namespace {
  namespace testate {
    using namespace tunitas::denniston::service;
    static_assert(not std::is_default_constructible_v<Universe> || std::is_default_constructible_v<Universe>);
    static_assert(not std::is_copy_constructible_v<Universe>);
    static_assert(not std::is_move_constructible_v<Universe>);
    static_assert(not std::is_copy_assignable_v<Universe>);
    static_assert(not std::is_move_assignable_v<Universe>);
    static_assert(not std::is_swappable_v<Universe>);
  }
}
#endiv
