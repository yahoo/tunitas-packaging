// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::instance {
  //
  // A manifestation of a client in the network.
  //
  // Specification:
  //
  //   Provides the source of a measurement.
  //   The client namei is expected to be a positive value; e.g. Species{33}
  //
  // Design:
  //
  //   Something something: a thread.
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Client;
}
#endiv
#divert <hpp>
#import tunitas.denniston.Species
#forward tunitas.denniston.World
#import tunitas.denniston.process.Reactor
#import tunitas.denniston.task.Dictionary
#import tunitas.denniston.task.Definition
#import tunitas.denniston.service.Dictionary
#import tunitas.denniston.process.companion.Barrier
#import tunitas.denniston.report.Generator
#import tunitas.keyston.entropy.Source
class tunitas::denniston::service::instance::Client : public process::Reactor {
  using Ancestor = process::Reactor;
  auto script() noexcept -> void;
  auto react() -> void override;
  auto catchup() -> void override;
public:
  using Entropy = keyston::entropy::Source;
  inline explicit Client([[inout]] Entropy &, [[inout]] World &, Species);
  auto launch(driver::Threads &) -> void override;
  Interface configuration{};
  Interface directory{};
  Interface gateway{};
  task::Dictionary<task::Definition> tasks{};
  service::Dictionary services{};
  process::companion::Barrier barrier{*this};
  Size inflight_query_count{};
  report::Generator measure;
};
#endiv
#divert <ipp>
#import tunitas.denniston.World
#import tunitas.denniston.exception.Invalid
namespace tunitas::denniston::service::instance {
  Client::Client(Entropy &entropy, World &, Species role)
    : Ancestor{role}
    , measure{entropy}
  {
    if (!is_client(role)) {
      throw exception::Invalid{"invalid role for a client"};
    }
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.protocol.packet.cast // for downcast(...), is<TYPE>(...) and and is_$thing(...)
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Status
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Response
#import tunitas.denniston.protocol.packet.Report
#import tunitas.denniston.process.companion.Shutdown
#import nonstd.copy
#import std.this_thread.sleep_for
namespace tunitas::denniston::service::instance {
  auto Client::launch(driver::Threads &pool) -> void {
    pool.launch(&Client::run, this);
    pool.launch(&Client::script, this);
  }
  auto Client::catchup() -> void {
    if (graceful_shutdown.load()) {
      barrier.notify(); // catch up!
    }
  }
  auto Client::react() -> void {
    if (auto red=configuration.read_if(); red) {
      if (auto got=downcast<Status>(*red); nullptr != got) {
        log.format("from configuration failure: {}", got->status.message());
      } else if (auto got=downcast<Response<Get::TASKS>>(*red); nullptr != got) {
        log.format("from configuration tasks: count {}", got->tasks.size());
        for (auto &given : got->tasks) {
          auto [noob, inserted] = tasks.insert(move(given));
          log.format("{} {}", (inserted ? "inserted"s : "duplicated"s), noob.id);
        }
        barrier.notify();
      } else {
        log.format("from configuration something else (ignored)");
      }
    }
    if (auto red=directory.read_if(); red) {
      if (auto got=downcast<Status>(*red); nullptr != got) {
        log.format("from directory, the failure {}", got->status.message());
        --inflight_query_count;
      } else if (auto got=downcast<Response<Get::HPKE>>(*red); nullptr != got) {
        log.format("from directory, got the hpke for {}", got->service_id);
        auto [noob, inserted] = services.insert(move(got->service_id), move(got->configuration));
        log.format("which is {}", (inserted ? "inserted"s : "duplicated"s));
        --inflight_query_count;
      } else {
        log.format("from directory, something else (which is ignored)");
      }
      if (0 == inflight_query_count) {
        barrier.notify();
      }
    }
  }
  auto Client::script() noexcept -> void try {
    log.format("starting the script");
    //
    // Ask for the tasks
    //
    barrier.start();
    configuration.write(make<Query<Get::TASKS>>()); // ask for them all
    log.format("wrote for some TASKS");
    barrier.wait([this]{ return !tasks.empty(); });
    log.format("after the barrier, there are {} tasks and {} shutdown", tasks.size(), graceful_shutdown.load());
    //
    // Foreach task, ask for the service specifications
    //
    inflight_query_count = [this]{
                             auto count{0uz};
                             for (auto const &task : tasks) { count += task.services.size(); }
                             return count;
                           }();
    log.format("there will be {} endpoints", inflight_query_count);
    barrier.start();
    auto howmany{0uz};
    for (auto const &task : tasks) {
      for (auto const &endpoint : task.services) {
        ++howmany;
        ++inflight_query_count;
        directory.write(make<Query<Get::HPKE>>(endpoint, task.id));
      }
    }
    log.format("waiting for {} queries to return", howmany);
    barrier.wait([this]{ return 0 == inflight_query_count; });
    //
    // Then start sending measurements
    //
    barrier.start();
    while (!graceful_shutdown.load()) {
      for (auto const &task : tasks) {
        std::this_thread::sleep_for(10ms);
        gateway.write(make<Report<Slice::WHOLE>>(measure(task.id)));
      }
      std::this_thread::sleep_for(90ms);
    }
    log.format("script is ending, having recovered the endpoints");
  } catch (process::companion::Shutdown) {
    // yay!
  } catch(...) {
    log.format("script has an escaped exception which is suppressed");
  }
}
#endiv
