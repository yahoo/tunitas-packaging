// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::instance {
  //
  // A manifestation of the directory (service) in the network.
  //
  // Specification:
  //
  //   Serves network descriptions; e.g. HPKE configurations about 
  //
  //   This is at variance with the specification (draft-ietf-ppm-dap-02 at least) which specifies that
  //   The HPKE configurations MUST be supplied by the aggregators (here called "processors").  We don't follow that.
  //   Here, the HPKE configurations are served to clients from a separate service, this service.
  //   Clients do not have any direct contact with the processor fleet at all.
  //
  //   Soooo.  It's "like DNS" or "like LDAP."
  //
  // Authorities:
  //
  //   I-D.ietf-ppm-dap
  //   Distributed Aggregation Protocol for Privacy Preserving Measurement
  //   https://www.ietf.org/archive/id/draft-ietf-ppm-dap-02.html
  //   Section 2.1. System Architecture
  //
  // Design:
  //
  //   Something something: a thread.
  //
  //   Whereas this is a simulator, we're not modeling access control on the secrets here.
  //   As in ... if some part of the system asks for the SECRET then they can have it.
  //   We expect
  //     the Client to ask for PUBLIC
  //     the Processor to ask for SECRET
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Directory;
}
#endiv
#divert <hpp>
#forward tunitas.denniston.Configuration
#import tunitas.denniston.error.Code
#import tunitas.denniston.process.Reactor
#import tunitas.denniston.protocol.Packet
#import tunitas.denniston.service.Dictionary
#import tunitas.keyston.Shards
#import tunitas.string.View
class tunitas::denniston::service::instance::Directory : public process::Reactor {
  using Ancestor = process::Reactor;
protected:
  auto react() -> void override;
  using Shards = keyston::Shards<Interface>;
  auto handle(Interface &, protocol::Packet, string::View from_whom) -> void;
  template<protocol::packet::Get GET> auto respond([[inout]] Interface &, [[inout]] Query<GET> &, string::View from_whom) -> void;
public:
  inline explicit Directory();
  inline explicit Directory([[inout]] denniston::Configuration &);
  ~Directory();
  Interfaces clients{};
  Shards processors{};
  service::Dictionary<keyston::hpke::Side::SECRET> services{};
#if 12 < __GNUC__
  // src/tunitas/denniston/service/instance/Directory.xcpp:92:34: internal compiler error: in tsubst_copy, at cp/pt.cc:16950
  using E = error::Code;
#else
  using E = error::Code::Enumeration;
  using C = error::Code;
#endif
};
#endiv
#divert <ipp>
#import tunitas.denniston.Configuration
namespace tunitas::denniston::service::instance {
  Directory::Directory() : Ancestor{Species::DIRECTORY} { }
  Directory::Directory(denniston::Configuration &cfg) : Directory{} {
    services = move(*cfg.services);
  }
}
#endiv
#divert <tpp>
#import tunitas.keyston.hpke.io // supports {} in format(...)
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Status
#import tunitas.keyston.hpke.filter
namespace tunitas::denniston::service::instance {
  template<protocol::packet::Get GET> auto Directory::respond(Interface &back, Query<GET> &query, string::View from_whom) -> void {
    constexpr auto const SIDE = Query<GET>::SIDE;
    auto &service_id = query.service_id;
    if (query.task_id) {
      log.format("from {}, request for the {} hpke of {} task {} [[the task_id will be ignored]]", from_whom, SIDE, service_id, *query.task_id);
    } else {
      log.format("from {}, request for the {} hpke of {}", from_whom, SIDE, service_id);
    }
    if (auto found=services.find(service_id); !found) {
      back.write(protocol::packet::make<Status>(E::NO_SUCH_SERVICE));
    } else {
      back.write(protocol::packet::make<Response<GET>>(move(service_id), filter<SIDE>(*found))); // see the commentariat in Design: (SECRET vs PUBLIC)
    }
  }
}
#endiv
#endiv
#divert <cpp>
#import tunitas.denniston.protocol.packet.cast
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Response
namespace tunitas::denniston::service::instance {
  Directory::~Directory() {
    ready.notify();
    // There are no subprocesses
    disposable.acquire();
  }
  auto Directory::react() -> void {
    for (auto &face : clients) {
      if (auto red=face.read_if(); red) {
        handle(face, move(*red), "some client"sv);
      }
    }
    for (auto &face : processors) {
      if (auto red=face.read_if(); red) {
        handle(face, move(*red), "some processor"sv);
      }
    }
  }
  auto Directory::handle(Interface &back, protocol::Packet red, string::View from_whom) -> void {
    if (auto got=downcast_get<Query<Get::PUBLIC>>(red); nullptr != got) {
      respond(back, *got, from_whom);
    } else if (auto got=downcast_get<Query<Get::SECRET>>(red); nullptr != got) {
      respond(back, *got, from_whom);
    } else {
      log.format("unknown packet from {} (is ignored)", from_whom);
    }
  }
}
#endiv
