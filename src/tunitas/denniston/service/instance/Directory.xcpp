// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::instance {
  //
  // A manifestation of the directory (service) in the network.
  //
  // Specification:
  //
  //   Serves network descriptions; e.g. HPKE configuations about 
  //
  //   This is at variance with the specification (draft-ietf-ppm-dap-02 at least) which specifies that
  //   The HPKE configurations MUST be supplied by the aggregators (here called "processors").  We don't follow that.
  //   Here, the HPKE configurations are served to clients from a separate service, this service.
  //   Clients do not have any direct contact with the processor fleet at all.
  //
  //   Soooo.  It's "like DNS" or "like LDAP."
  //
  // Authorities:
  //
  //   I-D.ietf-ppm-dap
  //   Distributed Aggregation Protocol for Privacy Preserving Measurement
  //   https://www.ietf.org/archive/id/draft-ietf-ppm-dap-02.html
  //   Section 2.1. System Architecture
  //
  // Design:
  //
  //   Something something: a thread.
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Directory;
}
#endiv
#divert <hpp>
#forward tunitas.denniston.World
#import tunitas.denniston.service.instance.Prototype
#import tunitas.denniston.service.Dictionary
#import tunitas.denniston.error.Code
class tunitas::denniston::service::instance::Directory : public Prototype {
  using Ancestor = Prototype;
  auto run() noexcept -> void;
public:
  inline explicit Directory();
  inline explicit Directory([[inout]] World &);
  auto launch(driver::Threads &) -> void override;
  Interfaces clients{};
  service::Dictionary services{};
  using E = error::Code;
};
#endiv
#divert <ipp>
#import tunitas.denniston.World
namespace tunitas::denniston::service::instance {
  Directory::Directory()
    : Ancestor{Name::DIRECTORY}
  { }
  Directory::Directory(World &world) : Directory{} {
    services = move(*world.services);
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.message.packet.cast
#import tunitas.denniston.message.packet.make
#import tunitas.denniston.message.packet.Status
#import tunitas.denniston.message.packet.Query
#import tunitas.denniston.message.packet.Response
namespace tunitas::denniston::service::instance {
  auto Directory::launch(driver::Threads &pool) -> void { pool.launch(&Directory::run, this); }
  auto Directory::run() noexcept -> void try {
    log.format("begin running");
    while (!graceful_shutdown.load()) {
      ready.wait(readable);
      log.format("reading");
      if (auto red=control.read_if(); red) {
        log.format("red from control");
        if (is_quit(*red)) {
          graceful_shutdown.store(true);
          break;
        }
      }
      for (auto &face : clients) {
        if (auto red=face.read_if(); red) {
          log.format("red from some client");
          using namespace message::packet;
          if (auto got=downcast<Query<Get::HPKE>>(*red); nullptr != got) {
            auto const &service_id = got->service_id;
            if (got->task_id) {
              log.format("asked for the hpke of {} task {} [[the task_id will be ignored]]", service_id, *got->task_id);
            } else {
              log.format("asked for the hpke of {}", service_id);
            }
            if (auto found=services.find(service_id); !found) {
              face.write(make<Status>(E::NO_SUCH_SERVICE));
            } else {
              face.write(make<Response<Get::HPKE>>(*found));
            }
          }
        }
      }
    }
    log.format("ending");
  } catch(...) {
    log.format("escaped exception is suppressed");
  }
}
#endiv
