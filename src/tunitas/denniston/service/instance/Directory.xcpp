// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::instance {
  //
  // A manifestation of the directory (service) in the network.
  //
  // Specification:
  //
  //   Serves network descriptions; e.g. HPKE configuations about 
  //
  //   This is at variance with the specification (draft-ietf-ppm-dap-02 at least) which specifies that
  //   The HPKE configurations MUST be supplied by the aggregators (here called "processors").  We don't follow that.
  //   Here, the HPKE configurations are served to clients from a separate service, this service.
  //   Clients do not have any direct contact with the processor fleet at all.
  //
  //   Soooo.  It's "like DNS" or "like LDAP."
  //
  // Authorities:
  //
  //   I-D.ietf-ppm-dap
  //   Distributed Aggregation Protocol for Privacy Preserving Measurement
  //   https://www.ietf.org/archive/id/draft-ietf-ppm-dap-02.html
  //   Section 2.1. System Architecture
  //
  // Design:
  //
  //   Something something: a thread.
  //
  // Usage:
  //
  //   In the environment..
  //
  struct Directory;
}
#endiv
#divert <hpp>
#forward tunitas.denniston.World
#import tunitas.denniston.process.Reactor
#import tunitas.denniston.service.Dictionary
#import tunitas.denniston.error.Code
#import tunitas.string.View
class tunitas::denniston::service::instance::Directory : public process::Reactor {
  using Ancestor = process::Reactor;
  auto react() -> void override;
  auto respond([[inout]] Interface &, [[inout]] Query<Get::HPKE> &, string::View from_whom) -> void;
public:
  inline explicit Directory();
  inline explicit Directory([[inout]] World &);
  Interfaces clients{};
  service::Dictionary services{};
  using E = error::Code;
};
#endiv
#divert <ipp>
#import tunitas.denniston.World
namespace tunitas::denniston::service::instance {
  Directory::Directory() : Ancestor{Species::DIRECTORY} { }
  Directory::Directory(World &world) : Directory{} {
    services = move(*world.services);
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.protocol.packet.cast
#import tunitas.denniston.protocol.packet.make
#import tunitas.denniston.protocol.packet.Status
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Response
namespace tunitas::denniston::service::instance {
  auto Directory::react() -> void {
    for (auto &face : clients) {
      if (auto red=face.read_if(); red) {
        log.format("red from some client");
        if (auto got=downcast<Query<Get::HPKE>>(*red); nullptr != got) {
          respond(face, *got, "some client"sv);
        }
      }
    }
  }
  auto Directory::respond(Interface &back, Query<Get::HPKE> &query, string::View from_whom) -> void {
    auto &service_id = query.service_id;
    if (query.task_id) {
      log.format("from {}, request for the hpke of {} task {} [[the task_id will be ignored]]", from_whom, service_id, *query.task_id);
    } else {
      log.format("from {}, request for the hpke of {}", from_whom, service_id);
    }
    if (auto found=services.find(service_id); !found) {
      back.write(make<Status>(E::NO_SUCH_SERVICE));
    } else {
      back.write(make<Response<Get::HPKE>>(move(service_id), *found));
    }
  }
}
#endiv
