// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::service::gateway::subprocess {
  //
  // The prototype of a gateway subprocess
  //
  // Specification:
  //
  //   Construction starts the barrier (establishes that lock)
  //   That lock MUST be cleared before the end-of-life of the descendant.
  //
  // Design:
  //
  //   Descendants only.
  //   The destructor MUSt be public so that unique_ptr<Prototype> can see it
  //   Therefore the constructor is made protected.
  //
  // Usage:
  //
  //   See service::instance::Gateway, at least the subprocesses
  //
  struct Prototype;
}
#endiv
#divert <hpp>
#forward tunitas.denniston.service.gateway.Gateway // DO NOT use #import
#import tunitas.denniston.process.companion.Prototype
namespace tunitas::denniston::service::gateway {
  namespace subprocess {
    inline auto swap(Prototype *&a, Prototype *&b) noexcept -> void { std::swap(a, b); }
  }
  class subprocess::Prototype : public process::companion::Prototype<Gateway> {
    using Ancestor = process::companion::Prototype<Gateway>;
  protected:
    using Ancestor::Prototype;
  public:
    virtual ~Prototype() = default;
  };
}
#endiv
#divert <ipp>
#import tunitas.denniston.service.gateway.Gateway // the ancestor's constructor definition requires the complete type
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::denniston::service::gateway::subprocess::Prototype;
    namespace required = tunitas::denniston::process::companion::required;
    static_assert(required::Subprocess<Prototype>);
  }
}
#endiv
