// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::report {
  //
  // A report splitter
  //
  // Specification:
  //
  //   Slice a report.
  //
  //   We call it "slice" because "share" is fraught in conjugation here.
  //   to slice, the slide, a slicer
  //   <strike>to share, the share, a sharer</strike>
  //
  //   The slicer loses the task_id that is present in the wohle report.
  //
  // Design:
  //
  //   How hard can this be?
  //   Come some fields from the left side to the right side.
  //   Return the result; go home.
  //
  //   Presently the slicer does not maintain state.  But that might change.
  //   Presently the slicer moves and copies parts of the whole to produce slice.
  //
  // Exceptions:
  //
  //   Throws Invalid upon Inappropriate service role
  //   The service role MUST be PROCESSOR1 or PROCESSOR2
  //
  // Usage:
  //
  //   auto whole = keyston::protocol::report::Produced{...somehow...};
  //   auto slicer = Slicer{};
  //  
  //   auto slice = slicer(whole);
  //
  struct Slicer;
}
#endiv
#divert <hpp>
#import tunitas.denniston.Species
#import tunitas.keyston.protocol.report.Produced
#import tunitas.keyston.protocol.report.share.Produced
struct tunitas::denniston::report::Slicer {
  using Whole = keyston::protocol::report::Produced;
  using Slice = keyston::protocol::report::share::Produced;
  using Species = denniston::Species;
  auto operator()([[inout]] Whole &, Species) -> Slice;
};
#endiv
#divert <cpp>
namespace tunitas::denniston::report {
  auto Slicer::operator()([[inout]] Whole &whole, Species role) -> Slice {
    auto index = recover_processor_index(role); // throws if not a processor role
    return {.metadata{whole.metadata}, .public_share{whole.public_share}, .encrypted_input_share{whole.encrypted_input_shares.at(index)}};
  }
}
#endiv
