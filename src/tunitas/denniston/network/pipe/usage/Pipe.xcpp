// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <hpp>
#import tunitas.denniston.network.pipe.required.Pipe
#import tunitas.denniston.channel.usage.Channel
namespace tunitas::denniston::network::pipe::usage {
  //
  // Is the PIPE an instance of something shaped like Pipe<TYPE>, for any TYPE?
  // requires the complete type of PIPE
  //
  // Usage:
  //
  //   Oh, Come On. You know how this works.
  //   
  template<typename PIPE> concept Pipe = required::Pipe<PIPE> && requires(PIPE pipe) {
    requires channel::usage::Channel<PIPE>;
    { pipe.is_ready_to_read() } -> convertible_to<bool>;
  };
}
#endiv
#divert <cpp>
#import tunitas.denniston.network.pipe.Pipe
namespace {
  namespace testate {
    using tunitas::denniston::network::pipe::Pipe;
    namespace usage = tunitas::denniston::network::pipe::usage;
    static_assert(usage::Pipe<Pipe<int>>);
  }
}
#endiv
