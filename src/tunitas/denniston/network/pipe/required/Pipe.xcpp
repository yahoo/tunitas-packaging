// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import nonstd.required.InstanceOf
#forward tunitas.denniston.network.pipe.Pipe
namespace tunitas::denniston::network::pipe::required {
  //
  // Is the CHANNEL an instance of something shaped like Pipe<TYPE>, for any TYPE?
  // This MUST be diagnosable without the complete type of CHANNEL.
  // Instead use usage::Pipe<CHANNEL> for a complete diagnostic.
  //
  // Usage:
  //
  //   Oh, Come On. You know how this works.
  //   
  template<typename PIPE> concept Pipe = required::InstanceOf<PIPE, pipe::Pipe>;
}
#endiv
#divert <cpp>
#import tunitas.denniston.network.pipe.Pipe
namespace {
  namespace testate {
    using tunitas::denniston::network::pipe::Pipe;
    namespace required = tunitas::denniston::network::pipe::required;
    static_assert(required::Pipe<Pipe<int>>);
  }
}
#endiv
