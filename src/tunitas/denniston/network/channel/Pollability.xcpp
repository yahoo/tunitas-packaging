// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::network::channel {
  //
  // The pollability interface
  //
  // Specification:
  //
  //   Is the channel ready to read?
  //   Performed under the lock; the caller must provide the lock
  //
  // Design:
  //
  //   virtual, abstrct so that every channel has a pollability interface
  //
  // Usage:
  //
  //   See Channel<TYPE>
  //
  struct Pollability;
}
#endiv
#divert <hpp>
#import tunitas.denniston.network.channel.Variables
#forward tunitas.denniston.network.channel.readable.Variable
#forward tunitas.denniston.network.channel.readable.Fixed
class tunitas::denniston::network::channel::Pollability {
protected:
  virtual ~Pollability() = default;
  Variables variables{};   // is neither copyable nor movable. 
  friend class readable::Variable;
  template<Size> friend class readable::Fixed;
public:
  virtual auto is_ready_to_read() -> bool = 0;
};
#endiv
