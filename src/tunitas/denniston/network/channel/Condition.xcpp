// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::network::channel {
  //
  // Condition the two conditions of "too empty" and "too full"
  // 
  // Usage: see Channel, channel::Variables
  //
  //   auto variables = Variables{...somehow...};
  //   auto predicate = Predicate{...somehow...};
  //   channel::Condition guard{variables, predicate};
  //   ...do stuff...
  //
  class Condition;
}
#endiv
#divert <hpp>
#import tunitas.denniston.network.channel.Exclusive
#import tunitas.denniston.network.channel.Predicate
#import tunitas.denniston.network.channel.Variables
struct tunitas::denniston::network::channel::Condition {
  inline Condition(Variables &, Predicate);
  inline ~Condition() noexcept(false);
  Condition(Condition const &) = delete;
  auto operator=(Condition const &) -> Condition & = delete;
  Condition(Condition &&) = delete;
  auto operator=(Condition &&) -> Condition & = delete;
protected:
  Exclusive anchor;
  Variables &variables;
};
#endiv
#divert <ipp>
namespace tunitas::denniston::network::channel {
  Condition::Condition(Variables &variables, Predicate predicate)
    : anchor{variables}
    , variables{variables} {
      // DO NOT ---> anchor.lock(); <--- DO NOT
      (variables.*predicate.variable).wait(anchor, predicate.condition);
    }
  Condition::~Condition() noexcept(false) {
    anchor.unlock();
    // [[FIXTHIS]] sloppy ... this notifies obth on noempty and non-full but only one is blocked (right?)
    // [[FIXTHIS]] we should notify only on the one *other* than predicate.variable since we know that the
    //  surrounding operation may have cleared up *that* blockage; e.g. pop() remedies "is full"; push_back() remedies "is empty"
    variables.nonempty.notify_one();
    variables.nonfull.notify_one();
  }
}
#endiv
