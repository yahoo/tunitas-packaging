// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::message::packet {
  namespace package_cast {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_cast::interface;
}
#endiv
#divert <hpp>
#import tunitas.denniston.message.packet.required.Packet
#import tunitas.denniston.message.packet.Pointer
#forward tunitas.denniston.message.packet.Prototype
namespace tunitas::denniston::message::packet {
  namespace package_cast {
    namespace body {
      namespace exported {
        //
        // Reminder: the Pointer<PACKET> system is a memory management device;
        // as such it does not and can not support constie constie contagion.
        // If you need constie congation then pull the pointer out and use pointer-and-reference in native C++ as was intended.
        //
        template<required::Packet TEST> inline auto downcast(Pointer<Prototype> const &) -> TEST *;
        //
        template<required::Packet TEST, required::Packet PACKET> inline auto is(Pointer<PACKET> const &) -> bool;
        //
        template<required::Packet PACKET> inline auto is_quit(Pointer<PACKET> const &) -> bool;
        template<required::Packet PACKET> inline auto is_status(Pointer<PACKET> const &) -> bool;
        template<required::Packet PACKET> inline auto is_ping(Pointer<PACKET> const &) -> bool;
      }
    }
  }
  // pesky.  ADL won't find the these unless we import explicitly.
  using package_cast::interface::is;
  using package_cast::interface::downcast;
  //
  using package_cast::interface::is_ping;
  using package_cast::interface::is_quit;
  using package_cast::interface::is_status;
}
#endiv
#divert <ipp>
#import tunitas.denniston.message.packet.Prototype
#import tunitas.denniston.message.packet.Ping
#import tunitas.denniston.message.packet.Quit
#import tunitas.denniston.message.packet.Status
namespace tunitas::denniston::message::packet::package_cast {
  template<required::Packet TEST> auto interface::downcast(Pointer<Prototype> const &p) -> TEST * { return dynamic_cast<TEST *>(p.get()); }
  //
  template<required::Packet TEST, required::Packet PACKET> auto interface::is(Pointer<PACKET> const &p) -> bool { return nullptr != dynamic_cast<TEST const *>(p.get()); }
  //
  template<required::Packet PACKET> auto interface::is_ping(Pointer<PACKET> const &p) -> bool   { return nullptr != dynamic_cast<Ping const *>(p.get()); }
  template<required::Packet PACKET> auto interface::is_quit(Pointer<PACKET> const &p) -> bool   { return nullptr != dynamic_cast<Quit const *>(p.get()); }
  template<required::Packet PACKET> auto interface::is_status(Pointer<PACKET> const &p) -> bool { return nullptr != dynamic_cast<Status const *>(p.get()); }
}
#endiv
