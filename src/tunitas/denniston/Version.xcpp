// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston {
  //
  // The package version, as an application exception.
  //
  // Usage:
  //
  //   throw Version{"program"};
  //
  // Usage:
  //
  //   try {
  //     ...
  //     throw Version{"program"};
  //     ...
  //   } catch (tunitas::application::exception::Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Version;
}
#endiv
#divert <hpp>
#import tunitas.application.exception.Version
#import tunitas.application.exception.Messaging
#import std.string
#import std.exception
class tunitas::denniston::Version : public tunitas::application::exception::Version, public tunitas::application::exception::Messaging, public std::exception {
  struct Ancestors {
    using Version = tunitas::application::exception::Version;
    using Messaging = tunitas::application::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Version(std::string const &NAME);
  auto what() const noexcept -> char const * final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <ipp>
#import sys.exits.constants
tunitas::denniston::Version::Version(std::string const &NAME)
  : Ancestors::Version{}
  , Ancestors::Messaging{format(NAME)}
  , Ancestors::Exception{}
{ }
#endiv
#divert <cpp>
#import std.ostringstream
#import cli.version.String
#import autotools.autoconf.Config.tunitas.denniston.CONFIG
namespace tunitas::denniston {
  auto Version::format(std::string const &NAME) -> std::string {
    using Config = autotools::autoconf::Config<CONFIG>;
    auto triple = cli::version::String{Config::package_major(), Config::package_minor(), Config::package_patch()};
    std::ostringstream buf;
    buf << "version: " << NAME << " " << triple;
    return buf.str();
  }
  auto Version::what() const noexcept -> char const * { return Messaging::what(); }
}
#endiv
