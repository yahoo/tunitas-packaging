// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::concurrent::dictionary {
  //
  // The (synchronization) variables of the dictionary.
  //
  // Specification:
  //
  //    A "monitor"
  //
  // Design:
  //
  //   The lock is a bare mutex.
  //
  //   These are all the thread synchronization primitives all in one place.
  // 
  //   Because of std::mutex, Variables is neither copyable nor movable. 
  //
  // Usage: see Dictionary.
  //
  struct Variables;
}
#endiv
#divert <hpp>
#import std.mutex
#import std.condition_variable
struct tunitas::denniston::concurrent::dictionary::Variables {
  using Mutex = std::mutex;
  using Condition = std::condition_variable;
  Mutex lock{};
  Condition nonempty{};
  struct Guard {
    struct Free; // the opposite of exclusive
    struct Exclusive;
    struct Condition;
  };
};
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::denniston::concurrent::dictionary;
    static_assert(std::is_default_constructible_v<Variables>);
    static_assert(not std::is_copy_constructible_v<Variables>);
    static_assert(not std::is_move_constructible_v<Variables>);
    static_assert(not std::is_copy_assignable_v<Variables>);
    static_assert(not std::is_move_assignable_v<Variables>);
    static_assert(not std::is_swappable_v<Variables>);
  }
}
#endiv
