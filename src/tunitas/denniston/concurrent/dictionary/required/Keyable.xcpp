!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::concurrent::dictionary::required {
  //
  // Is this type suitable for the KEY of a Dictionary<KEY, ...>
  //
  template<typename KEY> concept Keyable = requires(KEY) {
    // And because the KEY will live in a container; e.g. std::vector<KEY> or std::deque<KEY>
    // we also provide a companion usage::Keyable<KEY>
    // The requirement cannot be uttered here because these conditions require the complete type of KEY.
    //
    // See usage::Keyable<KEY>
    // See also Key_From<...>
    //
    // It's not clear what constraints this could even be.
    // Be the value a class? or an integer or an enumration?
    // Is there anything it can't be?
    // Thus all the real constraints are delegated to usage::Keyable<KEY>
    requires true;
  };
}
#endiv
