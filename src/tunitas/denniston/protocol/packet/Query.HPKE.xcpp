// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.protocol.packet.Query.template
namespace tunitas::denniston::protocol::packet {
  //
  // Semantic:
  //
  //  The Client is asking the Directory (service) for the HPKE configuation of the service id (endpoint).
  //
  //. <quote ref="Section 4.3.1 HPKE Configuration Request">
  //    Clients MAY specify a query parameter task_id when sending an HTTP GET request to [aggregator]/hpke_config?task_id=[task-id], <snip/>
  //    If the aggregator does not recognize the task ID, then it responds with HTTP status code 404 Not Found and an error of type unrecognizedTask.
  //  </quote>
  //
  // Design:
  //
  //   The manifest constructors in lieu of agggregate or designated initialization allows make<...>(...) to work.
  //
  // Response:
  //
  //   Success returns a Response<HPKE>
  //   Failure returns a Status
  //
  template<> struct Query<Get::HPKE>;
}
#endiv
#divert <hpp>
#import tunitas.Optional
#import tunitas.denniston.protocol.packet.Prototype
#import tunitas.keyston.protocol.id // for id::Service, id::Task
namespace tunitas::denniston::protocol::packet {
  template<> struct Query<Get::HPKE> : public Prototype {
    using Service = keyston::protocol::id::Service;
    using Task = keyston::protocol::id::Task;
    Service service_id{};
    Optional<Task> task_id{};
    explicit Query() = default;
    inline explicit Query(Service);
    inline explicit Query(Service, Task);
  };
}
#endiv
#divert <ipp>
namespace tunitas::denniston::protocol::packet {
  Query<Get::HPKE>::Query(Service s)
    : service_id{move(s)}
  { }
  Query<Get::HPKE>::Query(Service s, Task t)
    : service_id{move(s)}
    , task_id{move(t)}
  { }
}
#endiv
