// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.protocol.packet.Report.template
namespace tunitas::denniston::protocol::packet {
  //
  // A report share (a.k.a. a report shard) packet (ahem "package" ... thes things are biggish)
  //
  // Specification:
  //
  //   This is a processor's report share (a.k.a. report shard, a.k.a. subreport) of some measurement.
  //
  // Design:
  //
  //   There it is.
  //
  // Usage:
  //
  //   On the network.
  //
  template<> struct Report<Slice::SHARE>;
}
#endiv
#divert <hpp>
#import tunitas.denniston.protocol.packet.Prototype
#import tunitas.keyston.protocol.report.share.Produced
namespace tunitas::denniston::protocol::packet {
  template<> class Report<Slice::SHARE> : public Prototype {
    using Ancestor = Prototype;
  public:
    using Produced = keyston::protocol::report::share::Produced;
    Produced produced{};
    explicit Report() = default;
    inline explicit Report(Produced);
  };
}
#endiv
#divert <ipp>
namespace tunitas::denniston::protocol::packet {
  Report<Slice::SHARE>::Report(Produced p) : produced{move(p)} { }
}
#endiv
