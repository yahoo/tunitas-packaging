// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tunitas::denniston::task {
  //
  // The basic unit of the system is a Task
  //
  // Semantic:
  //
  //   A single measurement.
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 2. System Architecture
  //
  //   The type of each measurement.
  //   The aggregation function to compute (e.g., sum, mean, etc.).
  //   The set of aggregators and necessary cryptographic keying material to use.
  //   The VDAF to execute, which to some extent is dictated by the previous choices.
  //   The minimum "batch size" of reports which can be aggregated.
  //   The rate at which measurements can be taken, i.e., the "minimum batch window".
  //   These parameters are distributed out of band to the clients and to the aggregators.
  //   They are distributed by the collecting entity in some authenticated form. Each task is identified by a unique// 32-byte ID which is
  //
  // Design:
  //
  //   Using the Best Available Means and Methods (UBAMM)
  //
  // Usage:
  //
  //   Use designated initialization.
  //   Construct one, and consider it.
  //
  struct Task;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.task.Task
class tunitas::denniston::task::Task : public keyston::protocol::task::Task {
  using Ancestor = keyston::protocol::task::Task;
public:
  Task() = default;
  using Ancestor::Task;
  constexpr [[implicit]] Task(Ancestor a) : Ancestor{move(a)} { }
  using Ancestor::operator=;
  auto operator=(Ancestor a) -> Task & {
    Ancestor::operator=(move(a));
    return *this;
  }
};
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::denniston::task;
    static_assert(std::is_default_constructible_v<Task>);
    static_assert(std::is_copy_constructible_v<Task>);
    static_assert(std::is_move_constructible_v<Task>);
    static_assert(std::is_copy_assignable_v<Task>);
    static_assert(std::is_move_assignable_v<Task>);
    static_assert(std::is_swappable_v<Task>);
  }
}
#endiv
