// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.task.required.corpus.Object
namespace tunitas::denniston::task::required {
  //
  // Is this CORPUS a valid instantiation of Corpus<GENUS>?
  // This is InstanceOf with some extra constraints on the single GENUS parameter
  //
  template<typename CORPUS> concept Corpus = corpus::Object<CORPUS>;
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    namespace required = tunitas::denniston::task::required;
    using tunitas::denniston::task::Corpus;
    using tunitas::denniston::role::Genus;
    // can't even utter tye type! ---> static_assert(not required::Corpus<Corpus<Genus::CLIENT>>);
    // can't even utter tye type! ---> static_assert(not required::Corpus<Corpus<Genus::CONFIGURATION>>);
    // can't even utter tye type! ---> static_assert(not required::Corpus<Corpus<Genus::DIRECTORY>>);
    static_assert(required::Corpus<Corpus<Genus::COLLECTOR>>);
    static_assert(required::Corpus<Corpus<Genus::GATEWAY>>);
    static_assert(required::Corpus<Corpus<Genus::PROCESSOR>>);
  }
}
#endiv
