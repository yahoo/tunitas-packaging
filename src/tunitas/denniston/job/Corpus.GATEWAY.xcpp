// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.job.Corpus.template
namespace tunitas::denniston::job {
  //
  // The corpus of the Job Dictionary of the Gateway
  //
  // Specification:
  //
  //   Outgoing communicates from run to delegate (subprocess)
  //
  // Design:
  //
  //   [[dubious]] the Corpus also holds a list of report ids and their status (the preparation::Step contains a report_id)
  //   [[dubious]] the Definition also holds a list of report ids in Definition::members.
  //
  //   No concurrent data strutures in here; no mutexes within corpus.
  //   Instead find them in the subprocess::Job via this->subprocess.
  //
  // Usage:
  //
  //   See service::Gateway
  //
  template<> struct Corpus<Genus::GATEWAY>;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import nonstd.required.iterator.Producing
#import tunitas.keyston.protocol.id // for id::Job
#import tunitas.denniston.job.Definition
#import tunitas.denniston.job.required.iterator.Member
#forward tunitas.denniston.service.gateway.subprocess.Job
namespace tunitas::denniston::job {
  inline auto swap(Corpus<Genus::GATEWAY> &, Corpus<Genus::GATEWAY> &) noexcept -> void;
  template<> struct Corpus<Genus::GATEWAY> {
    [[implicit]] Corpus() = default;
    inline [[implicit]] Corpus(keyston::protocol::id::Job);
    inline [[implicit]] Corpus(Definition);
    template<required::iterator::Member ITERATOR> inline [[implicit]] Corpus(keyston::protocol::id::Job, ITERATOR start, ITERATOR finish);
    //
    Definition definition{};
    service::gateway::subprocess::Job *subprocess{};
  };
}
#endiv
#divert <ipp>
#import tunitas.denniston.service.gateway.subprocess.Job
namespace tunitas::denniston {
  auto job::swap(Corpus<Genus::GATEWAY> &a, Corpus<Genus::GATEWAY> &b) noexcept -> void {
    swap(a.definition, b.definition);
    swap(a.subprocess, b.subprocess);
  }
  namespace job {
    Corpus<Genus::GATEWAY>::Corpus(keyston::protocol::id::Job id)
      : definition{move(id)}
    { }
    Corpus<Genus::GATEWAY>::Corpus(Definition d)
      : definition{move(d)}
    { }
    template<required::iterator::Member ITERATOR> Corpus<Genus::GATEWAY>::Corpus(keyston::protocol::id::Job id, ITERATOR start, ITERATOR finish)
      : definition{move(id), start, finish}
    { }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::denniston::job::Corpus;
    using tunitas::denniston::Genus;
    //
    static_assert(std::semiregular<Corpus<Genus::GATEWAY>>);
    //
    static_assert(std::is_default_constructible_v<Corpus<Genus::GATEWAY>>);
    static_assert(std::is_copy_constructible_v<Corpus<Genus::GATEWAY>>);
    static_assert(std::is_move_constructible_v<Corpus<Genus::GATEWAY>>);
    static_assert(std::is_copy_assignable_v<Corpus<Genus::GATEWAY>>);
    static_assert(std::is_move_assignable_v<Corpus<Genus::GATEWAY>>);
    static_assert(std::is_swappable_v<Corpus<Genus::GATEWAY>>);
  }
}
#endiv
