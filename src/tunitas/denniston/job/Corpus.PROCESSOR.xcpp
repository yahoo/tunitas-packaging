// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.job.Corpus.template
namespace tunitas::denniston::job {
  template<> struct Corpus<Genus::PROCESSOR>;
}
#endiv
#divert <hpp>
#import tunitas.denniston.job.Definition
namespace tunitas::denniston::job {
  inline auto swap(Corpus<Genus::PROCESSOR> &, Corpus<Genus::PROCESSOR> &) noexcept -> void;
  template<> struct Corpus<Genus::PROCESSOR> {
    Definition definition{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::denniston {
  auto job::swap(Corpus<Genus::PROCESSOR> &a, Corpus<Genus::PROCESSOR> &b) noexcept -> void {
    swap(a.definition, b.definition);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::denniston::job::Corpus;
    using tunitas::denniston::Genus;
    //
    static_assert(std::semiregular<Corpus<Genus::PROCESSOR>>);
    //
    static_assert(std::is_default_constructible_v<Corpus<Genus::PROCESSOR>>);
    static_assert(std::is_copy_constructible_v<Corpus<Genus::PROCESSOR>>);
    static_assert(std::is_move_constructible_v<Corpus<Genus::PROCESSOR>>);
    static_assert(std::is_copy_assignable_v<Corpus<Genus::PROCESSOR>>);
    static_assert(std::is_move_assignable_v<Corpus<Genus::PROCESSOR>>);
    static_assert(std::is_swappable_v<Corpus<Genus::PROCESSOR>>);
  }
}
#endiv
