// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::preparation {
  //
  // The VDAF prepration message
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Design:
  //
  //   No. It's opaque, it?
  //
  // Usage:
  //
  //   Pass it on.  It's opaque.
  //
  struct Message;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Opaque
namespace tunitas::keyston {
  namespace preparation {
    using std::move;
    inline auto swap(Message &a, Message &b) noexcept -> void;
  }
  class preparation::Message : public Opaque<(1uz<<32)> {
    using Ancestor = Opaque<(1uz<<32)>;
    friend auto preparation::swap(Message &a, Message &b) noexcept -> void;
  public:
    explicit Message() = default;
    using Ancestor::Bounded; // You "just have to know" that this is the constructor name
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston {
  auto preparation::swap(Message &a, Message &b) noexcept -> void {
    Message::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::preparation;
    static_assert(std::is_default_constructible_v<Message>);
    static_assert(std::is_copy_constructible_v<Message>);
    static_assert(std::is_move_constructible_v<Message>);
    static_assert(std::is_copy_assignable_v<Message>);
    static_assert(std::is_move_assignable_v<Message>);
    static_assert(std::is_swappable_v<Message>);
  }
}
#endiv
