// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.Algorithm.template
namespace tunitas::keyston::prio {
  //
  // See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-prio3count
  // Section 7.4.1. Prio3Count
  //
  // <lol-wut?>
  //   <quote>
  //     The measurement is encoded and decoded as a singleton vector in the natural way.
  //   </quote>
  // </lol-wut?>
  //
  // [[FIXTHIS]] there is no actual need to use an array for Encoded, it could just be Field::Value directly
  //
  template<> struct Algorithm<COUNT>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::prio {
  template<> class Algorithm<COUNT> {
    inline static constexpr auto ENCODED_LENGTH = Items{1u};
  public:
    using Field = field::Field<64>;
    inline static constexpr auto INPUT_LENGTH = ENCODED_LENGTH;
    inline static constexpr auto OUTPUT_LENGTH = ENCODED_LENGTH;
    using Measurement = measurement::Specimen; // range 0, 2
    using Encoded = array::Fixed<Field::Value, ENCODED_LENGTH.count()>; // lol-wut?
    using Truncated = Encoded;
    using Result = measurement::Result; // expect: std::uint64_t;
    static auto encode(Measurement m) -> Encoded                         { return {0 != underlying(m)}; }
    static auto truncate(Encoded e) -> Truncated                         { return move(e); }
    static auto decode(Truncated const &t, measurement::Count) -> Result { return Result{t.at(0)}; }
  };
}
#endiv
