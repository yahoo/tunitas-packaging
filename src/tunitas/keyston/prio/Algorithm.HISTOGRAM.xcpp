// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.Algorithm.template
namespace tunitas::keyston::prio {
  //
  // See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-prio3sum
  // Section 7.4.2. Prio3Sum
  //
  // Invariant:
  //
  //   for encode(...) the boundaries shall be in monotonic order
  //
  template<> struct Algorithm<HISTOGRAM>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.histogram.Buckets
#import tunitas.keyston.histogram.Boundaries
namespace tunitas::keyston::prio {
  template<> class Algorithm<HISTOGRAM> {
    using Buckets = histogram::Buckets;
    inline static constexpr auto INDEX_INFINITY  = Buckets::COUNT.count();
    inline static constexpr auto ENCODED_LENGTH  = Items{1u + Buckets::COUNT.count()};
  public:
    using Field = field::Field<128>;
    inline static constexpr auto INPUT_LENGTH  = ENCODED_LENGTH;
    inline static constexpr auto OUTPUT_LENGTH = ENCODED_LENGTH;
    using Measurement = measurement::Specimen; // "any integer" but here: std::uint64_t;
    using Encoded = array::Fixed<Field::Value, ENCODED_LENGTH.count()>;
    using Truncated = Encoded;
    using Result = array::Fixed<measurement::Result, Buckets::COUNT.count()>;
    using Boundaries = histogram::Boundaries;
    inline static auto encode(Measurement, Boundaries const &) -> Encoded;
    inline static auto truncate(Encoded e) -> Truncated { return move(e); }
    inline static auto decode(Truncated const &, measurement::Count) -> Result;
  protected:
    inline static constexpr auto narrow(Field::Value wide) -> Result::Value;
  };
}
#endiv
#divert <ipp>
#import std.views.iota
namespace tunitas::keyston::prio {
  constexpr auto Algorithm<HISTOGRAM>::narrow(Field::Value wide) -> Result::Value {
    // The narrowing cast is safe when decode(...) is preceded by truncate(...)
    using Narrow = std::underlying_type_t<Result::Value>;
    auto narrow = static_cast<Narrow>(wide);
    return Result::Value{narrow};
  }
  auto Algorithm<HISTOGRAM>::encode(Measurement specimen, Boundaries const &boundaries) -> Encoded {
    auto encoded = Encoded{};
    for (auto index : std::views::iota(0u, Buckets::COUNT.count())) {
      if (specimen <= boundaries.at(index)) {
        encoded.at(index) = 1u;
        return encoded;
      }
    }
    encoded.at(INDEX_INFINITY) = 1u;
    return encoded;
  }
  auto Algorithm<HISTOGRAM>::decode(Truncated const &encoded, measurement::Count) -> Result {
    return [&encoded]<Buckets::Index... INDEX>(Buckets::Sequence<INDEX...>) {
      return Result{narrow(encoded.at(INDEX))...};
    }(Buckets::sequence());
  }
}
#endiv
