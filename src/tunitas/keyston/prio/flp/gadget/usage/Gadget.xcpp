// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.prio.flp.gadget.required.Gadget
#import tunitas.keyston.prio.flp.dimension // for Arity & Degree
#import tunitas.keyston.Field
namespace tunitas::keyston::prio::flp::gadget::usage {
  //
  // The rest of the conditions.
  //  
  namespace [[eponymous]] gadget {
    using Some_Element = Field<64>::Element; // any one will do
    //
    template<typename GADGET, typename ELEMENT> concept Arity0 = requires(GADGET const &gadget, ELEMENT) {
      { gadget() } -> convertible_to<ELEMENT>;
    };
    template<typename GADGET, typename ELEMENT> concept Arity1 = requires(GADGET const &gadget, ELEMENT element) {
      { gadget(element) } -> convertible_to<ELEMENT>;
    };
    template<typename GADGET, typename ELEMENT> concept Arity2 = requires(GADGET const &gadget, ELEMENT element1, ELEMENT element2) {
      { gadget(element1, element2) } -> convertible_to<ELEMENT>;
    };
    template<typename GADGET, typename ELEMENT> concept Arity3 = requires(GADGET const &gadget, ELEMENT element1, ELEMENT element2, ELEMENT element3) {
      { gadget(element1, element2, element3) } -> convertible_to<ELEMENT>;
    };
    template<typename GADGET> concept Gadget = required::Gadget<GADGET> && requires(GADGET) {
      { GADGET::ARITY } -> convertible_to<dimension::Arity>;
      { GADGET::DEGREE } -> convertible_to<dimension::Degree>;
      requires (dimension::Arity{0} != GADGET::ARITY) || Arity0<GADGET, Some_Element>;
      requires (dimension::Arity{1} != GADGET::ARITY) || Arity1<GADGET, Some_Element>;
      requires (dimension::Arity{2} != GADGET::ARITY) || Arity2<GADGET, Some_Element>;
      requires (dimension::Arity{3} != GADGET::ARITY) || Arity3<GADGET, Some_Element>;
      requires (static_cast<unsigned>(GADGET::ARITY) < 4u); // because we're lazy and don't expect any larger arities
    };
  }
  using gadget::Gadget;
}
#endiv
