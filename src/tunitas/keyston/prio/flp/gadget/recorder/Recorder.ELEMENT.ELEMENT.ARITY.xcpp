// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.flp.gadget.recorder.Recorder.template
namespace tunitas::keyston::prio::flp::gadget::recorder {
  template<required::Element ELEMENT, Arity ARITY> struct Recorder<ELEMENT, ELEMENT, ARITY>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.prio.flp.gadget.recorder.required.Storable
namespace tunitas::keyston::prio::flp::gadget::recorder {
  template<required::Element ELEMENT, Arity ARITY> struct Recorder<ELEMENT, ELEMENT, ARITY> : public Prototype<ELEMENT, ARITY> {
    using Ancestor = Prototype<ELEMENT, ARITY>;
  public:
    constexpr explicit Recorder(typename Ancestor::Sink s) : Ancestor{s} { }
    template<typename... EACH> constexpr auto store(EACH ...packed) -> void requires required::Storable<typename Ancestor::Element, Ancestor::ARITY, EACH...>;  };
}
#endiv
#divert <ipp>
#import tunitas.Tuple
#import tunitas.keyston.exception.Invalid
namespace tunitas::keyston::prio::flp::gadget::recorder {
  template<required::Element E, Arity A> template<typename... EACH> constexpr auto Recorder<E, E, A>::store(EACH ...packed) -> void requires required::Storable<typename Ancestor::Element, Ancestor::ARITY, EACH...> {
    if (0uz == Ancestor::sink.extent(0)) {
      throw exception::Invalid{"exhausted"};
    } else {
      [indexed = Tuple<std::remove_cvref_t<EACH> const &...>{packed...}]<Size... INDEX>(std::index_sequence<INDEX...>) {
        ((Ancestor::sink[0u, INDEX] = get<INDEX>(indexed)), ... );
      }(std::make_index_sequence<sizeof...(EACH)>{});
      ++Ancestor::sink;
    }
  }
}
#endiv
