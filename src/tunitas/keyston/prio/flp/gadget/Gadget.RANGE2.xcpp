// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.flp.gadget.Gadget.template
namespace tunitas::keyston::prio::flp::gadget {
  //
  // The "range2 check #" gadget, for PRIO's SUM and HISTOGRAM
  //
  // Specification:
  //
  //   <quote>
  //     The gadget circuit Range2 is the "range-check" polynomial <snip/>, i.e., Range2(x) = x^2 - x.
  //   </quote>
  //   
  // Design:
  //
  //   Buy a vowel.  Spell it out.
  //
  // Usage:
  //
  //   Of course!  That's what it's for!
  //
  template<> struct Gadget<RANGE2>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::prio::flp::gadget {
  template<> struct Gadget<RANGE2> {
    inline static constexpr auto const ARITY = Arity{1u};
    inline static constexpr auto const DEGREE = Degree{2u};
    template<required::RecorderN<1> RECORDER> struct Evaluator {
      using Recorder = RECORDER;
      constexpr explicit Evaluator(Recorder r) : recorder{r} { }
      template<required::Element ELEMENT> inline constexpr auto operator()(ELEMENT x) const -> ELEMENT;
    protected:
      Recorder recorder{};
    };
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::prio::flp::gadget {
  template<required::RecorderN<1> _> template<required::Element ELEMENT> constexpr auto Gadget<RANGE2>::Evaluator<_>::operator()(ELEMENT x) const -> ELEMENT {
    recorder.store(x);
    return x * x - x;
  }
}
#divert <cpp>
#import tunitas.keyston.prio.flp.gadget.usage.Gadget
namespace {
  namespace testate {
    namespace usage = tunitas::keyston::prio::flp::gadget::usage;
    using namespace tunitas::keyston::prio::flp::gadget;
    static_assert(usage::Gadget<Gadget<RANGE2>>);
  }
}
#endiv
