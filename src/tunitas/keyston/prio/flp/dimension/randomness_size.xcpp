// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
namespace tunitas::keyston::prio::flp::dimension {
  //
  // Compute RAND_SIZE
  //
  // Specification:
  //
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-06.html
  //   Table 5. VDAF parameters for Prio3, Section 7.2 Construction
  //
  //   <quote>
  //     RAND_SIZE	Prg.SEED_SIZE * (1 + 2 * (SHARES - 1)) if Flp.JOINT_RAND_LEN == 0 else
  //                    Prg.SEED_SIZE * (1 + 2 * (SHARES - 1) + SHARES)
  //   </quote>
  //
  // Design:
  //
  //   With the unit-laden quantities.
  //
  // Usage:
  //
  //   Whut, you need a tutorial on how to call a function?
  //
  template<typename NESS> inline constexpr auto randomness_size(Joint joint) -> NESS requires (std::same_as<Prove, NESS> || std::same_as<Query, NESS>);
}
#endiv
#divert <ipp>
#import tunitas.keyston.prg.constants
#import tunitas.keyston.shards.Shards // for shards::SHARD_COUNT
#import std.underlying_type
namespace tunitas::keyston::prio::flp {
  template<typename NESS> constexpr auto dimension::randomness_size(Joint joint) -> NESS requires (std::same_as<Prove, NESS> || std::same_as<Query, NESS>) {
    constexpr auto SHARDS = shards::SHARD_COUNT.count();
    auto scale     = [](Joint)       { return 1u + 2u * (SHARDS - 1u); };
    auto increment = [](Joint joint) { return Joint{0u} == joint ? Bytes{0u} : Bytes{SHARDS}; };
    auto bytes = scale(joint) * prg::constants::SEED_SIZE + increment(joint);
    return NESS{bytes.count()};
  }
}
#endiv
