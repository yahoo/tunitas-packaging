// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.flp.system.required.Field
#import tunitas.keyston.prio.flp.system.required.interface.Message
#import tunitas.keyston.prio.flp.system.required.interface.Randomness
#import tunitas.keyston.prio.flp.system.interface.Message
#import tunitas.keyston.prio.flp.system.interface.Randomness
namespace tunitas::keyston::prio::flp::system::interface {
  //
  // That interface definition for an FLP system.
  //
  // Authorities:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-06.html
  //   Verifiable Distributed Aggregation Functions (VDAFs)
  //
  // Specification:
  //
  //   Table 4. Constants and types defined by a concrete FLP.
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#flp-param
  //
  //   Table 8. FLP Parameters of FlpGeneric
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-06.html#name-a-general-purpose-flp
  //
  // Usage:
  //
  //   see System<FIELD, TABLE>
  //
  template<required::Field, required::interface::Randomness, required::interface::Message> struct Interface;
  template<required::Field FIELD, Joint JOINT, Prove PROVE, Query QUERY, Input INPUT, Output OUTPUT, Proof PROOF, Verifier VERIFIER> struct Interface<FIELD, Randomness<JOINT, PROVE, QUERY>, Message<INPUT, OUTPUT, PROOF, VERIFIER>>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Field
#import tunitas.keyston.prio.flp.system.Length
#import tunitas.keyston.prio.flp.system.usage.Field
#import std.underlying_type
namespace tunitas::keyston::prio::flp::system {
  template<required::Field FIELD, interface::Joint JOINT, interface::Prove PROVE, interface::Query QUERY, interface::Input INPUT, interface::Output OUTPUT, interface::Proof PROOF, interface::Verifier VERIFIER> class interface::Interface<FIELD, interface::Randomness<JOINT, PROVE, QUERY>, interface::Message<INPUT, OUTPUT, PROOF, VERIFIER>> {
    static_assert(usage::Field<FIELD>);
    using Field = FIELD;
    template<auto COUNT> requires required::Enumeration<decltype(COUNT)> struct [[FIXTHIS("this should be in nonstd::units as a Constant similar to std::integral_constnat<...>")]] Constant_Of_Items {
      inline static constexpr auto const VALUE = Items{std::underlying_type_t<decltype(COUNT)>(COUNT)};
    };
  public:
    struct Randomness {
      using Prove = Length<Field, Constant_Of_Items<PROVE>>;
      using Query = Length<Field, Constant_Of_Items<QUERY>>;
      using Joint = Length<Field, Constant_Of_Items<JOINT>>;
    };
    struct Message {
      using Input    = Length<Field, Constant_Of_Items<INPUT>>;
      using Output   = Length<Field, Constant_Of_Items<OUTPUT>>;
      using Proof    = Length<Field, Constant_Of_Items<PROOF>>;
      using Verifier = Length<Field, Constant_Of_Items<VERIFIER>>;
    };
  };
}
#endiv
