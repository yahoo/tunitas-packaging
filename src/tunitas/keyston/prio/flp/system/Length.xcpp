// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.required.Field
namespace tunitas::keyston::prio::flp::system {
  //
  // A conjugation of a length in the field
  //
  template<field::required::Field, typename CONSTANT> struct Length;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Field
#import tunitas.keyston.prio.flp.dimension // Bytes and such
namespace tunitas::keyston::prio::flp {
  template<field::required::Field FIELD, typename CONSTANT> struct system::Length {
    using Field = FIELD;
    using Element = typename Field::Element;
    inline static constexpr dimension::Bytes const VALUE = CONSTANT::VALUE;
    using View = typename Field::View::template Fixed<VALUE.count()>;
    template<typename ELEMENT> requires field::required::Spanable<ELEMENT, Element> using Span = typename Field::template Span<ELEMENT, VALUE.count()>;
    using Vector = typename Field::template Vector<VALUE.count()>::Value;
  };
}
#endiv
