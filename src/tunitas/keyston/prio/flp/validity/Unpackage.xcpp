// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::prio::flp::validity {
  //
  // Convenient formula fragments for index packs
  //
  // Specification:
  //
  //   std::index_sequence
  //   std::make_index_sequence
  //
  // Design:
  //
  //   Independent of any Validity or Gadget
  //
  // Usage:
  //
  //   As ond does.
  //
  //    template<gadget::required::Gadgets GADGETS> inline constexpr maximum_arity() -> Size {
  //      return []<typename... GADGET>(Tuple<GADGET...> *) -> Size requires (gadget::required::Gadget<GADGET> && ... ) {
  //        return ...something0wonderful...;
  //      }(static_cast<GADGETS *>(nullptr));
  //    }
  //
  //    template<gadget::required::Calls CALLS> inline constexpr maximum_calls(CALLS const &calls) -> Size {
  //      return []<Size... INDEX>(Unpackage::Sequence::Pack<INDEX...>) -> Size {
  //        return ...something-wonderful...;
  //      }(static_cast<Unpackage::Sequence::make<calls.size()>());
  //    }
  //
  struct Unpackage;
}
#endiv
#divert <hpp>
#import std.index_sequence
#import std.integral_constant
struct tunitas::keyston::prio::flp:: validity::Unpackage {
  struct Constant {
    template<Size INDEX> using Pack = std::integral_constant<Size, INDEX>;
    template<Size N> inline static constexpr auto make() -> Pack<N> { return {}; }
  };
  struct Sequence {
    template<Size... INDEX> using Pack = std::index_sequence<INDEX...>;
    template<Size N> inline static constexpr auto make();
  };
};
#endiv
#divert <ipp>
#import std.make_index_sequence
namespace tunitas::keyston::prio::flp::validity {
  template<Size N> constexpr auto Unpackage::Sequence::make() { return std::make_index_sequence<N>{}; }
}
#endiv
