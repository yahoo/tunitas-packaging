// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.flp.validity.required.Validity
#import tunitas.keyston.prio.flp.validity.recorder.required.Loggable
namespace tunitas::keyston::prio::flp::validity::recorder {
  //
  // Save some copy-pasta.
  // There are only single-gadget validity circuits (for now)
  // Descendants only.
  //
  // Design:
  //
  //   There is a trick, since the constructor signatures differ between the specializations against void and Log<VALIDITY>.
  //   There is some SFINAE to make that work out.
  //
  template<required::Validity VALIDITY, required::Loggable<VALIDITY>> struct Single;
}
#endiv
#divert <hpp>
#import tunitas.tuple.Size
#import tunitas.tuple.Element
#import tunitas.keyston.prio.flp.validity.recorder.Prototype
#import tunitas.keyston.prio.flp.gadget.Recorder
#import std.enable_if
namespace tunitas::keyston::prio::flp::validity {
  template<required::Validity VALIDITY, recorder::required::Loggable<VALIDITY> LOGGABLE> struct recorder::Single : public Prototype<VALIDITY> {
    using Ancestor = Prototype<VALIDITY>;
  protected:
    ~Single() = default;
  public:
    using Log = LOGGABLE; // may be merely 'void'
    template<typename = std::enable_if_t< std::same_as<void, Log>, Log>> constexpr explicit Single()       : only{} { }
    template<typename = std::enable_if_t<!std::same_as<void, Log>, Log>> constexpr explicit Single(Log &l) : only{l} { }
    static_assert(1uz == tuple::Size<typename Ancestor::Validity::Gadgets>::value);
    using Only = gadget::Recorder<typename Ancestor::Element, Log, Ancestor::template Gadget<0>::ARITY>;
    Only only{};
  };
}
#endiv
