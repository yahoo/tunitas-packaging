// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.prio.flp.validity.recorder.Recorder
#import tunitas.keyston.prio.flp.validity.required.Validity
#import nonstd.required.InstanceOf
namespace tunitas::keyston::prio::flp::validity::recorder::required {
  //
  // Is this type a Recorder?
  //
  template<typename RECORDER, typename VALIDITY> concept Recorder = requires(RECORDER, VALIDITY) {
    requires required::Validity<VALIDITY>;
    requires InstanceOf<RECORDER, recorder::Recorder>;
    { []<typename LOG>(recorder::Recorder<VALIDITY, LOG> *)
      {}(static_cast<RECORDER *>(nullptr)) };
  };
}
#endiv
