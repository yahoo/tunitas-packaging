// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#include <hpp/tunitas.keyston.prio.flp.validity.Lengths>
#endiv
#divert <hpp>
#import std.index_sequence
#import std.integral_constant
#import std.make_index_sequence
#import tunitas.tuple.Size
namespace tunitas::keyston::prio::flp::validity {
  //
  // Formula fragments to access the circuit (typename Validity::Self)
  //
  template<required::Validity _> struct Lengths<_>::Access {
    struct Gadgets {
      inline static constexpr auto count() -> unsigned;
      template<Size N> inline static constexpr auto calls() -> Items;
      template<Size N> inline static constexpr auto arity() -> Arity;
      template<Size N> inline static constexpr auto degree() -> Degree;
    };
    struct Constant {
      template<Size INDEX> using Pack = std::integral_constant<Size, INDEX>;
      template<Size N> inline static constexpr auto make() -> Pack<N> { return {}; }
    };
    struct Sequence {
      template<Size... INDEX> using Pack = std::index_sequence<INDEX...>;
      inline static constexpr auto make() { return std::make_index_sequence<tuple::Size<typename Self::Gadgets>::value>{}; }
    };
  };
}
#endiv
#divert <ipp>
#import tunitas.tuple.Element
#import std.nothrow
namespace tunitas::keyston::prio::flp::validity {
  template<required::Validity _> template<Size N> constexpr auto Lengths<_>::Access::Gadgets::calls() -> Items   { return Self::CALLS.at(N); }
  template<required::Validity _> template<Size N> constexpr auto Lengths<_>::Access::Gadgets::arity() -> Arity   { return tuple::Element<N, typename Self::Gadgets>::type::ARITY; }
  template<required::Validity _> template<Size N> constexpr auto Lengths<_>::Access::Gadgets::degree() -> Degree { return tuple::Element<N, typename Self::Gadgets>::type::DEGREE; }
}
#endiv
