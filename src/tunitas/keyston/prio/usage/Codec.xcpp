// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.prio.required.Codec
#import tunitas.keyston.field.usage.Field
#import tunitas.keyston.quantity.Items
namespace tunitas::keyston::prio::usage {
  //
  // The full set of conditions that an Codec must obey
  // The complete type of CODEC is used for the diagnosis.
  //
  // Authority:
  //
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-06.html#name-fully-linear-flp-flp-syst
  //   Section 7.1. Fully Linear Proof (FLP) Systems
  //
  //   Flp.encode(measurement: Measurement) -> Vec[Field]
  //   Flp.truncate(input: Vec[Field]) -> Vec[Field]
  //   Flp.decode(output: Vec[Field], num_measurements: Unsigned) -> AggResult
  //
  namespace [[eponymous]] codec {
    namespace encode {
      template<typename CODEC> concept Otherwise = requires(CODEC) {
        typename CODEC::Measurement;
        typename CODEC::Encoded;
        requires requires(typename CODEC::Measurement measurement) {
          { CODEC::encode(measurement) } -> convertible_to<typename CODEC::Encoded>;
        };
      };
      template<typename CODEC> concept Histogram = requires(CODEC) {
        // This is a hack to surface the runtime submission of the boundaries.
        // [[FIXTHIS]] is there any way to bury this in the type system?
        typename CODEC::Measurement;
        typename CODEC::Encoded;
        typename CODEC::Boundaries;
        requires requires(typename CODEC::Measurement measurement, typename CODEC::Boundaries const &boundaries) {
          { CODEC::encode(measurement, boundaries) } -> convertible_to<typename CODEC::Encoded>;
        };
      };
      template<typename CODEC> concept Encode = Histogram<CODEC> || Otherwise<CODEC>;
    }
    using encode::Encode;
    template<typename CODEC> concept Truncate = requires(CODEC) {
      typename CODEC::Truncated;
      requires requires(typename CODEC::Encoded encoded) {
        { CODEC::truncate(encoded) } -> convertible_to<typename CODEC::Truncated>;
      };
    };
    template<typename CODEC> concept Decode = requires(CODEC) {
      typename CODEC::Decoded;
      typename CODEC::Processed;
      requires requires(typename CODEC::Truncated truncated, typename CODEC::Processed shards) {
        { CODEC::decode(truncated, shards) } -> convertible_to<typename CODEC::Decoded>;
      };
    };
    template<typename CODEC> concept Codec = required::Codec<CODEC> && requires(CODEC) {
      typename CODEC::Field;
      { CODEC::INPUT_LENGTH } -> convertible_to<quantity::Items>;
      { CODEC::OUTPUT_LENGTH } -> convertible_to<quantity::Items>;
      requires field::usage::Field<typename CODEC::Field>;
      requires Encode<CODEC>;
      requires Truncate<CODEC>;
      requires Decode<CODEC>;
    };
  }
  using codec::Codec;
}
#endiv
