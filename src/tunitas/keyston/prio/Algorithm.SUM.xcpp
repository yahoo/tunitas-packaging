// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.Algorithm.template
namespace tunitas::keyston::prio {
  //
  // See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-prio3sum
  // Section 7.4.2. Prio3Sum
  //
  template<> struct Algorithm<SUM>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.measurement.Simple // for the payload
namespace tunitas::keyston::prio {
  template<> class Algorithm<SUM> {
    inline static constexpr auto BITS = Bits{8*sizeof(std::uint64_t)};
  public:
    using Field = field::Field<128>;
    inline static constexpr auto ENCODED_LENGTH = Items{BITS.count()};
    using Measurement = measurement::Specimen; // range 0, 2^bits
    using Encoded = Field::Vector<ENCODED_LENGTH.count()>;
    using Truncated = Field::Vector<1>;
    using Decoded = measurement::Simple;
    using Processed = measurement::Records; // ... the record count itself
    using Result [[deprecated("instead use Algorithm<SUM>::Decoded")]] = Decoded;
    inline static auto encode(Measurement) -> Encoded;
    inline static auto truncate(Encoded) -> Truncated;
    inline static auto decode(Truncated const &t, Processed) -> Decoded;
  protected:
    static_assert(ENCODED_LENGTH.count() <= 8*sizeof(Measurement));
    using Bitwise = std::underlying_type_t<Measurement>;
    static constexpr auto bit(size_t i) -> Bitwise { return Bitwise{1u} << i; }
    static constexpr auto has_bit_at_index(Measurement m, size_t i) -> bool { return 0 != (bit(i) & underlying(m)); }
  };
}
static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::Field<128>::Vector<1>>));
static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::Field<128>::Vector<1>>::Iterator));
#endiv
#divert <ipp>
static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::Field<128>::Vector<1> const>));
static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::Field<128>::Vector<1> const>::Iterator));
#import tunitas.keyston.array.enumerate
#import std.views.iota
namespace tunitas::keyston::prio {
  auto Algorithm<SUM>::encode(Measurement measurement) -> Encoded {
    auto encoded = Encoded{};
    for (auto i : std::views::iota(0u, ENCODED_LENGTH.count())) {
      if (has_bit_at_index(measurement, i)) {
        encoded.at(i) = Field::Value{1};
      }
    }
    return encoded;
  }
  auto Algorithm<SUM>::truncate(Encoded enc) -> Truncated {
    auto accumulator = Field::Value{};
    constexpr auto two = Field::Value{2};
    for (auto [ith, bit] : enumerate(enc)) {
      accumulator += bit * pow(two, ith);
    }
    return accumulator;
  }
  auto Algorithm<SUM>::decode(Truncated const &t, Processed) -> Decoded {
    // The narrowing cast is safe when decode(...) is preceded by truncate(...)
    using Narrow = std::underlying_type_t<Result>;
    auto narrow = static_cast<Narrow>(t.at(0));
    return Decoded{narrow};
  }
}
#endiv
