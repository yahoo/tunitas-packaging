!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.role.Uncoded.template
namespace tunitas::keyston::prio::role {
  //
  // vector of field elements
  //
  template<required::Definition DEFINITION> struct Uncoded<LEADER, DEFINITION>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.prio.role.Count
#import tunitas.keyston.prio.role.Blind
#import tunitas.view.Fixed
namespace tunitas::keyston::prio::role {
  template<required::Definition DEFINITION> class Uncoded<LEADER, DEFINITION> {
    struct Each {
      using Element = typename DEFINITION::Field::Element;
      template<Size COUNT> using Vector = typename DEFINITION::Field::template Vector<COUNT>;
      inline static constexpr auto const SIZE = DEFINITION::Field::ENCODED_LENGTH.count();
    };
  public:
    struct Input {
      inline static constexpr auto const COUNT = Count<DEFINITION>::Input::COUNT;
      using Vector = typename Each::template Vector<COUNT>;
      using Storage = typename Vector::Type;
      struct View {
        using Fixed = view::Fixed<typename Each::Element, COUNT>;
      };
    };
    struct Proof {
      inline static constexpr auto const COUNT = Count<DEFINITION>::Proof::COUNT;
      using Vector = typename Each::template Vector<COUNT>;
      using Storage = typename Vector::Type;
      struct View {
        using Fixed = view::Fixed<typename Each::Element, COUNT>;
      };
    };
    using Blind = role::Blind<DEFINITION>;
  };
}
#endiv
