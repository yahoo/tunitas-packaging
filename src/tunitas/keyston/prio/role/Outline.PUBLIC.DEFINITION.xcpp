!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.role.Outline.template
namespace tunitas::keyston::prio::role {
  template<required::Definition DEFINITION> struct Outline<PUBLIC, DEFINITION>;
}
#endiv
#divert <hpp>
#import tunitas.octets.Span
#import tunitas.octets.Fixed
#forward tunitas.keyston.prio.role.Role
#import tunitas.keyston.Shards // and shards::SHARD_COUNT
namespace tunitas::keyston::prio::role {
  template<required::Definition DEFINITION> struct Outline<PUBLIC, DEFINITION> {
    struct Decoded {
      using Storage = Shards<typename DEFINITION::Amplifier::Seed::Storage>;
    };
    class Encoded {
      template<role::Name, required::Definition> friend struct role::Role;
      struct Each {
        inline static constexpr auto const SIZE = DEFINITION::Amplifier::Seed::SIZE.count();
        using Storage = DEFINITION::Amplifier::Seed::Storage;
        struct View {
          using Fixed = octets::Span<Octet const, SIZE>;
        };
      };
    public:
      inline static constexpr auto const COUNT = shards::SHARD_COUNT.count();
      inline static constexpr auto const SIZE = COUNT * Each::SIZE;
      using Storage = octets::Fixed<SIZE>;
      struct View {
        using Fixed = octets::Span<Octet const, SIZE>;
        using Variable = octets::Span<Octet const>;
      };
    };
  };
}
#endiv
