// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.id
namespace tunitas::keyston::protocol::id {
  using namespace keyston::id;
}
#import tunitas.keyston.array.Unique
#forward tunitas.keyston.protocol.batch.Batch
#forward tunitas.keyston.protocol.job.Job
#forward tunitas.keyston.protocol.report.Report
#forward tunitas.keyston.protocol.task.Task
namespace tunitas::keyston::protocol::id {
  //
  // The various identifiers of size.
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  //   These are expected ot be initialied from <zzz>something something cryptographically magic</zzz> random bytes.
  //
  // Design:
  //
  //   No (obvious)
  //
  //   Because these are all type aliases, the ADL context is actually namespace tunitas::keyston::array
  //
  // Usage:
  //
  //   Sure, use it, that's what it's there for.
  //
  using Batch = array::Unique<32, batch::Batch>;
  using Job = array::Unique<32, job::Job>;
  using Report = array::Unique<32, report::Report>;
  using Task = array::Unique<32, task::Task>;
}
#import fmt.formatter.tunitas.keyston.array.Unique.SIZE.STAMP
#endiv
