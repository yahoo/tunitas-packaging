// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::continuation {
  //
  // The continuation request
  //
  // Specification:
  //  
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.2 Aggregate Continuation
  //
  // Design:
  //
  //   As shown.
  //
  // Usage:
  //
  //   Use designated initialization.
  //
  struct Request;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.id
#import tunitas.keyston.protocol.preparation.Step
#import tunitas.keyston.array.Bounded
namespace tunitas::keyston::protocol {
  namespace continuation {
    using std::move;
    inline auto swap(Request &, Request &) noexcept -> void;
  }
  struct continuation::Request {
    id::Task task_id{};
    id::Job job_id{};
    array::Bounded<preparation::Step, (1uz<<32)> preparation_steps{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto continuation::swap(Request &a, Request &b) noexcept -> void {
    swap(a.task_id, b.task_id);
    swap(a.job_id, b.job_id);
    swap(a.preparation_steps, b.preparation_steps);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::continuation;
    static_assert(std::is_default_constructible_v<Request>);
    static_assert(std::is_copy_constructible_v<Request>);
    static_assert(std::is_move_constructible_v<Request>);
    static_assert(std::is_copy_assignable_v<Request>);
    static_assert(std::is_move_assignable_v<Request>);
    static_assert(std::is_swappable_v<Request>);
  }
}
#endiv
