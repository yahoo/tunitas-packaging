// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.preparation.Mark
namespace tunitas::keyston::protocol::preparation {
  //
  // A variable length array of preparation steps
  //
  // Specification:
  //
  //   Marked with the id::Report whence it came.
  //   Unmarked but expected positionally accurate against the benchmark name array (nearby).
  //
  //   Arbitrary deterministic order ... needed.
  //   Contiguous layout ............... SHOULD be used because this is nominally modelling "protocol layout"
  //
  // Design:
  //
  //   Variable array;
  //   Make a new type so that ADL will work.
  //
  // Uasge:
  //
  //   It's an array, use it as such.
  //
  template<Mark> struct Steps;
}
#endiv
#divert <hpp>
#import tunitas.array.Bounded
#import tunitas.keyston.protocol.preparation.Step
#import std.conditional
#import std.is_const
#import nonstd.required.Derived_From
#import std.ranges.view_interface
namespace tunitas::keyston::protocol {
  namespace preparation {
    using std::move;
    template<Mark MARK> inline auto swap(Steps<MARK> &, Steps<MARK> &) noexcept -> void;
  }
  template<preparation::Mark MARK> struct preparation::Steps : public array::Bounded<Step<MARK>, (1uz<<32)> {
    using Ancestor = array::Bounded<Step<MARK>, (1uz<<32)>;
    friend auto preparation::swap<>(Steps &, Steps &) noexcept -> void;
  public:
    Steps() = default;
    using Ancestor::Bounded;
  };
}
#import nonstd.container.Traits.tunitas.keyston.protocol.preparation.Steps.MARK
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  template<preparation::Mark MARK> auto preparation::swap(Steps<MARK> &a, Steps<MARK> &b) noexcept -> void {
    typename Steps<MARK>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
}
#endiv
