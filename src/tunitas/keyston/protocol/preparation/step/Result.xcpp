// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::preparation::step {
  //
  // The summarization of a preparation step; i.e. its type
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.1.2 Helper Initialization
  //
  // Design:
  //
  //   The enum (class).
  //   The values 0, 1, 2 are mandated by the standard.
  //   The value 0xffu is our invention to indicate the not-yet-started (undefined) semantic. 
  //
  // Usage:
  //
  //   What, you need a tutorial on how to use an enum (class)? o.rly?
  //
  enum class Result : std::uint8_t {
    UNDETERMINED = 0xffu,
    CONTINUED = 0u,
    FINISHED = 1u,
    FAILED = 2u,
  };
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace tunitas::keyston::protocol::preparation::step {
  inline constexpr auto underlying(Result r) { return std::underlying_type_t<Result>(r); }
}
#endiv
