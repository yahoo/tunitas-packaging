// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::preparation::step {
  //
  // The undetermined variant
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.1.2 Helper Initialization
  //
  // Design:
  //
  //   A member of the variant.
  //   Means what it says; i.e. means "not started"
  //   Does NOT mean Finished; of course it means the inverse of that.
  //
  // Usage:
  //
  //   Use designated initialization (sic).
  //
  struct Undetermined;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::protocol::preparation {
  namespace step {
    using std::move;
    inline auto swap(Undetermined &a, Undetermined &b) noexcept -> void { }
  }
  struct step::Undetermined { };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::preparation::step;
    static_assert(std::is_default_constructible_v<Undetermined>);
    static_assert(std::is_copy_constructible_v<Undetermined>);
    static_assert(std::is_move_constructible_v<Undetermined>);
    static_assert(std::is_copy_assignable_v<Undetermined>);
    static_assert(std::is_move_assignable_v<Undetermined>);
    static_assert(std::is_swappable_v<Undetermined>);
  }
}
#endiv
