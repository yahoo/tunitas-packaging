// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.preparation.step.required.Steppable
#import nonstd.required.Pointer
#import nonstd.required.Reference
#import std.remove_pointer
#import std.remove_reference
#import std.remove_const
namespace tunitas::keyston::protocol::preparation::step::required {
  //
  // Is this type suitable as the RESULT of a cast<RESULT>(Query)
  //
  // To wit:
  //
  //   auto const &emp = step::cast<step::Continued const &>(candidate);
  //   auto const &tim = step::cast<step::Finished const &>(candidate);
  //   auto const &fix = step::cast<step::Failed> const &>(candidate);
  //
  //   auto const *emp = step::cast<step::Continued const *>(candidate);
  //   auto const *tim = step::cast<step::Finished const *>(candidate);
  //   auto const *fix = step::cast<step::Failed const *>(candidate);
  //
  namespace [[eponymous]] castable {
    using namespace std;
    template<typename INSTANCE> concept IsA_Basis = Steppable<INSTANCE>;
    template<typename RESULT> concept IsA_Pointer = requires(RESULT) {
      requires Pointer<RESULT>;
      requires IsA_Basis<remove_const_t<remove_pointer_t<RESULT>>>;
    };
    template<typename RESULT> concept IsA_Reference = requires(RESULT) {
      requires Reference<RESULT>;
      requires IsA_Basis<remove_const_t<remove_reference_t<RESULT>>>;
    };
    template<typename RESULT> concept Castable = requires(RESULT) {
      requires Pointer<RESULT> || Reference<RESULT>;
      requires !Pointer<RESULT> || IsA_Pointer<RESULT>;
      requires !Reference<RESULT> || IsA_Reference<RESULT>;
    };
  }
  using castable::Castable;
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    namespace required = tunitas::keyston::protocol::preparation::step::required;
    using namespace tunitas::keyston::protocol::preparation::step;
    //
    static_assert(required::Castable<Continued &>);
    static_assert(required::Castable<Continued const &>);
    static_assert(required::Castable<Continued *>);
    static_assert(required::Castable<Continued const *>);
    //
    static_assert(required::Castable<Finished &>);
    static_assert(required::Castable<Finished const &>);
    static_assert(required::Castable<Finished *>);
    static_assert(required::Castable<Finished const *>);
    //
    static_assert(required::Castable<Failed &>);
    static_assert(required::Castable<Failed const &>);
    static_assert(required::Castable<Failed *>);
    static_assert(required::Castable<Failed const *>);
  }
}
#endiv
