// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.protocol.report.Metadata
namespace tunitas::keyston::protocol::report {
  //
  // Get the key from the Metadata of the Report
  //
  // Specification:
  //
  //   As expected by denniston::dictionary::Dictionary<...>
  //
  // Design:
  //
  //   Available by ADL.
  //   Returns a constie reference as required.
  //   Because Metadata is a common ancestor this works for Produced<WHOLE> and Produced<SHARE>
  //
  // Usage:
  //
  //   Obvious
  //   But see denniston::dictionary::usage::Key_From
  //
  inline auto key_from(Metadata const &) -> id::Report const &;
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto report::key_from(Metadata const &p) -> id::Report const & { return p.report_id; }
}
#endiv
#divert <cpp>
#import tunitas.denniston.dictionary.usage.Valuable
#import tunitas.denniston.dictionary.usage.Key_From
#import tunitas.keyston.protocol.report.Produced
namespace {
  namespace testate {
    namespace usage = tunitas::denniston::dictionary::usage;
    using namespace tunitas::keyston::protocol::report;
    using enum tunitas::keyston::protocol::Slice;
    static_assert(usage::Key_From<Produced<WHOLE>>);
    static_assert(usage::Valuable<Produced<WHOLE>>);
    static_assert(usage::Key_From<Produced<SHARE>>);
    static_assert(usage::Valuable<Produced<SHARE>>);
  }
}
#endiv
