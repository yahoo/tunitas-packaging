// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::report::share {
  //
  // The share (shard?) of a produced report.
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.3.2. Upload Request
  //
  // Design:
  //
  //   As stated.
  //
  // Usage:
  //
  //   Use designated initialization
  //
  struct Produced;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Opaque
#import tunitas.keyston.hpke.Ciphertext
#import tunitas.keyston.protocol.report.Metadata
namespace tunitas::keyston::protocol::report {
  namespace share {
    using std::move;
    inline auto swap(Produced &, Produced &) noexcept -> void;
  }
  struct share::Produced {
    Metadata metadata{};
    Opaque<(1uz<<32)> public_share{};
    hpke::Ciphertext encrypted_input_share{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol::report {
  auto share::swap(Produced &a, Produced &b) noexcept -> void {
    swap(a.metadata, b.metadata);
    swap(a.public_share, b.public_share);
    swap(a.encrypted_input_share, b.encrypted_input_share);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::report::share;
    static_assert(std::is_default_constructible_v<Produced>);
    static_assert(std::is_copy_constructible_v<Produced>);
    static_assert(std::is_move_constructible_v<Produced>);
    static_assert(std::is_copy_assignable_v<Produced>);
    static_assert(std::is_move_assignable_v<Produced>);
    static_assert(std::is_swappable_v<Produced>);
  }
}
#endiv
