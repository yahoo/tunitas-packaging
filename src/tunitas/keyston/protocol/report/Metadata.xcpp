// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::report {
  //
  // The metadata.
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Design:
  //
  //   As stated.
  //
  // Erudition:
  //
  //   "meta" data being "data about data";  there you have it.
  //
  // Usage:
  //
  //   Use designated initialization
  //
  struct Metadata;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.id
#import tunitas.keyston.time.Point
#import tunitas.keyston.protocol.extension.Array
namespace tunitas::keyston::protocol {
  namespace report {
    using std::move;
    inline auto swap(Metadata &, Metadata &) noexcept -> void;
  }
  struct report::Metadata {
    using Extensions = extension::Array;
    //
    id::Report report_id{}; // also serves as a nonce [[why?]]
    time::Point time{};
    Extensions extensions{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto report::swap(Metadata &a, Metadata &b) noexcept -> void {
    swap(a.report_id, b.report_id);
    swap(a.time, b.time);
    swap(a.extensions, b.extensions);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::report;
    static_assert(std::is_default_constructible_v<Metadata>);
    static_assert(std::is_copy_constructible_v<Metadata>);
    static_assert(std::is_move_constructible_v<Metadata>);
    static_assert(std::is_copy_assignable_v<Metadata>);
    static_assert(std::is_move_assignable_v<Metadata>);
    static_assert(std::is_swappable_v<Metadata>);
  }
}
#endiv
