// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::report {
  //
  // The report
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.2 Upload Request
  //
  // Design:
  //
  //   As-stated.
  //
  // Usage:
  //
  //   Construct with designated initialization.
  //
  struct Report;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Opaque
#import tunitas.keyston.array.Bounded
#import tunitas.keyston.hpke.Ciphertext
#import tunitas.keyston.nonce.Bits
#import tunitas.keyston.nonce.Bundle
#import tunitas.keyston.nonce.Since
#import tunitas.keyston.protocol.id
#import tunitas.keyston.protocol.report.Metadata
namespace tunitas::keyston::protocol {
  namespace report {
    using std::move;
    inline auto swap(Report &, Report &) noexcept -> void;
  }
  struct report::Report {
    id::Task task_id{};
    nonce::Bundle<nonce::Bits<64>, nonce::Since<std::chrono::microseconds>> time{};
    Opaque<(1uz<<32)> public_share{};
    array::Bounded<hpke::Ciphertext, (1uz<<32)> encrypted_input_shares{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto report::swap(Report &a, Report &b) noexcept -> void {
    swap(a.task_id, b.task_id);
    swap(a.time, b.time);
    swap(a.public_share, b.public_share);
    swap(a.encrypted_input_shares, b.encrypted_input_shares);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::report;
    static_assert(std::is_default_constructible_v<Report>);
    static_assert(std::is_copy_constructible_v<Report>);
    static_assert(std::is_move_constructible_v<Report>);
    static_assert(std::is_copy_assignable_v<Report>);
    static_assert(std::is_move_assignable_v<Report>);
    static_assert(std::is_swappable_v<Report>);
  }
}
#endiv
