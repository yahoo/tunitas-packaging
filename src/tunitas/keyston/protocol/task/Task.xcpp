// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::task {
  //
  // The task
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.2 Task Configuration
  //
  // Design:
  //
  //   As-stated.
  //   [[FIXTHIS]] Expiration in Task is dubious (rate limiting for safety? privacy? completeness? cuteness?)
  //
  // Usage:
  //
  //   Construct with designated initialization.
  //
  struct Task;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Optional
#import tunitas.array.Bounded
#import tunitas.keyston.identifier.Service
#import tunitas.keyston.quantity.Count
#import tunitas.keyston.protocol.query.Query
#import tunitas.keyston.protocol.id
#import tunitas.keyston.time.Clock
#import tunitas.keyston.time.Point
#import tunitas.keyston.vdaf.protocol.Executor
namespace tunitas::keyston::protocol {
  namespace task {
    using std::move;
    inline auto swap(Task &, Task &) noexcept -> void;
  }
  struct task::Task {
    id::Task id{};
    array::Bounded<id::Service, (1uz<<4)> services{};
    protocol::query::Query query{};
    struct Expiration {
#if 12 < __GNUC__
      Optional<quantity::Count> maximum_query_limit{quantity::Count{1u}};
      Optional<time::Point> then{time::Clock::now()};
#else
      // work around for gcc:88165 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88165
      Expiration() : maximum_query_limit{quantity::Count{1u}}, then{time::Clock::now()} { }
      Optional<quantity::Count> maximum_query_limit;
      Optional<time::Point> then;
#endif
    };
    Optional<Expiration> expiration{};
    vdaf::protocol::Executor function{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto task::swap(Task &a, Task &b) noexcept -> void {
    swap(a.id, b.id);
    swap(a.services, b.services);
    swap(a.query, b.query);
    swap(a.expiration, b.expiration);
    swap(a.function, b.function);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::task;
    static_assert(std::is_default_constructible_v<Task>);
    static_assert(std::is_copy_constructible_v<Task>);
    static_assert(std::is_move_constructible_v<Task>);
    static_assert(std::is_copy_assignable_v<Task>);
    static_assert(std::is_move_assignable_v<Task>);
    static_assert(std::is_swappable_v<Task>);
  }
}
#endiv
