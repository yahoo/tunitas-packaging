// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::job {
  //
  // The job
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.1. Aggregation Initialization
  //
  //   a.k.a. AggregationJobID but there are no other flavors of JobID in the specification.
  //
  // Design:
  //
  //   As-stated.
  //   The manifest constructor is for the benefit of descendants which will inherit it.
  //
  // Usage:
  //
  //   Construct with designated initialization.
  //
  struct Job;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.id
namespace tunitas::keyston::protocol {
  namespace job {
    using std::move;
    inline auto swap(Job &, Job &) noexcept -> void;
  }
  struct job::Job {
    id::Job id{};
    Job() = default;
    constexpr [[implicit]] Job(id::Job id) : id{id} { }
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto job::swap(Job &a, Job &b) noexcept -> void {
    swap(a.id, b.id);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::job;
    static_assert(std::is_default_constructible_v<Job>);
    static_assert(std::is_copy_constructible_v<Job>);
    static_assert(std::is_move_constructible_v<Job>);
    static_assert(std::is_copy_assignable_v<Job>);
    static_assert(std::is_move_assignable_v<Job>);
    static_assert(std::is_swappable_v<Job>);
  }
}
#endiv
