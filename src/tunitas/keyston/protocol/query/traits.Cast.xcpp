// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#forward tunitas.keyston.protocol.query.Empty
#forward tunitas.keyston.protocol.query.Time_Interval
#forward tunitas.keyston.protocol.query.Fixed_Size
#import tunitas.keyston.protocol.query.required.Queryable
namespace tunitas::keyston::protocol::query::traits {
  //
  // The traits of types suitable for RESULT in cast<RESULT>(...)
  //
  // Specification:
  //
  //   Rhymes with dynamic_cast
  //
  // Usage:
  //
  //   using Candidate = ...something something dark_side (being pointers or references to the basis types)...
  //
  //   using Basis = traits::Cast<Candidate>::Basis;
  //
  namespace [[eponymous]] cast {
    template<required::Queryable> struct Base;
    template<typename PAYLOAD> struct Cast;
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD *>;
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD &>;
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const>;
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const *>;
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const &>;
  }
  using cast::Cast;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::protocol::query::traits {
  template<required::Queryable BASIS> struct cast::Base {
    using Basis = BASIS;
    using Type [[school("New School")]] = Basis;
    using type [[school("old_school")]] = Type;
  };
  template<typename PAYLOAD> struct Cast : public Base<PAYLOAD> { };
  //
  namespace cast {
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD *> : public Cast<PAYLOAD> { };
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD &> : public Cast<PAYLOAD> { };
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const> : public Cast<PAYLOAD> { };
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const *> : public Cast<PAYLOAD> { };
    template<required::Queryable PAYLOAD> struct Cast<PAYLOAD const &> : public Cast<PAYLOAD> { };
  }
}
#endiv
#divert <cpp>
#import std.same_as
#forward tunitas.keyston.protocol.query.Type
#forward tunitas.keyston.protocol.query.batch.Record
#forward tunitas.keyston.protocol.query.partial.Record
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::query;
    using enum Type;
    //
    static_assert(std::same_as<batch::Record<RESERVED>, traits::Cast<batch::Record<RESERVED>>::Basis>);
    static_assert(std::same_as<batch::Record<TIME_INTERVAL>, traits::Cast<batch::Record<TIME_INTERVAL>>::Basis>);
    static_assert(std::same_as<batch::Record<FIXED_SIZE>, traits::Cast<batch::Record<FIXED_SIZE>>::Basis>);
    //
    static_assert(std::same_as<partial::Record<RESERVED>, traits::Cast<partial::Record<RESERVED>>::Basis>);
    static_assert(std::same_as<partial::Record<TIME_INTERVAL>, traits::Cast<partial::Record<TIME_INTERVAL>>::Basis>);
    static_assert(std::same_as<partial::Record<FIXED_SIZE>, traits::Cast<partial::Record<FIXED_SIZE>>::Basis>);
  }
}
#endiv
