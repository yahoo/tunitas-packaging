// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.query.Type
namespace tunitas::keyston::protocol::query::partial {
  //
  // The record wrappings to generate unique types
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.1.1. Helper Initialization
  //
  //     struct PartialBatchSelector
  //
  // Design:
  //
  //   importing query::Type, though lexically visible from here, makes it convienient at site-of-use to say:
  //      using namespace tunitas::keyston::protocol::query::partial;
  //      return Record<Type::SOMETHING>{...somehow...};
  //
  // Usage:
  //
  //   As needed.
  //
  using query::Type;
  template<Type> struct Record;
  template<> struct Record<Type::RESERVED>;
  template<> struct Record<Type::TIME_INTERVAL>;
  template<> struct Record<Type::FIXED_SIZE>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.query.Empty
#import tunitas.keyston.protocol.query.Fixed_Size
namespace tunitas::keyston::protocol::query::partial {
  template<> struct Record<Type::RESERVED>       : public Empty { };
  template<> struct Record<Type::TIME_INTERVAL>  : public Empty { };
  template<> struct Record<Type::FIXED_SIZE>     : public Fixed_Size {
    Record() = default;
    constexpr Record(Fixed_Size const &fs) : Fixed_Size{fs} { }
  };
}
#endiv
