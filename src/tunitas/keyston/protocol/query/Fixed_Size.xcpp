// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::query {
  //
  // A fixed-size query
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.1.2. Fixed-Size Queries
  //
  // Design:
  //
  //   Suitable for Variant (std::variant) and cast<...>(...)
  //   Use designated initialization.
  //
  // Usage:
  //
  //   Yes.
  //
  struct Fixed_Size;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.id
namespace tunitas::keyston::protocol {
  namespace query {
    using std::move;
    inline auto swap(Fixed_Size &, Fixed_Size &) noexcept -> void;
  }
  struct query::Fixed_Size {
    id::Batch batch_id{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto query::swap(Fixed_Size &a, Fixed_Size &b) noexcept -> void {
    swap(a.batch_id, b.batch_id);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::query;
    static_assert(std::is_default_constructible_v<Fixed_Size>);
    static_assert(std::is_copy_constructible_v<Fixed_Size>);
    static_assert(std::is_move_constructible_v<Fixed_Size>);
    static_assert(std::is_copy_assignable_v<Fixed_Size>);
    static_assert(std::is_move_assignable_v<Fixed_Size>);
    static_assert(std::is_swappable_v<Fixed_Size>);
  }
}
#endiv
