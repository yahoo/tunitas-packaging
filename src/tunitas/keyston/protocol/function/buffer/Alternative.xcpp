!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.function.required // ctcnr (cascade that certain 'namespace rquired')
#import nonstd.required.Class
namespace tunitas::keyston::protocol::function::buffer {
  //
  // The alternatives
  //
  // Specification:
  //
  //   The companion pair of
  //   Slice::WHOLE ---> a certain class (supplied)
  //   Slice::SHARE ---> a nother class (supplied)
  //
  // Design:
  //
  //   The choosing.
  //
  // Usage:
  //
  //   See Input<SLICE>
  //
  namespace [[eponymous]] alternative {
    template<Slice, required::Class WHOLE_CLASS, required::Class SHARE_CLASS> struct Conditional;
    template<required::Class WHOLE_CLASS, typename IGNORED> struct Conditional<Slice::WHOLE, WHOLE_CLASS, IGNORED>;
    template<typename IGNORED, required::Class SHARE_CLASS> struct Conditional<Slice::SHARE, IGNORED, SHARE_CLASS>;
    template<Slice SLICE, required::Class WHOLE_CLASS, required::Class SHARE_CLASS> using Alternative = typename Conditional<SLICE, WHOLE_CLASS, SHARE_CLASS>::Type;
  }
  using alternative::Alternative;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.function.buffer.Flavored
namespace tunitas::keyston::protocol::function::buffer {
  namespace alternative {
    template<required::Class WHOLE, typename IGNORED> struct Conditional<Slice::WHOLE, WHOLE, IGNORED> { using Type = WHOLE; };
    template<typename IGNORED, required::Class SHARE> struct Conditional<Slice::SHARE, IGNORED, SHARE> { using Type = SHARE; };
  }
}
#endiv
