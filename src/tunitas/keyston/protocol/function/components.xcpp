// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.Configuration
#include <hpp/tunitas.keyston.vdaf.Configuration>
namespace tunitas::keyston::protocol::function::components {
  using Nonce        = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Nonce;
  using Verify_Key   = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Verify_Key;
  using Disassembled = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Disassembled;
  using Initialized  = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Initialized;
  using Continued    = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Continued;
  using Amalgamated  = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Amalgamated;
  using Disgorged    = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Disgorged;
  using Reassembled  = vdaf::Configuration<vdaf::Scheme::PROTOCOL>::Reassembled;
}
#import tunitas.keyston.measurement.Count
//
// and some "going away soon" stuff
//
#import tunitas.keyston.array.Fixed
#import tunitas.keyston.Opaque
#import tunitas.keyston.vdaf.Shard
#include <hpp/tunitas.keyston.vdaf.Shard> // for SHARD_COUNT which is defined at <hpp>
#import tunitas.keyston.vdaf.Shards
#import tunitas.keyston.vdaf.Configuration
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tunitas::keyston::protocol::function::components {
  using Byte [[deprecated("AVOID; these are a euphemism for a more specific data type; use that data type instead")]] = Octet;
  using Bytes [[deprecated("AVOID; these are a euphemism for a more specific data type; use that data type instead")]] = Opaque<(1uz<<32)>;
  //
  using Processor [[deprecated("AVOID, instead use vdaf::Shard")]] = vdaf::Shard;
  [[deprecated("AVOID, instead use vdaf::shards::SHARD_COUNT")]] inline static constexpr auto const PROCESSOR_COUNT = vdaf::shards::SHARD_COUNT;
  template<typename TYPE> using Vector [[deprecated("AVOID, instead use vdaf::Shards<TYPE>")]] = vdaf::Shards<TYPE>;
}
#pragma GCC diagnostic pop
#endiv
