// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::protocol::initialization {
  //
  // The initialization response
  //
  // Specification:
  //  
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.4.1 Aggregate Initialization
  //
  // Design:
  //
  //   As shown.
  //
  // Usage:
  //
  //   Use designated initialization.
  //
  struct Response;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.preparation.Steps
namespace tunitas::keyston::protocol {
  namespace initialization {
    using std::move;
    inline auto swap(Response &, Response &) noexcept -> void;
  }
  struct initialization::Response {
    using Preparation_Steps = preparation::Steps<preparation::Mark::TAGGED>;
    Preparation_Steps preparation_steps{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::protocol {
  auto initialization::swap(Response &a, Response &b) noexcept -> void {
    swap(a.preparation_steps, b.preparation_steps);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::protocol::initialization;
    static_assert(std::is_default_constructible_v<Response>);
    static_assert(std::is_copy_constructible_v<Response>);
    static_assert(std::is_move_constructible_v<Response>);
    static_assert(std::is_copy_assignable_v<Response>);
    static_assert(std::is_move_assignable_v<Response>);
    static_assert(std::is_swappable_v<Response>);
  }
}
#endiv
