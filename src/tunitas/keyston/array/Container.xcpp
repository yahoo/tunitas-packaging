// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.array.required.Containable
namespace tunitas::keyston::array {
  //
  // An "array-like" container
  //
  // Specification:
  //
  //   Obvious.
  //
  // Design:
  //
  //   Because most of them share the same basic behaviors..
  //   Among at least:
  //     qualified ...... undirected variable .... std::deque
  //     qualified  ..... contiguous variable .... std::vector
  //     disqualified ... contiguous fixed ....... std::array
  //
  //   Unlimited length, thus variable length
  //   a.k.a. Variable Entity-Containing-Type [which] Owns Resources (VECTOR)
  //   https://en.cppreference.com/w/cpp/container/vector
  //
  // Exceptions:
  //
  //   Where known, exceptions are recovered and re-wrapped as tunitas::keyston::exception::Aspect descendants.
  //   e.g. at(...) throws keyston::exception::Bounds
  //
  // Usage:
  //
  //   See Variable<TYPE>
  //   See Series<TYPE>
  //
  template<required::Containable> struct Container;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#forward tunitas.keyston.array.Fixed
#import std.derived_from
#import std.conditional
#import std.is_const
#import std.ranges.subrange
namespace tunitas::keyston {
  namespace array {
    using std::move;
    template<required::Containable CONTAINER> inline auto swap(Container<CONTAINER> &, Container<CONTAINER> &) noexcept -> void;
  }
  template<array::required::Containable CONTAINER> class array::Container : protected CONTAINER {
    using Ancestor = CONTAINER;
    friend auto array::swap<>(Container &, Container &) noexcept -> void;
  public:
    using Value [[school("New")]] = typename Ancestor::value_type; // [[[FIXTHIS]] potentially safer to use nonstd::container::Traits<Ancestor>::Value
    using value_type [[school("Old")]] = Value;
  protected:
    ~Container() = default;
  public:
    [[implicit]] Container() = default;
    // public so they are usable by descendants
    using Ancestor::CONTAINER;
    template<Size CAPACITY> [[implicit]] Container(Fixed<Value, CAPACITY> const &);
    Container(Container const &) = default;
    Container(Container &&) = default;
    Container &operator=(Container const &) = default;
    Container &operator=(Container &&) = default;
    template<required::Containable OTHER> Container(Container<OTHER> const &);
    //
    template<typename SELF> requires std::derived_from<std::remove_const_t<SELF>, Container> using Basic_Iterator = std::conditional_t<std::is_const_v<SELF>, typename Ancestor::const_iterator, typename Ancestor::iterator>;
    using Iterator = Basic_Iterator<Container>;
    //
    using Ancestor::empty;
    using Ancestor::size;
    // NOT HERE ---> using Ancestor::data; <--- NOT HERE (rather see the descendant Variable<TYPE>)
    using Ancestor::begin;
    using Ancestor::end;
#if 202312 < __cplusplus
    template<typename SELF> inline auto at(this SELF *, Size) -> nonstd::like_t<SELF, Value &>;
#else
    inline auto at(Size) const -> Value const &;
    inline auto at(Size) -> Value &;
#endif
    using Ancestor::push_back;
    using Ancestor::emplace_back;
  };
  namespace array {
    template<required::Containable CONTAINER> inline auto subrange(Container<CONTAINER> &) -> std::ranges::subrange<typename Container<CONTAINER>::template Basic_Iterator<Container<CONTAINER>>>;
    template<required::Containable CONTAINER> inline auto subrange(Container<CONTAINER> const &) -> std::ranges::subrange<typename Container<CONTAINER>::template Basic_Iterator<Container<CONTAINER> const>>;
  }
}
#endiv
#divert <ipp>
#import tunitas.keyston.array.Bounded
#import tunitas.keyston.array.Fixed
#import tunitas.keyston.array.Series
#import tunitas.keyston.exception.Bound
#import std.out_of_range
namespace tunitas::keyston {
  template<array::required::Containable CONTAINER> auto array::swap(Container<CONTAINER> &a, Container<CONTAINER> &b) noexcept -> void {
    typename Container<CONTAINER>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  template<array::required::Containable CONTAINER> auto array::subrange(Container<CONTAINER> &var)       -> std::ranges::subrange<typename Container<CONTAINER>::template Basic_Iterator<Container<CONTAINER>>>       { return {var.begin(), var.end()}; }
  template<array::required::Containable CONTAINER> auto array::subrange(Container<CONTAINER> const &var) -> std::ranges::subrange<typename Container<CONTAINER>::template Basic_Iterator<Container<CONTAINER> const>> { return {var.begin(), var.end()}; }
  namespace array {
    template<required::Containable _> template<Size CAPACITY> Container<_>::Container(Fixed<Value, CAPACITY> const &other) : Ancestor{other.begin(), other.end()} { }
    template<required::Containable _> template<required::Containable OTHER> Container<_>::Container(Container<OTHER> const &other)  : Ancestor{other.begin(), other.end()} { }
#if 202312 < __cplusplus
    template<required::Containable _> template<typename SELF> auto Container<_>::at(this SELF *self, Size index) -> nonstd::like_t<SELF, Value &> try {
      return self->at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e};
    }
#else
    template<required::Containable _> auto Container<_>::at(Size index) const -> Value const & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
    template<required::Containable _> auto Container<_>::at(Size index) -> Value & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
#endif
  }
}
#endiv
