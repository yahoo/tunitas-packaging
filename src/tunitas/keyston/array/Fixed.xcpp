// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Semiregular
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
namespace tunitas::keyston::array {
  //
  // A fixed array.
  //
  // Specification:
  //
  //   Obvious
  //
  // Design:
  //
  //   https://en.cppreference.com/w/cpp/container/array
  //
  //   [[FIXTHIS]] such exceptions are NOT recovered and re-wrapped as vdaf::exception::Aspect descendants.
  //
  // Usage:
  //
  //   As you would an array
  //
  template<required::Semiregular TYPE, Size CAPACITY> struct Fixed;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
#import std.array
namespace tunitas::keyston {
  template<required::Semiregular TYPE, Size CAPACITY> class array::Fixed : private std::array<TYPE, CAPACITY> {
    using Ancestor = std::array<TYPE, CAPACITY>;
  public:
    Fixed() = default;
    using Value [[school("New")]] = typename Ancestor::value_type;
    inline auto capacity() const noexcept { return CAPACITY; }
    using Ancestor::array;
    using Ancestor::empty;
    using Ancestor::size;
    using Ancestor::data;
    using Ancestor::begin;
    using Ancestor::end;
    using Ancestor::at; // [[FIXTHIS]] capture and rethrow as "ours"
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::array;
    using tunitas::keyston::Octet;
    using Subject = Fixed<Octet, (1uz<<16)>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
  }
}
#endiv
