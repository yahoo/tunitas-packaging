// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.array.required.Arrayable
namespace tunitas::keyston::array {
  //
  // A fixed array.
  //
  // Specification:
  //
  //   Obvious
  //
  // Design:
  //
  //   https://en.cppreference.com/w/cpp/container/array
  //
  //   WATCHOUT - some TYPE only have move semantics and do not have copy semantics; e.g. unique_ptr<...> descendants.
  //
  //   Initialization (construction)
  //     WATCHOUT - absent a well-designed constexpr constructor here, the value of the array will be undetermined
  //     <quote>
  //       (constructor)    [is implicit; it] initializes the array following the rules of aggregate initialization
  //                        (note that default initialization may result in indeterminate values for non-class T)
  //     </quote>
  //
  //     Aggregate Initialization https://en.cppreference.com/w/cpp/language/aggregate_initialization
  //     <quote>
  //       For a non-union aggregate, each element that is not an explicitly initialized element is initialized as follows:
  //       If the element has a default member initializer, the element is initialized from that initializer.
  //         Otherwise, if the element is not a reference, the element is copy-initialized from an empty initializer list.
  //         Otherwise, the program is ill-formed.
  //      </quote>
  //
  //      Thus: copy-initialized from the empty initializer list.
  //
  //     Default Initialization https://en.cppreference.com/w/cpp/language/default_initialization
  //     <quote>This is the initialization performed when an object is constructed with no initializer.</quote>
  //
  //     <quote>
  //       <snip>[lots of words] If T is non-POD then use the default-initializer discovered by overload resolution</snip>
  //       if T is an array type, every element of the array is default-initialized;
  //       otherwise, no initialization is performed (see notes).
  //     </quote>
  //
  //   [[FIXTHIS]] such exceptions are NOT recovered and re-wrapped as exception::Aspect descendants.
  //
  // Usage:
  //
  //   As you would an array
  //
  template<required::Arrayable TYPE, Size CAPACITY> struct Fixed;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import nonstd.required.Convertible_To
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
#import std.derived_from
#import std.conditional
#import std.is_const
#import std.ranges.subrange
#import std.array
#import std.common_type
namespace tunitas::keyston {
  template<array::required::Arrayable TYPE, Size CAPACITY> class array::Fixed : private std::array<TYPE, CAPACITY> {
    using Ancestor = std::array<TYPE, CAPACITY>;
  public:
    using Value [[school("New")]] = typename Ancestor::value_type;
    //
    inline constexpr Fixed();
    template<typename... VALUES> constexpr Fixed(VALUES &&...) requires (sizeof...(VALUES) <= CAPACITY && (required::Convertible_To<VALUES, Value const &> && ... ));
    //
    template<typename SELF> requires std::derived_from<std::remove_const_t<SELF>, Fixed> using Basic_Iterator = std::conditional_t<std::is_const_v<SELF>, typename Ancestor::const_iterator, typename Ancestor::iterator>;
    using Iterator = Basic_Iterator<Fixed>;
    //
    constexpr auto capacity() const noexcept { return CAPACITY; }
    using Ancestor::array;
    using Ancestor::empty;
    using Ancestor::size;
    using Ancestor::data;
    using Ancestor::begin;
    using Ancestor::end;
#if 202312 < __cplusplus
    template<typename SELF> inline auto at(this SELF *, Size) -> nonstd::like_t<SELF, Value &>;
#else
    inline auto at(Size) const -> Value const &;
    inline auto at(Size) -> Value &;
#endif
  protected:
    // using Ancestor::operator[] is denied except to descendants (who are supposed to know what they are doing)
    using Ancestor::operator[];
  };
  namespace array {
    template<typename... TYPES> requires (required::Arrayable<std::common_type_t<TYPES...>> && 0 != sizeof...(TYPES)) Fixed(TYPES &&...) -> Fixed<std::common_type_t<TYPES...>, sizeof...(TYPES)>;
    template<required::Arrayable TYPE, Size CAPACITY> inline auto subrange(Fixed<TYPE, CAPACITY> &)       -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY>>>;
    template<required::Arrayable TYPE, Size CAPACITY> inline auto subrange(Fixed<TYPE, CAPACITY> const &) -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY> const>>;
  }
}
#import nonstd.container.Traits.tunitas.keyston.array.Fixed.TYPE.CAPACITY
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Bound
#import nonstd.required.Class
namespace tunitas::keyston {
  template<array::required::Arrayable TYPE, Size CAPACITY> auto array::subrange(Fixed<TYPE, CAPACITY> &arr)       -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY>>>       { return {arr.begin(), arr.end()}; }
  template<array::required::Arrayable TYPE, Size CAPACITY> auto array::subrange(Fixed<TYPE, CAPACITY> const &arr) -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY> const>> { return {arr.begin(), arr.end()}; }
  namespace array {
    template<required::Arrayable T, Size CAPACITY> constexpr Fixed<T,CAPACITY>::Fixed() {
      // the Class types have already been default-initialized
      // The non-class types need to be value initialized (because default initialization leaves an undetermined value)
      // n.b. uninitialized_fill(...) is not constexpr
      if constexpr (!required::Class<Value>) {
        std::fill(begin(), end(), Value{});
      }
    }
    template<required::Arrayable T, Size CAPACITY> template<typename... VALUES> constexpr Fixed<T, CAPACITY>::Fixed(VALUES &&...values) requires (sizeof...(VALUES) <= CAPACITY && (required::Convertible_To<VALUES, Value const &> && ... ))
      : Ancestor{forward<VALUES>(values)...}
    { }
#if 202312 < __cplusplus
    template<required::Arrayable T, Size C> template<typename SELF> auto Fixed<T,C>::at(this SELF *self, Size index) -> nonstd::like_t<SELF, Value &> try {
      return self->at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e};
    }
#else
    template<required::Arrayable T, Size C> auto Fixed<T,C>::at(Size index) const -> Value const & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
    template<required::Arrayable T, Size C> auto Fixed<T,C>::at(Size index) -> Value & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
#endif
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::array;
    using tunitas::keyston::Octet;
    using Subject = Fixed<Octet, (1uz<<16)>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
  }
}
#endiv
