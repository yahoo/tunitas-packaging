// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.array.required.Arrayable
namespace tunitas::keyston::array {
  //
  // A fixed array.
  //
  // Specification:
  //
  //   Obvious
  //
  // Design:
  //
  //   https://en.cppreference.com/w/cpp/container/array
  //
  //   [[FIXTHIS]] such exceptions are NOT recovered and re-wrapped as vdaf::exception::Aspect descendants.
  //
  // Usage:
  //
  //   As you would an array
  //
  template<required::Arrayable TYPE, Size CAPACITY> struct Fixed;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
#import std.derived_from
#import std.conditional
#import std.is_const
#import std.ranges.subrange
#import std.array
namespace tunitas::keyston {
  template<array::required::Arrayable TYPE, Size CAPACITY> class array::Fixed : private std::array<TYPE, CAPACITY> {
    using Ancestor = std::array<TYPE, CAPACITY>;
  public:
    Fixed() = default;
    template<typename... VALUES> requires (CAPACITY == sizeof...(VALUES)) Fixed(VALUES &&...);
    //
    using Value [[school("New")]] = typename Ancestor::value_type;
    //
    template<typename SELF> requires std::derived_from<std::remove_const_t<SELF>, Fixed> using Basic_Iterator = std::conditional_t<std::is_const_v<SELF>, typename Ancestor::const_iterator, typename Ancestor::iterator>;
    using Iterator = Basic_Iterator<Fixed>;
    //
    inline auto capacity() const noexcept { return CAPACITY; }
    using Ancestor::array;
    using Ancestor::empty;
    using Ancestor::size;
    using Ancestor::data;
    using Ancestor::begin;
    using Ancestor::end;
#if 202312 < __cplusplus
    template<typename SELF> inline auto at(this SELF *, Size) -> nonstd::like_t<SELF, Value &>;
#else
    inline auto at(Size) const -> Value const &;
    inline auto at(Size) -> Value &;
#endif
    // using Ancestor::operator[] is denied
  };
  namespace array {
    template<required::Arrayable TYPE, Size CAPACITY> inline auto subrange(Fixed<TYPE, CAPACITY> &)       -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY>>>;
    template<required::Arrayable TYPE, Size CAPACITY> inline auto subrange(Fixed<TYPE, CAPACITY> const &) -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY> const>>;
  }
}
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Bound
namespace tunitas::keyston {
  template<array::required::Arrayable TYPE, Size CAPACITY> auto array::subrange(Fixed<TYPE, CAPACITY> &arr)       -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY>>>       { return {arr.begin(), arr.end()}; }
  template<array::required::Arrayable TYPE, Size CAPACITY> auto array::subrange(Fixed<TYPE, CAPACITY> const &arr) -> std::ranges::subrange<typename Fixed<TYPE, CAPACITY>::template Basic_Iterator<Fixed<TYPE, CAPACITY> const>> { return {arr.begin(), arr.end()}; }
  namespace array {
    template<required::Arrayable T, Size CAPACITY> template<typename... VALUES> requires (CAPACITY == sizeof...(VALUES)) Fixed<T,CAPACITY>::Fixed(VALUES &&...values)
      : Ancestor{forward<VALUES>(values)...}
    { }
#if 202312 < __cplusplus
    template<required::Arrayable T, Size C> template<typename SELF> auto Fixed<T,C>::at(this SELF *self, Size index) -> nonstd::like_t<SELF, Value &> try {
      return self->at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e};
    }
#else
    template<required::Arrayable T, Size C> auto Fixed<T,C>::at(Size index) const -> Value const & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
    template<required::Arrayable T, Size C> auto Fixed<T,C>::at(Size index) -> Value & try {
      return Ancestor::at(index);
    } catch (std::out_of_range const &e) {
      throw exception::Bound{e.what()};
    }
#endif
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::array;
    using tunitas::keyston::Octet;
    using Subject = Fixed<Octet, (1uz<<16)>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
  }
}
#endiv
