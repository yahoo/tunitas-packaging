// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.array.range.required.Iterator
namespace tunitas::keyston::array::range::package_enumerate::body {
  //
  // Package an iterator pair together into a lite-weight container, whence they came
  //
  // Specification:
  //
  //   Just what it says on the label.
  //
  // Design:
  //
  //   Of course we designed it.  We used patterns and refactoring and we put a lot of thought in it.  We care.
  //   Designed in California, compiled in your home with your good feels.
  //
  // Usage:
  //
  //  Yes, us it.  See enumeration(...)
  //
  template<required::Iterator> struct Subrange;
}
#endiv
#divert <hpp>
#import std.distance
#import std.size_t
namespace tunitas::keyston::array::range::package_enumerate {
  template<required::Iterator ITERATOR> struct body::Subrange {
    using Iterator = ITERATOR;
    inline explicit Subrange(Iterator s, Iterator f) : start{s}, finish{f} { }
    inline auto empty() const -> bool { return start == finish; }
    inline auto size() const -> std::size_t { return std::distance(start, finish); }
    inline auto begin() const -> Iterator { return start; }
    inline auto end() const -> Iterator { return finish; }
  protected:
    Iterator start{}, finish{};
  };
}
#endiv
#divert <cpp>
#import tunitas.keyston.array.range.required.Container
namespace {
  namespace testate {
    namespace required = tunitas::keyston::array::range::required;
    using namespace tunitas::keyston::array::range::package_enumerate::body;
    static_assert(required::Iterator<char const *>);
    static_assert(required::Container<Subrange<char const *>>);
  }
}
#endiv
