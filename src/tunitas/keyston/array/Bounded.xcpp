// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::array {
  //
  // A bounded array.
  //
  // Specification:
  //
  //   Obvious
  //
  // Design:
  //
  //   Limited length,
  //   Variable length
  //   a.k.a. Bounded Entity-Containing-Type [which] Owns Resources (BECTOR); see VECTOR
  //   https://en.cppreference.com/w/cpp/container/vector
  //   A vector with some limited bounds checking..
  //
  //   We guard against Murphy, not against Machiavelli
  //
  // Usage:
  //
  //   As you would a vector; with the reduced interface.
  //
  template<typename TYPE, Size CAPACITY> struct Bounded;
}
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
#import tunitas.keyston.array.Variable
namespace tunitas::keyston {
  namespace array {
    using std::move;
    template<typename TYPE, Size CAPACITY> inline auto swap(Bounded<TYPE, CAPACITY> &, Bounded<TYPE, CAPACITY> &) noexcept -> void;
  }
  template<typename TYPE, Size CAPACITY> class array::Bounded : public Variable<TYPE> {
    using Ancestor = Variable<TYPE>;
    friend auto array::swap<>(Bounded &, Bounded &) noexcept -> void;
    inline auto throw_if_full(Size more) const -> void;
  public:
    Bounded() = default;
    using Ancestor::Variable;
    inline auto capacity() const noexcept { return CAPACITY; }
    template<required::iterator::Forward ITERATOR> inline auto push_back(ITERATOR start, ITERATOR finish) -> void;
    inline auto push_back(typename Ancestor::Value) -> void;
    template<typename... ARGUMENTS> inline auto emplace_back(ARGUMENTS &&...) -> void;;
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Bound
#import std.distance
namespace tunitas::keyston {
  template<typename TYPE, Size CAPACITY> auto array::swap(Bounded<TYPE, CAPACITY> &a, Bounded<TYPE, CAPACITY> &b) noexcept -> void {
    typename Bounded<TYPE, CAPACITY>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace array {
    template<typename T, Size C> auto Bounded<T,C>::throw_if_full(Size more) const -> void {
      if (this->size()+more > this->capacity()) {
        throw exception::Bound{"full"};
      }
    }
    template<typename T, Size C> template<required::iterator::Forward ITERATOR> auto Bounded<T,C>::push_back(ITERATOR start, ITERATOR finish) -> void {
      throw_if_full(std::distance(start, finish));
      Ancestor::push_back(start, finish);
    }
    template<typename T, Size C> auto Bounded<T,C>::push_back(typename Ancestor::Value one) -> void {
      throw_if_full(1uz);
      Ancestor::push_back(one);
    }
    template<typename T, Size C> template<typename... ARGUMENTS> auto Bounded<T,C>::emplace_back(ARGUMENTS &&...arguments) -> void {
      throw_if_full(1uz);
      Ancestor::emplace_back(forward<ARGUMENTS>(arguments)...);
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::array;
    using tunitas::keyston::Octet;
    using Subject = Bounded<Octet, (1uz<<16)>;
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
  }
}
#endiv
