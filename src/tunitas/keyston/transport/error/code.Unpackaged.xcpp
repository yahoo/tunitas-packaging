// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::transport::error::code {
  //
  // The Unpackaged Error Codes of Tunitas Denniston Network
  //
  // Design:
  //
  //   Here, SUCCESS means success (same as 200 OK)
  //   Normally the error::Code::SUCCESS means *improper* success; here it means proper success.
  //   For on-the-wire, this relieves us of having to support a "sum type" with a separate success hierarchy; e.g. Success = Outcome<Success>
  //
  // Usage:
  //
  //   std::error_code ec(BAD, error::category());
  //   std::cout << ec.message();
  //
  struct Unpackaged {
    enum class Enumeration {
      SUCCESS, // ........ success
      FAILURE, // ........ sic, generic failure
      //
      // per Table 1, Section 3.2. Errors
      //   I-D.ietf-ppm-dap
      //   Distributed Aggregation Protocol for Privacy Preserving Measurement
      //   https://www.ietf.org/archive/id/draft-ietf-ppm-dap-02.html
      //
      UNRECOGNIZED_MESSAGE,
      UNRECOGNIZED_TASK,
      UNRECOGNIZED_JOB,
      UNRECOGNIZED_AGGREGATION_JOB = UNRECOGNIZED_JOB,
      OUTDATED_CONFIGURATION,
      OUTDATED_CONFIG = OUTDATED_CONFIGURATION,
      //
      // problems with reports
      REPORT_IS_TOO_LATE,
      REPORT_TOO_LATE = REPORT_IS_TOO_LATE,
      REPORT_IS_TOO_EARLY,
      REPORT_TOO_EARLY = REPORT_IS_TOO_EARLY,
      //
      // problems with batches
      BATCH_IS_INVALID,
      BATCH_INVALID = BATCH_IS_INVALID,
      BATCH_HAS_INVALID_SIZE,
      INVALID_BATCH_SIZE = BATCH_HAS_INVALID_SIZE,
      BATCH_QUERIED_TOO_MANY_TIMES,
      BATCH_MISMATCH,
      //
      // problems with queries
      QUERY_IS_UNAUTHORIZED,
      UNAUTHORIZED_REQUEST = QUERY_IS_UNAUTHORIZED,
      QUERY_TASK_ID_IS_MISSING,
      MISSING_TASK_ID = QUERY_TASK_ID_IS_MISSING,
      QUERY_MISMATCH,
    };
    using enum Enumeration;
  };
}
#import std.is_error_code_enum.tunitas.keyston.transport.error.code.Unpackaged.Enumeration // enable that certain magic template constructor
#endiv
#divert <hpp>
#import std.error_code
#import std.underlying_type
namespace tunitas::keyston::transport::error::code {
  inline auto make_error_code(Unpackaged::Enumeration) noexcept -> std::error_code;
  inline constexpr auto underlying(Unpackaged::Enumeration e) noexcept { return std::underlying_type_t<Unpackaged::Enumeration>(e); }
}
#endiv
#divert <ipp>
#import tunitas.keyston.transport.error.category
namespace tunitas::keyston::transport::error {
  auto code::make_error_code(Unpackaged::Enumeration e) noexcept -> std::error_code { return {underlying(e), category()}; }
}
#endiv
