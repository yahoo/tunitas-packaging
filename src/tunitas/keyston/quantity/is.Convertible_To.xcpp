// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.quantity.required.Quantity
namespace tunitas::keyston::quantity::is {
  //
  // Is the type castable source-to-target?
  // The argument order is the same as that of the template function cast<...>(...)
  // Specializations mostly.
  //
  template<required::Quantity SOURCE, required::Quantity TARGET> struct Convertible_To;
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
#forward tunitas.keyston.quantity.Bytes
#forward tunitas.keyston.quantity.Items
#forward tunitas.keyston.quantity.Records
namespace tunitas::keyston::quantity {
  template<required::Quantity, required::Quantity> struct is::Convertible_To : public std::false_type { };
  namespace is {
    // to convert bits to bytes, use nonstd::units::memory::cast<...>(...)
    //
    template<> struct Convertible_To<Items, Bytes> : public std::true_type { };
    template<> struct Convertible_To<Bytes, Items> : public std::true_type { };
    template<> struct Convertible_To<Items, Records> : public std::true_type { };
    template<> struct Convertible_To<Records, Items> : public std::true_type { };
  }
}
#endiv
