// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Class // [[FIXTHIS]] should be tunitas.required.Class
#import tunitas.required // ctcnr (cascade that certain namepace required)
namespace tunitas::keyston {
  //
  // (An implementation detail of) a unique identifier.
  //
  // Specification:
  //
  //   Why it's filled with bytes!
  //   The implementation detail of a unique name.
  //   To be generated by filling with <zzz>cryptographically something something magic magic<////> random bytes.
  //   <psst>read /dev/random</psst>
  //
  // Design:
  //
  //   No (obvious)
  //   https://en.cppreference.com/w/cpp/container/array
  //
  // Usage:
  //
  //   As you would any fixed-size array-of-octets.
  //
  //   using Identifier = Unique<32>
  //
  namespace [[eponymous]] unique {
    template<required::Class STAMP> struct Stamp { };
    template<Size SIZE, required::Class STAMP> requires (0u < SIZE) struct Unique;
  }
  using unique::Unique;
}
#endiv
#divert <hpp>
#import tunitas.array.Fixed
namespace tunitas::keyston {
  template<Size SIZE, required::Class STAMP> requires (0u < SIZE) class unique::Unique : public array::Fixed<Octet, SIZE>, protected Stamp<STAMP> {
    using Ancestor = tunitas::array::Fixed<Octet, SIZE>;
  public:
    Unique() = default;
    using Ancestor::Fixed;
  };
}
#endiv
