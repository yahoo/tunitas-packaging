// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::function {
  //
  // An executor for a (Verifiable Distributed Aggregation) Function
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   There really are only two such functions specified at this point
  //   PRIO3
  //   POPLAR1
  //
  // Design:
  //
  //   Executors don't carry state.
  //   Be able to copy around the whole interface cluster of functions.
  //   We could use inheritance, but the derived classes are all "different."
  //
  // Usage:
  //
  //   Yes.
  //
  struct Executor;
}
#endiv
#divert <hpp>
#import tunitas.keyston.function.Definition
namespace tunitas::keyston {
  namespace function {
    using std::move;
    inline auto swap(Executor &, Executor &) noexcept -> void;
  }
  struct function::Executor : protected Definition {
    using Ancestor = Definition;
    friend auto swap(Executor &, Executor &) noexcept -> void;
  public:
    using Name = function::Name;
    using enum Name;
    //
    explicit Executor() = default;
    using Ancestor::Definition;
    inline explicit Executor(Definition);
    //
    // keep the member fields protected but allow access to the type signatures
    using Ancestor::Disassembled;
    using Ancestor::Initialization;
    using Ancestor::Continuation;
    using Ancestor::Amalgamation;
    using Ancestor::Disgorgement;
    using Ancestor::Reassembly;
    //
    inline auto disassembly(measurement::Specimen const &) -> Disassembled;
    inline auto initialization(Parameters const &, verify::Key const &, Processor, Nonce const &, Seed<SHARE> const &, Input<SHARE> const &) -> Initialized;
    inline auto continuation(Preparation<WHOLE> const &, Optional<Preparation<SHARE>> const &) -> Continued;
    inline auto amalgamation(Parameters const &, Vector<Preparation<SHARE>> const &) -> Amalgamated;
    inline auto disgorgement(Parameters const &, Vector<Output<SHARE>> const &) -> Disgorged;
    inline auto reassembly(Parameters const &, Vector<Aggregate<SHARE>> const &, measurement::Count) -> Reassembled;
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.function.exception.Null
namespace tunitas::keyston {
  auto function::swap(Executor &a, Executor &b) noexcept -> void {
    Executor::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace function {
    Executor::Executor(Definition d) : Ancestor{d} { }
    auto Executor::disassembly(measurement::Specimen const &m) -> Disassembled {
      if (nullptr == Ancestor::disassembly) {
        throw exception::Null{};
      } else {
        return Ancestor::disassembly(m);
      }
    }
    auto Executor::initialization(Parameters const &p, verify::Key const &k, Processor r, Nonce const &n, Seed<SHARE> const &u, Input<SHARE> const &i) -> Initialized {
      if (nullptr == Ancestor::initialization) {
        throw exception::Null{};
      } else {
        return Ancestor::initialization(p, k, r, n, u, i);
      }
    }
    auto Executor::continuation(Preparation<WHOLE> const &p, Optional<Preparation<SHARE>> const &o) -> Continued {
      if (nullptr == Ancestor::continuation) {
        throw exception::Null{};
      } else {
        return Ancestor::continuation(p, o);
      }
    }
    auto Executor::amalgamation(Parameters const &p, Vector<Preparation<SHARE>> const &v) -> Amalgamated {
      if (nullptr == Ancestor::amalgamation) {
        throw exception::Null{};
      } else {
        return Ancestor::amalgamation(p, v);
      }
    }
    auto Executor::disgorgement(Parameters const &p, Vector<Output<SHARE>> const &v) -> Disgorged {
      if (nullptr == Ancestor::disgorgement) {
        throw exception::Null{};
      } else {
        return Ancestor::disgorgement(p, v);
      }
    }
    auto Executor::reassembly(Parameters const &p, Vector<Aggregate<SHARE>> const &v, measurement::Count c) -> Reassembled {
      if (nullptr == Ancestor::reassembly) {
        throw exception::Null{};
      } else {
        return Ancestor::reassembly(p, v, c);
      }
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::function;
    //
    static_assert(std::semiregular<Executor>);
    //
    static_assert(std::is_default_constructible_v<Executor>);
    static_assert(std::is_copy_constructible_v<Executor>);
    static_assert(std::is_move_constructible_v<Executor>);
    static_assert(std::is_copy_assignable_v<Executor>);
    static_assert(std::is_move_assignable_v<Executor>);
    static_assert(std::is_swappable_v<Executor>);
  }
}
#endiv
