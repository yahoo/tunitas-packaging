// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston
namespace tunitas::keyston::function {
  //
  // Specification:
  //
  //   Just what it says.
  //
  // Design:
  //
  //   Oh come on, they're enum (class)es.
  //
  // Usage:
  //
  //   You need a tutorial on how to use an enum (class)? o.rly?
  //
  enum class Result {
    CONSTANT, // ........ the constant result
    INTEGER_ZMODM, // ... Z_m, integers modulo m 
  };
  enum class Function {
    CONSTANT, // ... the constant-generation function
    SUM, // ........ summation
  };
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace tunitas::keyston::function {
  inline constexpr auto underlying(Result r)   { return std::underlying_type_t<Result>(r); }
  inline constexpr auto underlying(Function f) { return std::underlying_type_t<Function>(f); }
  //
  inline auto swap(Result &a, Result &b) noexcept -> void     { return std::swap(a, b); }
  inline auto swap(Function &a, Function &b) noexcept -> void { return std::swap(a, b); }
}
#endiv
