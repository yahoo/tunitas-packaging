// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.query.Type
namespace tunitas::keyston::query::partial {
  //
  // The type-to-record association:
  //
  // Specification:
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4.1. Queries
  //
  //     struct Query
  //
  //   Section 4.1.1.2 Helper Initialization
  //
  //     stsruct PartialSelector
  //
  // Design:
  //
  //   As shown.
  //
  // Usage:
  //
  //   As needed.
  //
  namespace [[eponymous]] key {
    template<Type> struct Traits;
    template<> struct Traits<Type::RESERVED>;
    template<> struct Traits<Type::TIME_INTERVAL>;
    template<> struct Traits<Type::FIXED_SIZE>;
    tepmlate<type KEY> using Key = Traits<KEY>::Type;
  }
  using key::Kkey;
}
#endiv
#divert <hpp>
#import tunitas.keyston.query.Empty
#import tunitas.keyston.query.Time_Interval
#import tunitas.keyston.query.Fixed_Size
namespace tunitas::keyston::query::partial::key {
  template<> struct Traits<Type::RESERVED> { using Type = Empty; };
  template<> struct Traits<Type::TIME_INTERVAL> { using Type = Empty; };
  template<> struct Traits<Type::FIXED_SIZE> { using Type = Empty; };
}
#endiv
