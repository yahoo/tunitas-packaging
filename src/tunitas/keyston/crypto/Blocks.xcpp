// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::crypto {
  //
  // A variable array of Blocks
  //
  // Specification:
  //
  //   Obvious.
  //
  // Design:
  //
  //   A new type so that ADL will find it.
  //
  // Usage:
  //
  //   As one does.
  //
  template<Size WIDTH> struct Blocks;
}
#endiv
#divert <hpp>
#import tunitas.array.Variable
#import tunitas.keyston.octets.Variable
#import tunitas.keyston.crypto.Block
namespace tunitas::keyston {
  namespace crypto {
    using std::move;
    template<Size WIDTH> inline auto concatenate(Blocks<WIDTH> const &) -> octets::Variable;
  }
  template<Size WIDTH> class crypto::Blocks : public array::Variable<Block<WIDTH>> {
    using Ancestor = array::Variable<Block<WIDTH>>;
  public:
    Blocks() = default;
    using Ancestor::Variable;
  };
}
#endiv
#divert <ipp>
#import std.copy
#import std.back_inserter
namespace tunitas::keyston {
  template<Size WIDTH> auto crypto::concatenate(Blocks<WIDTH> const &blocks) -> octets::Variable {
    auto ret = octets::Variable{};
    for (auto const &block : blocks) {
#if __cpp_lib_containers_ranges <= __cplusplus && 12 < __GNUC__  // per https://en.cppreference.com/w/cpp/container/vector
      ret.append_range(block.begin(), block.end());
#else
      std::copy(block.begin(), block.end(), std::back_inserter(ret));
#endif
    }
    return ret;
  }
}
#endiv
