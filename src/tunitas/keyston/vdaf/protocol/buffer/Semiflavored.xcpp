!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Class
#import tunitas.keyston.vdaf.protocol.required // ctcnr (cascade that certain 'namespace required')
namespace tunitas::keyston::vdaf::protocol::buffer {
  //
  // The semiflavoreds
  //
  // Specification:
  //
  //   The companion pair of
  //   Slice::WHOLE ---> a class (supplied)
  //   Slice::SHARE ---> a flavored buffer (tagged)
  //
  // Design:
  //
  //   The choosing.
  //
  // Usage:
  //
  //   See Input<SLICE>
  //
  namespace [[eponymous]] semiflavored {
    template<Slice, required::Class WHOLE_CLASS, typename SHARE_TAG, Size SHARE_CAPACITY> struct Conditional;
    template<required::Class WHOLE, typename IGNORED_TAG, Size IGNORED_CAPACITY> struct Conditional<Slice::WHOLE, WHOLE, IGNORED_TAG, IGNORED_CAPACITY>;
    template<typename IGNORED, typename TAG, Size CAPACITY> struct Conditional<Slice::SHARE, IGNORED, TAG, CAPACITY>;
    template<Slice SLICE, required::Class WHOLE_CLASS, typename SHARE_TAG, Size SHARE_CAPACITY> using Semiflavored = typename Conditional<SLICE, WHOLE_CLASS, SHARE_TAG, SHARE_CAPACITY>::Type;
  }
  using semiflavored::Semiflavored;
}
#endiv
#divert <hpp>
#import tunitas.keyston.vdaf.protocol.buffer.Flavored
namespace tunitas::keyston::vdaf::protocol::buffer {
  namespace semiflavored {
    template<required::Class WHOLE, typename IGNORED_TAG, Size IGNORED_CAPACITY> struct Conditional<Slice::WHOLE, WHOLE, IGNORED_TAG, IGNORED_CAPACITY> { using Type = WHOLE; };
    template<typename IGNORED, typename TAG, Size CAPACITY>                      struct Conditional<Slice::SHARE, IGNORED, TAG, CAPACITY>               { using Type = Flavored<Slice::SHARE, TAG, CAPACITY>; };
  }
}
#endiv
