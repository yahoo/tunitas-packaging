// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.Configuration
#include <hpp/tunitas.keyston.vdaf.Configuration>
#import tunitas.keyston.aggregation.Count
#import tunitas.keyston.array.Series
#import tunitas.keyston.Shards
#import tunitas.keyston.vdaf.protocol.Measurement
#import tunitas.keyston.vdaf.protocol.Input
#import tunitas.keyston.vdaf.protocol.Public
#import tunitas.keyston.vdaf.protocol.Output
#import tunitas.keyston.vdaf.protocol.Aggregation
namespace tunitas::keyston::vdaf::protocol {
  //
  // A bundle of types
  //
  namespace components {
    using keyston::Shards;
    template<array::required::Arrayable TYPE> using Series = array::Series<TYPE>;
    using Nonce        = vdaf::Configuration<Transport::PROTOCOL>::Nonce;
    using Verify_Key   = vdaf::Configuration<Transport::PROTOCOL>::Verify_Key;
    using Processed    = vdaf::Configuration<Transport::PROTOCOL>::Processed;
    using Disassembled = vdaf::Configuration<Transport::PROTOCOL>::Disassembled;
    using Initialized  = vdaf::Configuration<Transport::PROTOCOL>::Initialized;
    using Continued    = vdaf::Configuration<Transport::PROTOCOL>::Continued;
    using Amalgamated  = vdaf::Configuration<Transport::PROTOCOL>::Amalgamated;
    using Disgorged    = vdaf::Configuration<Transport::PROTOCOL>::Disgorged;
    using Reassembled  = vdaf::Configuration<Transport::PROTOCOL>::Reassembled;
    //
    using protocol::Measurement;
    using protocol::Input;
    using protocol::Public;
    using protocol::Output;
    using protocol::Aggregation;
  }
}
//
// and some "going away soon" stuff
//
#import tunitas.keyston.array.Fixed
#import tunitas.keyston.Opaque
#import tunitas.keyston.Shard
#include <hpp/tunitas.keyston.Shard> // for SHARD_COUNT which is defined at <hpp>
#import tunitas.keyston.Shards
#import tunitas.keyston.vdaf.Configuration
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace tunitas::keyston::vdaf::protocol::components {
  using Byte [[deprecated("AVOID; these are a euphemism for a more specific data type; use that data type instead")]] = Octet;
  using Bytes [[deprecated("AVOID; these are a euphemism for a more specific data type; use that data type instead")]] = Opaque<(1uz<<32)>;
  //
  using Processor [[deprecated("AVOID, instead use Shard")]] = Shard;
  [[deprecated("AVOID, instead use shards::SHARD_COUNT")]] inline static constexpr auto const PROCESSOR_COUNT = shards::SHARD_COUNT;
  template<typename TYPE> using Vector [[deprecated("AVOID, instead use Shards<TYPE>")]] = Shards<TYPE>;
}
#pragma GCC diagnostic pop
#endiv
