// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.generic.configuration.required.Core
namespace tunitas::keyston::vdaf::generic::configuration {
  //
  // The configuration
  //
  // Specification:
  //
  //   Amplify the core decision of the pattern
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   The interface, as stated
  //
  //   (a noun form)
  //   disassembly ........... Vdaf.measurement_to_input_shares(measurement: Measurement) -> (Bytes, Vec[Bytes])
  //   initialization ........ Vdaf.prep_init(verify_key: Bytes, agg_id: Unsigned, agg_param: AggParam, nonce: Bytes, public_share: Bytes, input_share: Bytes) -> Prep
  //   continuation .......... Vdaf.prep_next(prep: Prep, inbound: Optional[Bytes]) -> Union[Tuple[Prep, Bytes], OutShare]
  //   amalgamation .......... Vdaf.prep_shares_to_prep(agg_param: AggParam, prep_shares: Vec[Bytes]) -> Bytes
  //   disgorgement .......... Vdaf.out_shares_to_agg_share(agg_param: AggParam, out_shares: Vec[OutShare]) -> agg_share: Bytes
  //   reassembly ............ Vdaf.agg_shares_to_result(agg_param: AggParam, agg_shares: Vec[Bytes], num_measurements: Unsigned) -> AggResult
  //
  // Design:
  //
  //   Obvious
  //
  // Usage:
  //
  //   The various templates of namespace generic
  //
  template<required::Core, typename UNIQUENESS = void> struct Configuration;
}
#endiv
#divert <hpp>
#import tunitas.Optional
#import tunitas.keyston.Shard
#import tunitas.keyston.Shards
#import tunitas.keyston.vdaf.generic.Continued
#import tunitas.keyston.vdaf.generic.Disassembled
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.vdaf.generic.configuration.usage.Core
namespace tunitas::keyston::vdaf::generic {
  template<configuration::required::Core CORE, typename UNIQUENESS> class configuration::Configuration : public CORE {
    static_assert(usage::Core<CORE>);
  public:
    using Disassembled = generic::Disassembled<Configuration>;
    using Disassembly = Disassembled (*)(typename CORE::Measurement<WHOLE> const &);
    //
    using Initialized = typename CORE::template Preparation<SHARE>;
    using Initialization = Initialized (*)(typename CORE::Parameters const &, typename CORE::Verify_Key const &, Shard, typename CORE::Nonce const &, typename CORE::template Public<SHARE> const &, typename CORE::template Input<SHARE> const &);
    //
    using Continued = generic::Continued<Configuration>;
    using Continuation = Continued (*)(typename CORE::template Preparation<WHOLE> const &, Optional<typename CORE::template Preparation<SHARE>> const &);
    //
    using Amalgamated = typename CORE::template Preparation<WHOLE>;
    using Amalgamation = Amalgamated (*)(typename CORE::Parameters const &, Shards<typename CORE::template Preparation<SHARE>> const &);
    //
    using Disgorged = typename CORE::template Aggregation<SHARE>;
    using Disgorgement = Disgorged (*)(typename CORE::Parameters const &, Shards<typename CORE::template Output<SHARE>> const &);
    //
    using Reassembled = typename CORE::Aggregation<WHOLE>;
    using Reassembly = Reassembled (*)(typename CORE::Parameters const &, Shards<typename CORE::template Aggregation<SHARE>> const &, typename CORE::Processed);
  };
}
#endiv
