// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import nonstd.required.Class
#import tunitas.keyston.vdaf.generic.configuration.required.Core
namespace tunitas::keyston::vdaf::generic::configuration::usage {
  //
  // The core of a configuration.
  //
  // Specification:
  //
  //   What does it require?
  //   The usage::Core<CORE> expects to see the complete type definition.
  //
  // Design:
  //
  //   See the commentariat in required::Core
  //
  // Usage:
  //
  //   #divert <fpp>
  //   namespace something::something_else {
  //     template<required::Core CORE> struct Dark_Side;
  //   }
  //   #endiv
  //   #divert <hpp>
  //   namespace something {
  //     template<required::Core CORE> struct something_else::Dark_Side {
  //       static_assert(usage::Core<CORE>);
  //     };
  //   }
  //   #endiv
  //
  template<typename CORE> concept Core = required::Core<CORE> && requires(CORE) {
    typename CORE::Parameters;
    typename CORE::Nonce;
    typename CORE::Verify_Key;
    //
    requires required::Class<typename CORE::template Measurement<WHOLE>>; // unencrypted, produced at the client
    // NO SUCH ---> requires required::Class<typename CORE::template Measurement<SHARE>>; <--- NO SUCH (never materialized)
    //
    // NO SUCH ---> requires required::Class<typename CORE::template Input<WHOLE>>; <--- NO SUCH (never materialized)
    requires required::Class<typename CORE::template Input<SHARE>>; // encrypted, sliced at the gateway
    //
    // NO SUCH ---> requires required::Class<typename CORE::template Public<WHOLE>>; <--- NO SUCH (never materialized)
    requires required::Class<typename CORE::template Public<SHARE>>;
    //
    requires required::Class<typename CORE::template Preparation<WHOLE>>;
    requires required::Class<typename CORE::template Preparation<SHARE>>;
    //
    // NO SUCH ---> requires required::Class<typename CORE::template Output<WHOLE>>; < --- NO SUCH (never materialized)
    requires required::Class<typename CORE::template Output<SHARE>>;
    //
    requires required::Class<typename CORE::template Aggregation<WHOLE>>;
    requires required::Class<typename CORE::template Aggregation<SHARE>>;
  };
}
#endiv
