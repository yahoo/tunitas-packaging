// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Class
#import tunitas.keyston.vdaf.generic.configuration.Is_Specialized_Core
#include <hpp/tunitas.keyston.vdaf.generic.configuration.Is_Specialized_Core>
namespace tunitas::keyston::vdaf::generic::configuration::required {
  //
  // The core of a configuration.
  //
  // Specification:
  //
  //   Everything follows from these type definitions.
  //   This MUST be diagnosable without the complete type of CORE
  //
  //   required::Core<CORE>
  //   usage::Core<CORE>
  //
  // Design:
  //
  //   Specializations only
  //
  //   Obvious.
  //   But is it really obvious?  Really?
  //
  // Reminder:
  //
  //   There is no universal ancestral "CORE" class; there are only classes that model required::Core<CORE> and usage::Core<CORE>
  //   Thus, you're looking for non-generic versions; e.g. keyston::vdaf::configuration::Core<CORE>.
  //
  // Usage:
  //
  //   See Configuration<CORE>
  //
  template<typename CORE> concept Core = requires(CORE) {
    requires Class<CORE>;
    requires Is_Specialized_Core<CORE>::value;
  };
}
#endiv
