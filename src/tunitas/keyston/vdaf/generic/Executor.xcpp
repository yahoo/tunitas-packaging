// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.generic.required.Configuration
namespace tunitas::keyston::vdaf::generic {
  //
  // The executor for a generic (Verifiable Distributed Aggregation) Function
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   See definition for more commentariat.
  //
  //   Executors MUST not to maintian internal state call-to-call
  //
  // Design:
  //
  //   Executors don't carry state so the member calls are constie.
  //   Be able to copy around the whole interface cluster of vdafs.
  //   We could use inheritance, but the derived classes are all "different."
  //
  // Usage:
  //
  //   Yes, but via the descendants; some magic occurs in the inherited constructor
  //
  //   auto executor = Executor<NUMERIC>{};
  //   auto executor = Executor<NUMERIC>{Name::ZERO};
  //   auto executor = Executor<NUMERIC>{Name::CONSTANT};
  //   auto executor = Executor<NUMERIC>{Name::PRIO3};
  //   auto executor = Executor<NUMERIC>{Name::POPLAR1};
  //
  //   auto disassembled = executor.disassembly(...arguments...);
  //   auto initialized = executor.initialization(...arguments...);
  //   auto continued = executor.continuation(...arguments...);
  //   auto amalgamated = executor.amalgamated(...arguments...);
  //   auto disgorged = executor.disgorgement(...arguments...);
  //   auto reassembled = executor.reassembly(...arguments...);
  //
  template<required::Configuration> struct Executor;
}
#endiv
#divert <hpp>
#import tunitas.Optional
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.vdaf.generic.Definition
#import tunitas.keyston.vdaf.generic.usage.Configuration
#import tunitas.keyston.vdaf.Shard
#import tunitas.keyston.vdaf.Shards
namespace tunitas::keyston::vdaf {
  namespace generic {
    using std::move;
    template<required::Configuration CONFIGURATION> inline auto swap(Executor<CONFIGURATION> &, Executor<CONFIGURATION> &) noexcept -> void;
  }
  template<generic::required::Configuration CONFIGURATION> struct generic::Executor : protected Definition<CONFIGURATION> {
    using Ancestor = Definition<CONFIGURATION>;
    friend auto generic::swap<>(Executor &, Executor &) noexcept -> void;
    static_assert(usage::Configuration<CONFIGURATION>);
  public:
    using Name = vdaf::Name;
    using enum Name;
    //
    explicit Executor() = default;
    using Ancestor::Definition;
    inline explicit Executor(Ancestor);
    //
    inline auto disassembly(typename Ancestor::template Measurement<WHOLE> const &) const -> typename Ancestor::Disassembled;
    inline auto initialization(typename Ancestor::Parameters const &, typename Ancestor::Verify_Key const &, Shard, typename Ancestor::Nonce const &, typename Ancestor::template Public<SHARE> const &, typename Ancestor::template Input<SHARE> const &) const -> typename Ancestor::Initialized;
    inline auto continuation(typename Ancestor::template Preparation<WHOLE> const &, Optional<typename Ancestor::template Preparation<SHARE>> const &) const -> typename Ancestor::Continued;
    inline auto amalgamation(typename Ancestor::Parameters const &, Shards<typename Ancestor::template Preparation<SHARE>> const &) const -> typename Ancestor::Amalgamated;
    inline auto disgorgement(typename Ancestor::Parameters const &, Shards<typename Ancestor::template Output<SHARE>> const &) const -> typename Ancestor::Disgorged;
    inline auto reassembly(typename Ancestor::Parameters const &, Shards<typename Ancestor::template Aggregation<SHARE>> const &, measurement::Count) const -> typename Ancestor::Reassembled;
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.vdaf.exception.Null
namespace tunitas::keyston::vdaf {
  template<generic::required::Configuration CONFIGURATION> auto generic::swap(Executor<CONFIGURATION> &a, Executor<CONFIGURATION> &b) noexcept -> void {
    typename Executor<CONFIGURATION>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace generic {
    template<required::Configuration _> Executor<_>::Executor(Ancestor d) : Ancestor{d} { }
    template<required::Configuration _> auto Executor<_>::disassembly(typename Ancestor::template Measurement<WHOLE> const &i) const -> typename Ancestor::Disassembled {
      if (nullptr == Ancestor::disassembly) {
        throw exception::Null{};
      } else {
        return Ancestor::disassembly(i);
      }
    }
    template<required::Configuration _> auto Executor<_>::initialization(typename Ancestor::Parameters const &p, typename Ancestor::Verify_Key const &k, Shard s, typename Ancestor::Nonce const &n, typename Ancestor::template Public<SHARE> const &u, typename Ancestor::template Input<SHARE> const &i) const -> typename Ancestor::Initialized {
      if (nullptr == Ancestor::initialization) {
        throw exception::Null{};
      } else {
        return Ancestor::initialization(p, k, s, n, u, i);
      }
    }
    template<required::Configuration _> auto Executor<_>::continuation(typename Ancestor::template Preparation<WHOLE> const &p, Optional<typename Ancestor::template Preparation<SHARE>> const &o) const -> typename Ancestor::Continued {
      if (nullptr == Ancestor::continuation) {
        throw exception::Null{};
      } else {
        return Ancestor::continuation(p, o);
      }
    }
    template<required::Configuration _> auto Executor<_>::amalgamation(typename Ancestor::Parameters const &p, Shards<typename Ancestor::template Preparation<SHARE>> const &v) const -> typename Ancestor::Amalgamated {
      if (nullptr == Ancestor::amalgamation) {
        throw exception::Null{};
      } else {
        return Ancestor::amalgamation(p, v);
      }
    }
    template<required::Configuration _> auto Executor<_>::disgorgement(typename Ancestor::Parameters const &p, Shards<typename Ancestor::Output<SHARE>> const &v) const -> typename Ancestor::Disgorged {
      if (nullptr == Ancestor::disgorgement) {
        throw exception::Null{};
      } else {
        return Ancestor::disgorgement(p, v);
      }
    }
    template<required::Configuration _> auto Executor<_>::reassembly(typename Ancestor::Parameters const &p, Shards<typename Ancestor::Aggregation<SHARE>> const &v, measurement::Count c) const -> typename Ancestor::Reassembled {
      if (nullptr == Ancestor::reassembly) {
        throw exception::Null{};
      } else {
        return Ancestor::reassembly(p, v, c);
      }
    }
  }
}
#endiv
