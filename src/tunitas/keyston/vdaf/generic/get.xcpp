// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.vdaf.generic.disassembled.get
namespace tunitas::keyston::vdaf::generic {
  //
  // For the convenience and the lulz.
  //
  using disassembled::get;
}
#endiv
#divert <cpp>
#import tunitas.keyston.vdaf.generic.disassembled.Disassembled
#import tunitas.keyston.vdaf.Configuration
namespace {
  namespace testate {
    namespace disassembled = tunitas::keyston::vdaf::generic::disassembled;
    using tunitas::keyston::vdaf::generic::get; // <------------------------------ test this
    using tunitas::keyston::vdaf::Configuration;
    using enum tunitas::keyston::Transport;
    //
    using Specimen = disassembled::Disassembled<Configuration<PROTOCOL>>; // ... pick one, any one will do
    //
    static_assert(sizeof (get<0>(std::declval<Specimen>())));
    static_assert(sizeof (get<0>(std::declval<Specimen const>())));
    //
    static_assert(sizeof (get<1>(std::declval<Specimen>())));
    static_assert(sizeof (get<1>(std::declval<Specimen const>())));
    //
  }
}
#endiv
