// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.generic.required.Configuration
namespace tunitas::keyston::vdaf::generic::continued {
  //
  // The alternatives of the sum type of the contnuity
  //
  // Specification:
  //
  //   See Variant and then Continued
  //
  // Design:
  //
  //   MUST allow for the utterance of the (forward) declaration of Again adn Final.
  //   MUST be progressively revealable; do not elide with tunitas.keyston.vdaf.generic.continued.Variant.
  //
  //   Again<...> MUST NOT be a template type alias; it MUST be a template class so that InstanceOf will work on it  (it won't work on a type alias to Pair<...>)
  //   Final<...> same.
  //
  // Usage:
  //
  //   No.
  //
  template<required::Configuration> struct Again;
  template<required::Configuration> struct Final;
}
#endiv
#divert <hpp>
#import tunitas.Pair
namespace tunitas::keyston::vdaf::generic {
  template<required::Configuration CONFIGURATION> class continued::Final : public CONFIGURATION::template Output<SHARE> {
    using Ancestor = typename CONFIGURATION::template Output<SHARE>;
  public:
    Final() = default;
    using Ancestor::Output;
  };
  template<required::Configuration CONFIGURATION> class continued::Again : public Pair<typename CONFIGURATION::template Preparation<WHOLE>, typename CONFIGURATION::template Preparation<SHARE>> {
    using Ancestor = Pair<typename CONFIGURATION::template Preparation<WHOLE>, typename CONFIGURATION::template Preparation<SHARE>>;
  public:
    Again() = default;
    using Ancestor::pair; // and yes, you "just have to know" that the constructor is named 'pair' (lower case)
  };
}
#endiv
