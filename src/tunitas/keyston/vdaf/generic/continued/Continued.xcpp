// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.generic.required.Configuration
namespace tunitas::keyston::vdaf::generic::continued {
  //
  // The sum type of the contnuity
  //
  // Specification:
  //
  //   (The usual place) I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   Basically this is
  //     using Continued = Variant<Pair<Preparation<WHOLE>, Preparation<SHARE>>, Output<SHARE>>;
  //   but make it more convenient.
  //
  //   Lookit all that convenience nearby with:
  //   is<...(...)
  //   cast<...>(...)
  //   Visitor{...}
  //   visit(...)
  //
  // Design:
  //
  //   Whereas std::variant requires the complete type of its components,
  //   create a new type to allow forward references to the Continued<...>
  //
  // Usage:
  //
  //   And then see Definition<...>.
  //
  template<required::Configuration> struct Continued;
}
#import std.variant_size.tunitas.keyston.vdaf.generic.continued.Continued.CONFIGURATION
#import std.variant_alternative.N.tunitas.keyston.vdaf.generic.continued.Continued.CONFIGURATION
#import std.visit.tunitas.keyston.vdaf.generic.continued.Continued.CONFIGURATION
#endiv
#divert <hpp>
#import tunitas.keyston.vdaf.generic.usage.Configuration
#import tunitas.keyston.vdaf.generic.continued.Variant
namespace tunitas::keyston::vdaf::generic {
  namespace continued {
    using std::move;
    template<required::Configuration CONFIGURATION> inline auto swap(Continued<CONFIGURATION> &, Continued<CONFIGURATION> &) noexcept -> void;
  }
  template<required::Configuration CONFIGURATION> struct continued::Continued : public Variant<CONFIGURATION> {
    using Ancestor = Variant<CONFIGURATION>;
    static_assert(usage::Configuration<CONFIGURATION>);
    friend auto swap<>(Continued &, Continued &) noexcept -> void;
  public:
    [[implicit]] Continued() = default;
    using Ancestor::variant; // and indeed, you "just have to know" that the real ancestor class name is 'variant' (lower case)
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::vdaf::generic {
  template<required::Configuration CONFIGURATION> auto continued::swap(Continued<CONFIGURATION> &a, Continued<CONFIGURATION> &b) noexcept -> void {
    typename Continued<CONFIGURATION>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
}
#endiv
