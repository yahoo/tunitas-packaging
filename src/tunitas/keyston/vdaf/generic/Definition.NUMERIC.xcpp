// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.generic.Definition
#import tunitas.keyston.vdaf.Configuration
#endiv
#divert <hpp>
namespace tunitas::keyston::vdaf::generic {
  template<> Definition<vdaf::Configuration<NUMERIC>>::Definition(Name);
}
#endiv
#divert <cpp>
#import tunitas.Tuple
#import tunitas.keyston.vdaf.exception.Invalid
#import tunitas.keyston.vdaf.exception.Unimplemented
#import tunitas.keyston.vdaf.numeric.Algorithm
#import tunitas.keyston.vdaf.numeric.zero
#import tunitas.keyston.vdaf.numeric.constant
#if 1 // [[REMOVETHESE]] when Algorithm is ready
#import tunitas.keyston.vdaf.numeric.prio3
#import tunitas.keyston.vdaf.numeric.poplar1
#endif
namespace tunitas::keyston::vdaf::generic {
  template<> Definition<vdaf::Configuration<NUMERIC>>::Definition(Name name) {
#if 0
    using daf::numeric;:Algorithm;
    using enum daf::Name;
    auto match = [given=name]<typename ALGORITHM>(auto each, ALGORITHM) -> bool {
      if (each != given) {
        return false;
      } else {
        disassembly = ALGORITHM::disassembly;
        initialization = ALGORITHM::initialization;
        continuation = ALGORITHM::continuation;
        amalgamation = ALGORITHM::amalgamation;
        disgorgement = ALGORITHM::disgorgement;
        reassembly = ALGORITHM::reassembly;
        return true;
      }
    };
    return [this]<auto... ALGO>(Tuple<decltype(ALGO)...>) {
      if (! (match(traits::Algorithm<ALGO>::NAME, ALGO) || ... ) ) {
        throw exception::Invalid{"daf name"};
      }
    }(Tuple{Algorithm<ADHOC, ZERO>{}, Algorithm<ADHOC, CONSTANT>{}, Algorithm<PRIO, COUNT>{}, Algorithm<PRIO, SUM>{}, Algorithm<PRIO, HISTOGRAM>{}, Algorithm<POPLAR, POPULARITY>{}});
#else
    switch (name) {
      using namespace vdaf::numeric;
    case Name::ZERO:
      disassembly = zero::disassembly;
      initialization = zero::initialization;
      continuation = zero::continuation;
      amalgamation = zero::amalgamation;
      disgorgement = zero::disgorgement;
      reassembly = zero::reassembly;
      break;
    case Name::CONSTANT:
      disassembly = constant::disassembly;
      initialization = constant::initialization;
      continuation = constant::continuation;
      amalgamation = constant::amalgamation;
      disgorgement = constant::disgorgement;
      reassembly = constant::reassembly;
      break;
    case Name::PRIO3_COUNT:
    case Name::PRIO3_SUM:
    case Name::PRIO3_HISTOGRAM:
      disassembly = prio3::disassembly;
      initialization = prio3::initialization;
      continuation = prio3::continuation;
      amalgamation = prio3::amalgamation;
      disgorgement = prio3::disgorgement;
      reassembly = prio3::reassembly;
      break;
    case Name::POPLAR1:
      disassembly = poplar1::disassembly;
      initialization = poplar1::initialization;
      continuation = poplar1::continuation;
      amalgamation = poplar1::amalgamation;
      disgorgement = poplar1::disgorgement;
      reassembly = poplar1::reassembly;
      break;
    default:
      throw exception::Invalid{"vdaf name"};
    }
#endif
  }
}
#endiv
