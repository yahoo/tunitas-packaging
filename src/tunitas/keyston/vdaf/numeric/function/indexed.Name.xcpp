// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.Name
namespace tunitas::keyston::vdaf::numeric::function::indexed {
  template<Name> struct Name;
  template<> struct Name<vdaf::Name::PRIO3_COUNT>;
  template<> struct Name<vdaf::Name::PRIO3_SUM>;
  template<> struct Name<vdaf::Name::PRIO3_HISTOGRAM>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.prio.Name
#import tunitas.keyston.prio.flp.Generic
#import tunitas.keyston.prio.flp.Validity
namespace tunitas::keyston::vdaf::numeric::function::indexed {
  template<> struct Name<vdaf::Name::PRIO3_COUNT> {
    // See Table 9, Section 7.4.1, Prio3Count
    inline static constexpr auto const PRIO = prio::Name::COUNT;
    using Validity = prio::flp::Validity<PRIO>;
    using Prover = prio::flp::Generic<Validity>;
  };
  template<> struct Name<vdaf::Name::PRIO3_SUM> {
    // See Table 10, Section 7.4.2, Prio3Sum
    inline static constexpr auto const PRIO = prio::Name::SUM;
    using Validity = prio::flp::Validity<PRIO>;
    using Prover = prio::flp::Generic<Validity>;
  };
  template<> struct Name<vdaf::Name::PRIO3_HISTOGRAM> {
    inline static constexpr auto const PRIO = prio::Name::HISTOGRAM;
    using Validity = prio::flp::Validity<PRIO>;
    using Prover = prio::flp::Generic<Validity>;
  };
}
#endiv
