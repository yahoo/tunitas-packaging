// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.vdaf.numeric.package_format.Formatter
#import tunitas.keyston.vdaf.numeric.Aggregation
#import std.ostream
namespace tunitas::keyston::vdaf::numeric::package_format::body {
  inline auto operator<<(std::ostream &, Formatter<Aggregation<WHOLE>, Aggregation<WHOLE> const &> const &) -> std::ostream &;
};
#endiv
#divert <ipp>
#import tunitas.variant.Visitor
#import tunitas.variant.visit
#import tunitas.keyston.measurement.format
namespace tunitas::keyston::vdaf::numeric::package_format {
  auto body::operator<<(std::ostream &outbound, Formatter<Aggregation<WHOLE>, Aggregation<WHOLE> const &> const &formatter) -> std::ostream & {
#if 1
    return outbound << format(formatter.captured.value);
#else
    // find and call the other format(...) of the components within the variant
    auto visitor = variant::Visitor{[&outbound](auto const &something) -> std::ostream & { return outbound << format(something); }};
    return visit(visitor, formatter.captured);
#endif
  }
}
#endiv
