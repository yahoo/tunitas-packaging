// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.vdaf.required.Definition
namespace tunitas::keyston::vdaf {
  //
  // The preparation state, as created by initialization(...) [prep_init(...)]
  // 
  // Specification:
  //
  //   That certain type that prep_init(...) returns.
  //
  //     def prep_init(Prio3, verify_key, agg_id, _agg_param, nonce, public_share, input_share):
  //       ...somehow...
  //     out_share = Prio3.Flp.truncate(...somehow...)
  //       ...somehow...
  //     if Prio3.Flp.JOINT_RAND_LEN > 0:
  //        ....somehow...
  //        k_corrected_joint_rand = Prio3.joint_rand(...somehow...)
  //       ...somehow...
  //     prep_msg = Prio3.encode_prep_share(...somehow...)
  //       ...somehow...
  //     return (out_share, k_corrected_joint_rand, prep_msg)
  //
  // Design:
  //
  //   The whole is never materialized
  //
  template<Slice, required::Definition> struct State;
  // Stae<WHOLE...> is never materialized
  template<required::Definition DEFINITION> struct State<SHARE, DEFINITION>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.vdaf.Definition
#import tunitas.keyston.prg.constants
#import tunitas.keyston.octets.Fixed
#import tunitas.keyston.vdaf.Check
namespace tunitas::keyston::vdaf {
  template<required::Definition DEFINITION> class State<SHARE, DEFINITION> {
    inline static constexpr auto const OUTPUT_LENGTH = DEFINITION::Codec::OUTPUT_LENGTH.count();
    template<Slice RESLICE> using Check = vdaf::Check<RESLICE, DEFINITION>;
  public:
    static constexpr auto use_joint_randomness() -> bool { return DEFINITION::use_joint_randomness(); }
    using Output = typename DEFINITION::Field::template Vector<OUTPUT_LENGTH>::Value;
    Output output{}; // ............. a.k.a. out_share
    Check<WHOLE> randomness{}; // ... a.k.a. prep_msg; a.k.a. k_corrected_joint_rand
    Check<SHARE> message{}; // ...... a.k.a. prep_share (contains verifier and [joint] randomness)
  };
}
#endiv
