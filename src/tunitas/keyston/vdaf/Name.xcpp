// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::vdaf {
  //
  // The Name of a VDAF is a code point (codepoint)
  //
  // Specification:

  //
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html#codepoints
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-daf-05.html#table-vdaf-03.html#16
  //   Verifiable Distributed Aggregation Functions
  //   Section 10. IANA Considerations
  //   Table IANA Considerations
  //   Table 16 ...???
  //
  //   <recitation>
  //     <paraphrase>
  //
  //       IANA Considerations
  //       Note that values 0xFFFF0000 through 0xFFFFFFFF are reserved for private use.
  //
  //       Value                         Transport                  Type        Reference
  //       --------------------------------------------------------------------------------
  //       0x00000000                    Prio3Count              VDAF        Section 7.4.1
  //       0x00000001                    Prio3Sum                VDAF        Section 7.4.2
  //       0x00000002                    Prio3Histogram          VDAF        Section 7.4.3
  //       0x00000003 to 0x00000FFF      Prio3 reserved          VDAF        n/a
  //       0x00001000                    Poplar1                 VDAF        Section 8.4
  //       0xFFFF0000 to 0xFFFFFFFF      private use             n/a         n/a
  //
  //       Table 16: Unique identifiers for (V)DAFs.
  //
  //      </paraphrase>
  //    </recitation>
  //
  // History:
  //
  //   From: https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-prio3
  //   <quote>
  //     As the name implies, Prio3 is a descendant of the original Prio construction.
  //      A second iteration was deployed in the [ENPA] system, and like the VDAF described here,
  //      the ENPA system was built from techniques introduced in [BBCGGI19] that significantly improve communication cost.
  //      That system was specialized for a particular aggregation function;
  //      the goal of Prio3 is to provide the same level of generality as the original construction.
  //   </quote>
  //
  // Design:
  //
  //   It's an enum (class).
  //
  // Usage:
  //
  //  You need a tutorial on how to use an enum (class)? o.rly?
  //
  enum class Name : std::uint32_t {
    PRIO3_COUNT = 0x0000'0000,
    Prio3Count = PRIO3_COUNT,
    //
    PRIO3_SUM = 0x0000'0001,
    Prio3Sum = PRIO3_SUM,
    //
    PRIO3_HISTOGRAM = 0x0000'0002,
    Prio3Histogram = PRIO3_HISTOGRAM,
    //
    POPLAR1 = 0x0000'1000,
    Poplar1 = POPLAR1,
    //
    // As known herein.
    ZERO = 0xffff'0000u, // ... the zero function
    CONSTANT, // .............. a constant function
  };
}
#endiv
#divert <hpp>
#import std.underlying_type
#import tunitas.error.by.Optional
#import tunitas.error.by.Outcome
#import tunitas.error.by.Exception
#import tunitas.error.Optional
#import tunitas.error.Outcome
#import tunitas.string.View
#import tunitas.string.Storage
namespace tunitas::keyston::vdaf {
  inline constexpr auto underlying(Name n) { return std::underlying_type_t<Name>(n); }
  //
  inline auto swap(Name &a, Name &b) noexcept -> void { return std::swap(a, b); }
  //
  inline auto to_string(error::by::Optional, Name) -> error::Optional<string::Storage>;
  inline auto to_string(error::by::Outcome, Name) -> error::Outcome<string::Storage>;
  inline auto to_string(error::by::Exception, Name) -> string::Storage;
  //
  inline auto to_string_view(error::by::Optional, Name) -> error::Optional<string::View>;
  inline auto to_string_view(error::by::Outcome, Name) -> error::Outcome<string::View>;
  inline auto to_string_view(error::by::Exception, Name) -> string::View;
  //
  auto render(Name) -> error::Optional<string::View>;
}
#endiv
#divert <ipp>
#import tunitas.keyston.name.To_String
#import tunitas.keyston.name.To_String_View
namespace tunitas::keyston {
  auto vdaf::to_string(error::by::Optional by, Name name) -> error::Optional<string::Storage> { return name::To_String<Name>::invoke(by, name); }
  auto vdaf::to_string(error::by::Outcome by, Name name) -> error::Outcome<string::Storage>   { return name::To_String<Name>::invoke(by, name); }
  auto vdaf::to_string(error::by::Exception by, Name name) -> string::Storage                 { return name::To_String<Name>::invoke(by, name); }
  //
  auto vdaf::to_string_view(error::by::Optional by, Name name) -> error::Optional<string::View> { return name::To_String_View<Name>::invoke(by, name); }
  auto vdaf::to_string_view(error::by::Outcome by, Name name) -> error::Outcome<string::View>   { return name::To_String_View<Name>::invoke(by, name); }
  auto vdaf::to_string_view(error::by::Exception by, Name name) -> string::View                 { return name::To_String_View<Name>::invoke(by, name); }
}
#endiv
#divert <cpp>
#import tunitas.string.literals
namespace tunitas::keyston {
  auto vdaf::render(Name name) -> error::Optional<string::View> {
    switch (name) {
      using namespace string::literals;
    case Name::PRIO3_COUNT:     return "PRIO3-COUNT"sv;
    case Name::PRIO3_SUM:       return "PRIO3-SUM"sv;
    case Name::PRIO3_HISTOGRAM: return "PRIO3-HISTOGRAM"sv;
    case Name::POPLAR1:         return "POPLAR1"sv;
    case Name::ZERO:            return "ZERO"sv;
    case Name::CONSTANT:        return "CONSTANT"sv;
    default: return {};
    }
  }
}
#endiv
