// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::prg::generator {
  //
  // Commonalities among all the generators
  //
  // Specification:
  //
  //   That which is common.
  //
  // Design:
  //
  //   Descendants only.
  //
  // Obligations:
  //
  //   Every descendant implements the "next" obligation
  //   auto next(Bytes length) -> Output;
  //
  // Usage:
  //
  //   By inheritance into the generators
  //
  struct Prototype;
}
#endiv
#divert <hpp>
#import tunitas.keyston.octets.Fixed
#import tunitas.keyston.octets.Variable
#import tunitas.keyston.octets.View
#forward tunitas.keyston.crypto.Algorithm
#import tunitas.keyston.crypto.algorithm.Algorithm.cSHAKE
struct tunitas::keyston::prg::generator::Prototype {
protected:
  using View = octets::View;
  using Octets = octets::Variable;
public:
  inline static constexpr auto const SEED_SIZE = Bytes{16};
  using Seed = octets::Fixed<SEED_SIZE.count()>;
  struct Custom {
    using View = Prototype::View;
    using Storage = Prototype::Octets;
  };
  struct Binder {
    using View = Prototype::View;
    using Storage = Prototype::Octets;
  };
  using Output = Octets;
protected:
  ~Prototype() = default;
  using cSHAKE = crypto::Algorithm<crypto::algorithm::Name::cSHAKE>;
  // NOT HERE ---> cSHAKE cshake{};
};
#endiv
