// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.daf.generic.disassembled.Disassembled
namespace tunitas::keyston::daf::generic::disassembled {
  //
  // get elements of the tuple.
  //
  // Specification:
  //
  //   Rhymes with std::get<...>(...)
  //   Findable by ADL.
  //
  // Design:
  //
  //
  // Usage:
  //
  //   You need a tutorial on this?
  //
  template<Size N, required::Configuration CONFIGURATION> inline auto get(Disassembled<CONFIGURATION> const &) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type const &;
  template<Size N, required::Configuration CONFIGURATION> inline auto get(Disassembled<CONFIGURATION> &) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type &;
  template<Size N, required::Configuration CONFIGURATION> inline auto get(Disassembled<CONFIGURATION> &&) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type &&;
}
#endiv
#divert <ipp>
#import std.get
namespace tunitas::keyston::daf::generic {
  template<Size N, required::Configuration CONFIGURATION> auto disassembled::get(Disassembled<CONFIGURATION> const &d) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type const & { return std::get<N>(d); } // the "tuple sense" will carry through
  template<Size N, required::Configuration CONFIGURATION> auto disassembled::get(Disassembled<CONFIGURATION> &d) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type &             { return std::get<N>(d); }
  template<Size N, required::Configuration CONFIGURATION> auto disassembled::get(Disassembled<CONFIGURATION> &&d) -> typename std::tuple_element<N, Disassembled<CONFIGURATION>>::type &&           { return std::get<N>(forward<Disassembled<CONFIGURATION>>(d)); }
}
#endiv
