// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::daf::numeric {
  //
  // The public key (of the FLP) as known to the DAF
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-daf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-daf-03.html
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-daf-04.html
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-daf-05.html
  //   Verifiable Distributed Aggregation Function
  //   Section 4. Definition of a DAF (Distributed Aggregation Function)
  //
  //   Pro Forma and perfunctory.
  //
  // <quote ref="https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html#name-upload-request">
  //   Note that the public share might be empty, depending on the DAF. 
  //   For example, Prio3 has an empty public share, but Poplar1 does not.
  // </quote>
  //
  // Design:
  //
  //   Obvious
  //
  //   Most of the functions have no parameters.
  //   This is perfunctory.  It makes more sense in POPULARITY (maybe); it makes sense in VDAF-POPLAR1
  //
  // Usage:
  //
  //   Yes.
  //
  template<Slice> struct Public;
  template<> struct Public<WHOLE>;
  template<> struct Public<SHARE>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::daf::numeric {
  template<> struct Public<WHOLE> { };
  template<> struct Public<SHARE> { };
}
#endiv
