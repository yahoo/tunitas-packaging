// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.number.Integer
#import tunitas.keyston.prio.Algorithm
#include <hpp/tunitas.keyston.prio.Algorithm>
#import tunitas.keyston.poplar.Algorithm
#include <hpp/tunitas.keyston.poplar.Algorithm>
namespace tunitas::keyston::daf::numeric {
  namespace [[eponymous]] aggregation {
    template<Slice SLICE> struct Aggregation;
    template<> struct Aggregation<WHOLE>;
    template<> struct Aggregation<SHARE>;
    using Simple = number::Integer;
    using Count = prio::Algorithm<prio::Name::COUNT>::Truncated;
    using Sum = prio::Algorithm<prio::Name::SUM>::Truncated;
    using Histogram = prio::Algorithm<prio::Name::HISTOGRAM>::Truncated;
    using Population = poplar::Algorithm<poplar::Name::ONE>::Output;
  }
  using aggregation::Aggregation;
}
#endiv
#divert <hpp>
#import tunitas.keyston.numeric.general.Aggregation
namespace tunitas::keyston::daf::numeric::aggregation {
  using std::move;
  // swap is trivial and taken by an ancestor
  using Variant = std::variant<Simple, Count, Sum, Histogram, Population>;
  template<> struct Aggregation<WHOLE> : public general::Aggregation {
    using Ancestor = general::Aggregation;
  public:
    Aggregation() = default;
    using Ancestor::Aggregation;
  };
  template<> struct Aggregation<SHARE> : public Variant {
    using Ancestor = Variant;
  public:
    Aggregation() = default;
    using Ancestor::variant; // yep, you "just have to know" that the constructor name is 'variant' therein
    using Simple = aggregation::Simple;
    using Count = aggregation::Count;
    using Sum = aggregation::Sum;
    using Histogram = aggregation::Histogram;
    using Population = aggregation::Population;
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::daf::numeric;
    using enum tunitas::keyston::Slice;
    //
    static_assert(std::semiregular<Aggregation<SHARE>>);
    static_assert(std::swappable<Aggregation<SHARE>>);
    //
    static_assert(std::semiregular<Aggregation<WHOLE>>);
    static_assert(std::swappable<Aggregation<WHOLE>>);
  }
}
#endiv
