// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::daf::numeric::popularity {
  namespace package_popularity {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_popularity::interface;
}
#import tunitas.keyston.daf.numeric.components
#import tunitas.keyston.daf.numeric.Function
namespace tunitas::keyston::daf::numeric::popularity::package_popularity {
  using namespace numeric::components;
  namespace body {
    using Function = numeric::Function<Scheme::POPLAR, Name::POPULARITY>;
  }
}
#endiv
#divert <hpp>
namespace tunitas::keyston::daf::numeric::popularity::package_popularity::body {
  namespace exported {
    //
    // the interface to the popularity DAF
    //
    // Specification:
    //
    //   According to the pattern of these things.
    //
    // Design:
    //
    //   Just what you see.
    //
    // Usage:
    //
    //   See Definition.
    //
    [[deprecated("instead call Function::disassembly(...)")]]  auto disassembly(Parameters const &, Measurement<WHOLE> const &, Randomness const &) -> Disassembled;
    [[deprecated("instead call Function::computation(...)")]]  auto computation(Parameters const &, Shard, Public<SHARE> const &, Input<SHARE> const &) -> Computed;
    [[deprecated("instead call Function::amalgamation(...)")]] auto amalgamation(Parameters const &, Series<Output<SHARE>> const &) -> Amalgamated;
    [[deprecated("instead call Function::reassembly(...)")]]   auto reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &, Processed) -> Reassembled;
  }
}
#endiv
#divert <cpp>
namespace tunitas::keyston::daf::numeric::popularity::package_popularity {
  auto interface::disassembly(Parameters const &p, Measurement<WHOLE> const &m, Randomness const &r) -> Disassembled   { return Function::disassembly(p, m, r); }
  auto interface::computation(Parameters const &p, Shard s, Public<SHARE> const &k, Input<SHARE> const &i) -> Computed { return Function::computation(p, s, k, i); }
  auto interface::amalgamation(Parameters const &p, Series<Output<SHARE>> const &so) -> Amalgamated                    { return Function::amalgamation(p, so); }
  auto interface::reassembly(Parameters const &p, Shards<Aggregation<SHARE>> const &sa, Processed d) -> Reassembled    { return Function::reassembly(p, sa, d); }
}
#endiv
