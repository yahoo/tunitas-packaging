// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.Algorithm
#include <hpp/tunitas.keyston.prio.Algorithm>
#import tunitas.keyston.poplar.Algorithm
#include <hpp/tunitas.keyston.poplar.Algorithm>
namespace tunitas::keyston::daf::numeric {
  namespace [[eponymous]] output {
    template<Slice SLICE> struct Output;
    template<> struct Output<WHOLE>; // never materialized; see Aggregation<WHOLE>
    template<> struct Output<SHARE>;
    using Count = prio::Algorithm<prio::Name::COUNT>::Truncated;
    using Sum = prio::Algorithm<prio::Name::SUM>::Truncated;
    using Histogram = prio::Algorithm<prio::Name::HISTOGRAM>::Truncated;
    using Population = poplar::Algorithm<poplar::Name::ONE>::Continuation;
  }
  using output::Output;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::daf::numeric::output {
  using Variant = std::variant<Count, Sum, Histogram, Population>;
  template<> class Output<SHARE> : public Variant {
    using Ancestor = Variant;
  public:
    Output() = default;
    using Ancestor::variant; // yep, you "just have to know" that the constructor name is 'variant' therein
    using Count = output::Count;
    using Sum = output::Sum;
    using Histogram = output::Histogram;
    using Population = output::Population;
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::daf::numeric;
    using enum tunitas::keyston::Slice;
    //
    static_assert(std::semiregular<Output<SHARE>>);
    static_assert(std::swappable<Output<SHARE>>);
  }
}
#endiv
