// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::daf {
  //
  // The definition, conveniently indexed by the Scheme
  //
  // Specification:
  //
  //  Just what it says on the label.
  //
  // Design:
  //
  //   Just as you see it.
  //   This cannot be merely a type alias because we want the specialization effect of ing implementations
  //
  // Usage:
  //
  //   And where do you think it might be used?
  //
  template<Scheme SCHEME> struct Definition;
}
#endiv
#divert <hpp>
#import tunitas.keyston.daf.Configuration
#import tunitas.keyston.daf.generic.Definition
namespace tunitas::keyston {
  namespace daf {
    using std::move;
    template<Scheme SCHEME> inline auto swap(Definition<SCHEME> &, Definition<SCHEME> &) noexcept -> void;
  }
  template<Scheme SCHEME> struct daf::Definition : public generic::Definition<Configuration<SCHEME>> {
    using Ancestor = generic::Definition<Configuration<SCHEME>>;
    friend auto daf::swap<>(Definition &, Definition &) noexcept -> void;
  public:
    explicit Definition() = default;
    using Ancestor::Definition;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston {
  template<Scheme SCHEME> auto daf::swap(Definition<SCHEME> &a, Definition<SCHEME> &b) noexcept -> void {
    typename Definition<SCHEME>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
}
#endiv
