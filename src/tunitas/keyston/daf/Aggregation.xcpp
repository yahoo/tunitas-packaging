// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.prio.Codec
#include <hpp/tunitas.keyston.prio.Codec>
#import tunitas.keyston.poplar.Algorithm
#include <hpp/tunitas.keyston.poplar.Algorithm>
namespace tunitas::keyston::daf {
  // [[WATCHOUT]] avoid the namespace name 'aggregation' here as that causes ambiguities with the nearby namespace keyston::aggregation
  namespace [[eponymous]] eponymous_aggregation {
    template<Slice SLICE> struct Aggregation;
    template<> struct Aggregation<WHOLE>;
    template<> struct Aggregation<SHARE>;
    using Count = prio::Codec<prio::Name::COUNT>::Truncated;
    using Sum = prio::Codec<prio::Name::SUM>::Truncated;
    using Histogram = prio::Codec<prio::Name::HISTOGRAM>::Truncated;
    using Popularity = poplar::Algorithm<poplar::Name::ONE>::Continuation;
  }
  using eponymous_aggregation::Aggregation;
}
#endiv
#divert <hpp>
#import tunitas.keyston.aggregation.Container
#import tunitas.keyston.formatter.Formatter
namespace tunitas::keyston::daf::eponymous_aggregation {
  using std::move;
  // swap(...) is trivial and taken by an ancestor
  inline auto format(Aggregation<SHARE> const &) -> formatter::Formatter<Aggregation<SHARE>, Aggregation<SHARE> const &>;
  using Variant = std::variant<Count, Sum, Histogram, Popularity>;
  template<> struct Aggregation<SHARE> : public Variant {
    using Ancestor = Variant;
  public:
    Aggregation() = default;
    using Ancestor::variant; // yep, you "just have to know" that the constructor name is 'variant' therein
    using Count = eponymous_aggregation::Count;
    using Sum = eponymous_aggregation::Sum;
    using Histogram = eponymous_aggregation::Histogram;
    using Popularity = eponymous_aggregation::Popularity;
  };
  template<> struct Aggregation<WHOLE> : public aggregation::Container {
    using Ancestor = aggregation::Container;
  public:
    Aggregation() = default;
    using Ancestor::Container;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::daf {
  auto eponymous_aggregation::format(Aggregation<SHARE> const &item) -> formatter::Formatter<Aggregation<SHARE>, Aggregation<SHARE> const &> { return {item}; }
}
#import tunitas.keyston.formatter.io
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::daf;
    using enum tunitas::keyston::Slice;
    //
    static_assert(std::semiregular<Aggregation<SHARE>>);
    static_assert(std::swappable<Aggregation<SHARE>>);
    //
    static_assert(std::semiregular<Aggregation<WHOLE>>);
    static_assert(std::swappable<Aggregation<WHOLE>>);
  }
}
#endiv
