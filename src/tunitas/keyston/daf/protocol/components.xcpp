// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.daf.Configuration
#include <hpp/tunitas.keyston.daf.Configuration>
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.array.Series
#import tunitas.keyston.Shards
#import tunitas.keyston.daf.protocol.Measurement
#import tunitas.keyston.daf.protocol.Input
#import tunitas.keyston.daf.protocol.Public
#import tunitas.keyston.daf.protocol.Output
#import tunitas.keyston.daf.protocol.Aggregation
namespace tunitas::keyston::daf::protocol {
  //
  // Specification:
  //
  //   A bundle of types for convenient use in the algorithms.
  //   A convenience.
  //
  // Design:
  //
  //   No.
  //
  // Usage:
  //
  //   #import tunitas.keyston.daf.protocol.components
  //   namespace something::something_else::dark_side {
  //     using namespace tunitas::keyston::dav::protocol::components;
  //     ...use them freely
  //   }
  //
  namespace components {
    using keyston::Shards;
    template<array::required::Arrayable TYPE> using Series = array::Series<TYPE>;
    using Randomness   = Configuration<PROTOCOL>::Randomness;
    using Processed    = Configuration<PROTOCOL>::Processed;
    using Disassembled = Configuration<PROTOCOL>::Disassembled;
    using Computed     = Configuration<PROTOCOL>::Computed;
    using Amalgamated  = Configuration<PROTOCOL>::Amalgamated;
    using Reassembled  = Configuration<PROTOCOL>::Reassembled;
    //
    using protocol::Measurement;
    using protocol::Input;
    using protocol::Public;
    using protocol::Output;
    using protocol::Aggregation;
  }
}
#endiv
