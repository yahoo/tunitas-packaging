// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import std.chrono.time_point
namespace tunitas::keyston::time::required {
  //
  // Is this a time_point?
  //
  // Specification:
  //
  //   https://en.cppreference.com/w/cpp/chrono/time_point (ahtem, lower case for classes, and for everything in The Standard Library)
  //
  // Design:
  //
  //   This is required::InstanceOf in copy-pasta, right here, right now.
  //
  // Usage:
  //
  //   template<required::Point POINT> struct Something;
  //
  template<typename POINT> concept Point = requires(POINT) {
    { []<typename CLOCK, typename DURATION>(std::chrono::time_point<CLOCK, DURATION> *) {} (static_cast<POINT *>(nullptr)) };
  };
}
#endiv
#divert <cpp>
#import tunitas.keyston.time.Clock
namespace {
  namespace testate {
    using namespace tunitas::keyston::time;
    static_assert(required::Point<decltype(Clock::now())>);
  }
}
#endiv
