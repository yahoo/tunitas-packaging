// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.time.required.Duration
#import tunitas.keyston.time.required.Point
namespace tunitas::keyston::time::required::cast {
  //
  // The consistency requirements for casting
  //
  // Specification:
  //
  //   Obvious.
  //
  // Design:
  //
  //   Just what you see
  //
  // Usage:
  //
  //   See the declarations of the various
  //   auto tunitas::keyston::time::cast(SOURCE const &) -> DESTINATION
  //
  namespace [[eponymous]] consistency {
    template<typename DESTINATION, typename SOURCE> concept Durationwise = requires(DESTINATION, SOURCE) {
      requires Duration<DESTINATION>;
      requires Duration<SOURCE>;
      requires same_as<typename DESTINATION::rep, typename SOURCE::rep>;
    };
    template<typename DESTINATION, typename SOURCE> concept Pointwise = requires(DESTINATION, SOURCE) {
      requires Point<DESTINATION>;
      requires Point<SOURCE>;
      requires same_as<typename DESTINATION::clock, typename SOURCE::clock>;
      requires same_as<typename DESTINATION::duration::rep, typename SOURCE::duration::rep>;
    };
    template<typename DESTINATION, typename SOURCE> concept Consistency = Durationwise<DESTINATION, SOURCE> || Pointwise<DESTINATION, SOURCE>;
  }
  using consistency::Consistency;
}
#endiv
