// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.Optional
#import tunitas.string.View
namespace tunitas::keyston::detail::required {
  //
  // Does this type have an ADL-available render(...) function?
  // You'll likely need <hpp> to utter this constraint.
  //
  // Specification:
  //
  //   A concept *is* a specification? Do you see the problem here?
  //
  // Obligations:
  //
  //   The caller shall provide a declaration matching render(TYPE)
  //
  // Design:
  //
  //   The choice of the function name 'render(...)' is arbitrary,
  //   but can't be named 'to_string_view'
  //   and MUST be in the same namespace as the real to_string_view(...)
  //
  // Usage:
  //
  //   template<required::Renderable TYPE> struct Converter {
  //     auto invoke(TYPE const &value) -> Optional<string::View> { return render(value); }
  //   };
  //
  template<typename TYPE> concept Renderable = requires(TYPE const &value) {
    { render(value) } -> convertible_to<tunitas::Optional<string::View> const &>;
  };
}
#endiv
