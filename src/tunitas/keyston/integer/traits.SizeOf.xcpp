// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.integer.required.Unsigned
#import tunitas.keyston.integer.required // ctcnr (cascade that certain 'namespace required')
namespace tunitas::keyston::integer::traits {
  //
  // The size of the representation of the integer.
  // Like sizeof but extending to the bignums.
  // 
  template<required::Unsigned> struct SizeOf;
  template<> struct SizeOf<uint8_t>    { inline static constexpr auto const VALUE = Bytes{1uz}; };
  template<> struct SizeOf<uint16_t>   { inline static constexpr auto const VALUE = Bytes{2uz}; };
  template<> struct SizeOf<uint32_t>   { inline static constexpr auto const VALUE = Bytes{4uz}; };
  template<> struct SizeOf<uint64_t>   { inline static constexpr auto const VALUE = Bytes{8uz}; };
  template<> struct SizeOf<uint128_t>  { inline static constexpr auto const VALUE = Bytes{16uz}; };
  template<> struct SizeOf<uint256_t>  { inline static constexpr auto const VALUE = Bytes{32uz}; };
  template<> struct SizeOf<uint512_t>  { inline static constexpr auto const VALUE = Bytes{64uz}; };
  template<> struct SizeOf<uint1024_t> { inline static constexpr auto const VALUE = Bytes{128uz}; };
  // n.b. these aren't usable in SP 800-185 encodings where x < 2^2040
  template<> struct SizeOf<uint2048_t> { inline static constexpr auto const VALUE = Bytes{256uz}; };
  template<> struct SizeOf<uint4096_t> { inline static constexpr auto const VALUE = Bytes{512uz}; };
  template<> struct SizeOf<uint8192_t> { inline static constexpr auto const VALUE = Bytes{1024uz}; };
}
#endiv
