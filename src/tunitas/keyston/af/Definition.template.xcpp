// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.af.required.Configuration
namespace tunitas::keyston::af {
  //
  // Design:
  //
  //   All this template machinery has the effect of making af::Executor<NUMERIC> look and feel rhyming-similar to daf, vdaf and vidaf executors.
  //   It's done for cosmetic purposes; to keep the intellectual burden of remembering four (4 algorithms \times 2 encodings) different schemes.
  //
  //   Just what you see.
  //   Definitions don't carry state.
  //
  // Usage:
  //
  //   Yes.
  //
  namespace [[eponymous]] definition {
    template<required::Configuration> struct Definition;
  }
  template<Scheme> struct Definition;
  template<> struct Definition<NUMERIC>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.af.Name
#import tunitas.keyston.af.usage.Configuration
#import tunitas.keyston.af.Configuration
namespace tunitas::keyston::af {
  using std::move;
  inline auto swap(Definition<NUMERIC> &, Definition<NUMERIC> &) noexcept -> void;
  namespace definition {
    using std::move;
    template<required::Configuration CONFIGURATION> inline auto swap(Definition<CONFIGURATION> &, Definition<CONFIGURATION> &) noexcept -> void;
  }
  template<required::Configuration CONFIGURATION> struct definition::Definition {
    static_assert(usage::Configuration<CONFIGURATION>);
    using Name = af::Name;
    // CANNOT ---> using enum Name; <--- CANNOT (because it is an opqaue enumerator, an enumerator with no enumeration list)
    //
    // Descendants will need these
    using Parameters = typename CONFIGURATION::Parameters;
    using Measurement = typename CONFIGURATION::Measurement;
    using Intermediate = typename CONFIGURATION::Intermediate;
    using Aggregation = typename CONFIGURATION::Aggregation;
    //
    using Computed = typename CONFIGURATION::Computed;
    using Computation = typename CONFIGURATION::Computation;
    //
    using Finalized = typename CONFIGURATION::Finalized;
    using Finalization = typename CONFIGURATION::Finalization;
    //
    explicit Definition() = default;
    explicit Definition(Name); // callers MUST specialize this
  protected:
    friend auto definition::swap<>(Definition &, Definition &) noexcept -> void;
    Computation computation{};
    Finalization finalization{};
  };
  template<> class Definition<NUMERIC> : public definition::Definition<Configuration<NUMERIC>> {
    using Ancestor = definition::Definition<Configuration<NUMERIC>>;
    friend auto af::swap(Definition<NUMERIC> &, Definition<NUMERIC> &) noexcept -> void;
  public:
    explicit Definition() = default;
    using Ancestor::Definition;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston {
  auto af::swap(Definition<NUMERIC> &a, Definition<NUMERIC> &b) noexcept -> void {
    Definition<NUMERIC>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace af { 
    template<required::Configuration CONFIGURATION> auto definition::swap(Definition<CONFIGURATION> &a, Definition<CONFIGURATION> &b) noexcept -> void {
      // These are pointers so the standard swap will be fone; the ADL-found swap(s) will be dubious-ambiguous-whatever.
      std::swap(a.computation, b.computation);
      std::swap(a.finalization, b.finalization);
    }
  }
}
#endiv
