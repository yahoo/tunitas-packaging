// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::af::numeric {
  //
  // The aggregation parameter(s) as known to the DAF
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-af
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-af-03.html
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-af-04.html
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-af-05.html
  //   Verifiable Distributed Aggregation Function
  //   Section 4. Definition of a DAF (Distributed Aggregation Function)
  //
  //   Pro Forma and perfunctory.
  //
  // Design:
  //
  //   Obvious
  //
  //   Most of the functions have no parameters.
  //   This is perfunctory.  It makes more sense in DAF (POPLAR1)
  //
  // Usage:
  //
  //   Yes.
  //
  struct Parameters;
}
#endiv
#divert <hpp>
#import nonstd.units.memory.scale // Bits
#import tunitas.keyston.Optional
#import tunitas.keyston.histogram.Boundaries
#import tunitas.keyston.popularity.Prefixes
namespace tunitas::keyston::af {
  namespace numeric {
    using std::move;
    inline auto swap(Parameters &, Parameters &) noexcept -> void;
  }
  struct numeric::Parameters {
    Optional<keyston::histogram::Boundaries> boundaries{};
    Optional<nonstd::units::memory::Bits> prefix_length{};
    Optional<keyston::popularity::Prefixes> prefixes{};
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::af {
  auto numeric::swap(Parameters &a, Parameters &b) noexcept -> void {
    swap(a.boundaries, b.boundaries);
    swap(a.prefixes, b.prefixes);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::keyston::af::numeric::Parameters;
    //
    static_assert(std::semiregular<Parameters>);
    //
    static_assert(std::is_default_constructible_v<Parameters>);
    static_assert(std::is_copy_constructible_v<Parameters>);
    static_assert(std::is_move_constructible_v<Parameters>);
    static_assert(std::is_copy_assignable_v<Parameters>);
    static_assert(std::is_move_assignable_v<Parameters>);
    static_assert(std::is_swappable_v<Parameters>);
  }
}
#endiv
