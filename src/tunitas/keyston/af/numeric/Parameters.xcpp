// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::af::numeric {
  //
  // The aggregation parameter(s) as known to the AF
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-af-05.html
  //   Verifiable Distributed Aggregation Function
  //   ... this is just the Aggregation Function part (not even the "Distributed" sense
  //   ... see Section 4. Definition of a DAF (Distributed Aggregation Function)
  //
  // Design:
  //
  //   Obvious (by inheritance)
  //
  // Usage:
  //
  //   Yes.
  //
  struct Parameters;
}
#endiv
#divert <hpp>
#import tunitas.keyston.numeric.general.Parameters
namespace tunitas::keyston::af {
  namespace numeric {
    using std::move;
    inline auto swap(Parameters &, Parameters &) noexcept -> void;
  }
  class numeric::Parameters : public general::Parameters {
    using Ancestor = general::Parameters;
    friend auto numeric::swap(Parameters &, Parameters &) noexcept -> void;
  public:
    Parameters() = default;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::af {
  auto numeric::swap(Parameters &a, Parameters &b) noexcept -> void {
    Parameters::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::keyston::af::numeric::Parameters;
    //
    static_assert(std::semiregular<Parameters>);
    //
    static_assert(std::is_default_constructible_v<Parameters>);
    static_assert(std::is_copy_constructible_v<Parameters>);
    static_assert(std::is_move_constructible_v<Parameters>);
    static_assert(std::is_copy_assignable_v<Parameters>);
    static_assert(std::is_move_assignable_v<Parameters>);
    static_assert(std::is_swappable_v<Parameters>);
  }
}
#endiv
