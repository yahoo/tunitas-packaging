// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.aggregation.Count
#import tunitas.keyston.aggregation.Histogram
#import tunitas.keyston.aggregation.Popularity
namespace tunitas::keyston::af::numeric {
  //
  // The numerical intermediate value.
  // The partial completion of the algorithm (whatever algorithm)
  //
  // Specification:
  //
  //   Holds a (big or little) number.
  //
  // Design:
  //
  //   Obvious.
  //   And yet, Using the Best Available Means and Methods (UBAMM)
  //   Descendants only; containment only.
  //
  // Usage:
  //
  //   Yes.
  //
  //   intermediate = Intermediate{...somehow...};
  //   auto result = finalize(intermediate);
  //
  namespace [[eponymous]] intermediate {
    using Count = aggregation::Count; // works for count and for sum [[o.rly?]]
    using aggregation::Histogram;
    using aggregation::Popularity;;
    struct Intermediate;
  }
  using intermediate::Intermediate;
}
#endiv
#divert <hpp>
#import std.variant
#forward tunitas.keyston.af.numeric.Aggregation
namespace tunitas::keyston::af::numeric {
  namespace intermediate {
    using Variant = std::variant<Count, Histogram, Popularity>;
    inline auto finalize(Intermediate const &) -> Aggregation;
  }
  class intermediate::Intermediate : public Variant {
    using Ancestor = Variant;
  public:
    Intermediate() = default;
#if 1
    using Ancestor::variant;
#else
    explicit Intermediate(Count n) : Ancestor{move(n)} { }
    explicit Intermediate(Histogram h) : Ancestor{move(h)} { }
    explicit Intermediate(Popularity p) : Ancestor{move(p)} { }
#endif
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.af.numeric.Aggregation
#import tunitas.variant.Visitor
#import tunitas.variant.visit
namespace tunitas::keyston::af::numeric {
  auto intermediate::finalize(Intermediate const &intermediate) -> Aggregation {
    // This merely reapplies the Aggregation constructor to the ccomponent parts of Intermediate
    auto visitor = variant::Visitor{[](auto const &rhs)  -> Aggregation { return {rhs}; }};
    return visit(visitor, intermediate);
  }
}
#endiv
