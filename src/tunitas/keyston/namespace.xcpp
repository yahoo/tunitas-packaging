// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas
#import std.byte
#import std.size_t
namespace tunitas::keyston {
  using Octet = std::byte;
  using Size = std::size_t;
  enum CONFIG { }; // the anchor for autotools::autoconf::Config<CONFIG>
  //
  // Whereas the Slice concept is referenced in keyston::function (numerics) and keyston::protocol (bytes, buffers & data layout)
  // the canonical definition is provided here; but should be conceived as also being sourced in keyston::protocol.
  enum class Slice { WHOLE, SHARD, SHARE = SHARD };
  using enum Slice; // within the namespace allow the unqualified names.
}
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
// For the hygeine, and for in-place testing.
// as predicate-variables
#import std.is_default_constructible
#import std.is_copy_constructible
#import std.is_move_constructible
#import std.is_copy_assignable
#import std.is_move_assignable
#import std.is_swappable
#import std.is_abstract
// as concepts
#import std.copy_constructible
#import std.move_constructible
#import std.constructible_from
#import std.assignable_from
#endiv
#divert <hpp>
#import std.forward
#import std.move
#import std.swap
namespace tunitas::keyston {
  // As of C++-17 these are basically "part of the language"
  using std::move;
  using std::forward;
  using std::swap;
}
#endiv
