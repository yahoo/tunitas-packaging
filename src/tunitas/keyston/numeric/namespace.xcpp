// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston
namespace tunitas::keyston::numeric {
  //
  // Numerical Methods
  // Working with tunitas::number::Integer
  //
  // namespace general is used to separate certain names from the general namespace.
  // Whereas namespace keyston::numeric cascades down into namespaces af::numeric, daf::numeric, vdaf::numeric and vidaf::numeric,
  // allowing the general versions of Parameters, Aggregation and other classes to blend it here will caus ambiguities down there.
  //
  namespace [[nodirectory]] general { }
  namespace [[nodirectory]] traits {
    template<typename> struct Result;
    template<typename RESULT, typename OBJECT, typename... ARGUMENTS> struct Result<RESULT (OBJECT::*)(ARGUMENTS...)>;
    template<typename RESULT, typename OBJECT, typename... ARGUMENTS> struct Result<RESULT (OBJECT::*)(ARGUMENTS...) const>;
  }
}
#endiv
#divert <hpp>
namespace tunitas::keyston::numeric::traits {
  template<typename RESULT, typename OBJECT, typename... ARGUMENTS> struct Result<RESULT (OBJECT::*)(ARGUMENTS...)> {
    using Type = RESULT;
  };
  template<typename RESULT, typename OBJECT, typename... ARGUMENTS> struct Result<RESULT (OBJECT::*)(ARGUMENTS...) const> {
    using Type = RESULT;
  };
}
#endiv
