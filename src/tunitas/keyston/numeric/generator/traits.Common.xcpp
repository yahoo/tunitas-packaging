// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import std.remove_cv
#import nonstd.required.integer.Unsigned
namespace tunitas::keyston::numeric::generator::traits {
  //
  // Similar to std::common_type but accepts auto literal values instead.
  //
  // Specification:
  //
  //   https://en.cppreference.com/w/cpp/types/common_type
  //
  // Usage: (e.g.)
  //
  //   using Type = traits::Common<1u, 2lu, 3uz>;
  //
  namespace [[eponymous]] common {
    template<typename... TYPE> requires (nonstd::required::integer::Unsigned<TYPE> && ... ) struct Base;
    template<auto... VALUE> requires (nonstd::required::integer::Unsigned<std::remove_cv_t<decltype(VALUE)>> && ... ) struct Common;
  };
  using common::Common;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::numeric::generator::traits {
  template<typename... TYPE> requires (nonstd::required::integer::Unsigned<TYPE> && ... ) struct common::Base {
    using Type [[School("New")]] = typename std::common_type<TYPE...>::type;
    using type [[School("old")]] = Type;
  };
  template<auto... VALUE> requires (nonstd::required::integer::Unsigned<std::remove_cv_t<decltype(VALUE)>> && ... ) struct common::Common : public Base<std::remove_cv_t<decltype(VALUE)>...> { };
}
#endiv
#divert <cpp>
#import std.same_as
namespace {
  namespace testate {
    namespace traits = tunitas::keyston::numeric::generator::traits;
    static_assert(std::same_as<std::size_t, traits::Common<1u, 2u, 3lu, 4lu, 5uz>::Type>);
    static_assert(std::same_as<int unsigned long long, traits::Common<1u, 2u, 3lu, 4llu, 5uz>::Type>);
  }
}
#endiv
