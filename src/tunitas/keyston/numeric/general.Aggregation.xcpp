// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.measurement.Simple
#import tunitas.keyston.measurement.Histogram
#import tunitas.keyston.measurement.Population
namespace tunitas::keyston::numeric::general {
  //
  // The final aggregation
  //
  // Specification:
  //
  //   The usual variant-record machinery
  //   Also presentation UX machinery [[and what is that Jim? What is that?]]
  //
  // Design:
  //
  //   Descendants only into af::Aggregation, daf::Aggregation<WHOLE>, vdaf::Aggregation<WHOLE> and so on unto vidaf::Aggregation<WHOLE>
  //   Sure, why do you ask?  You don't think we got this off ChatGEEPEETEE do you?
  //
  // Usage:
  //
  //   As one does.
  //
  namespace [[eponymous]] aggregation {
    using Simple = measurement::Simple;
    using Count = measurement::Count;
    using Sum = measurement::Simple;
    using measurement::Histogram;
    using measurement::Population;
    struct Aggregation;
  }
  using aggregation::Aggregation;
}
#endiv
#divert <hpp>
#import std.variant
namespace tunitas::keyston::numeric::general {
  namespace aggregation {
    // reminder - we don't repeat Simple, Count, Sum, Histogram, Population as same_as<Simple, Sum>
    using Variant = std::variant</*Simple*/ Count, Sum, Histogram, Population>;
    using std::move;
  }
  struct aggregation::Aggregation : public Variant {
    using Ancestor = Variant;
  protected:
    ~Aggregation() = default;
  public:
    Aggregation() = default;
    using Ancestor::variant; // yep, you "just have to know" that the constructor name is 'variant' therein
    using Simple = aggregation::Simple;
    using Count = aggregation::Count;
    using Sum = aggregation::Sum;
    using Histogram = aggregation::Histogram;
    using Population = aggregation::Population;
  };
};
#endiv
#divert <cpp>
namespace {
  namespace testate {
    struct Subject : public tunitas::keyston::numeric::general::Aggregation {
      Subject() = default;
    };
    static_assert(std::semiregular<Subject>);
    static_assert(std::swappable<Subject>);
  }
}
#endiv
