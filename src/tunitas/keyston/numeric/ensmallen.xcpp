// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::numeric {
  namespace package_ensmallen {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_ensmallen::interface;
}
#import tunitas.keyston.measurement.Result
#import std.underlying_type
#import std.make_signed
#import std.numeric_limits
namespace tunitas::keyston::numeric::package_ensmallen {
  namespace body {
    using Overlaying = measurement::Result;
    using Underlying = std::make_signed_t<std::underlying_type_t<Overlaying>>; // because number::Integer is signed but measurement::Result is not
    using Limits = std::numeric_limits<Underlying>;
  }
}
#endiv
#divert <hpp>
#import tunitas.number.Integer
#import tunitas.keyston.daf.numeric.Aggregation
#import tunitas.keyston.daf.numeric.Output
namespace tunitas::keyston::numeric::package_ensmallen::body {
  namespace exported {
    //
    // Convert the bignum to a smallnum to a Result
    // Just what you see.
    // clip-to-max if the bignum is too big.
    //
    // Usage:
    //
    //   Obvious.  You see it, don't you?
    //
    inline auto ensmallen(number::Integer const &) -> measurement::Result;
  }
}
#endiv
#divert <ipp>
namespace tunitas::keyston::numeric::package_ensmallen {
  auto interface::ensmallen(number::Integer const &big) -> measurement::Result {
    if (big.fits<Underlying>()) {
      if (auto got=big.get<Underlying>(); got >= 0) {
        return Overlaying(got);
      }
    }
    return Overlaying{Limits::max()};
  }
}
#endiv
