// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.span.Span
#import tunitas.string.Storage
namespace tunitas::keyston::octets {
  //
  // convert the octets to a hexidecimal string
  //
  // Specification:
  //
  //   Just what it says on the label.
  //
  // Design:
  //
  //   Always a dynamic allocation, even for constexpr-fixed-length input.
  //
  // Usage:
  //
  //   You need a tutorial on how to call a function like this?  o.rly.?
  //
  inline auto to_hexidecimal(span::Span<Octet const>) -> string::Storage;
}
#endiv
#divert <ipp>
#import std.ostringstream
#import nonstd.setwidth
#import nonstd.setfill
#import std.hex
namespace tunitas::keyston {
  auto octets::to_hexidecimal(span::Span<Octet const> source) -> string::Storage {
    auto buf = std::ostringstream{};
    buf << std::hex;
    for (auto each : source) {
      buf << nonstd::setwidth(2) << nonstd::setfill('0') << static_cast<unsigned>(each);
    }
    return buf.str();
  }
}
#endiv
