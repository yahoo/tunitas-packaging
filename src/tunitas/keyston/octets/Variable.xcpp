// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::octets {
  //
  // A variable array of octets (bytes)
  //
  // Specification:
  //
  //   Just what it says on the label
  //   With subrange(...)
  //
  // Design:
  //
  //   Obvious.
  //
  // Usage:
  //
  //   As one does.
  //
  struct Variable;
}
#endiv
#divert <hpp>
#import tunitas.keyston.array.Variable
namespace tunitas::keyston {
  namespace octets {
    using std::move;
  }
  class octets::Variable : public array::Variable<Octet> {
    using Ancestor = array::Variable<Octet>;
  public:
    Variable() = default;
    using Ancestor::Variable;
    inline auto subrange(Index lo, Index hi) const -> Variable;
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Bound
namespace tunitas::keyston::octets {
  auto Variable::subrange(Index lo, Index hi) const -> Variable {
    if (auto size=Ancestor::size(); hi < lo || size < lo || size < hi) {
      throw exception::Bound{"index out of range"};
    } else {
      auto begin = Ancestor::begin();
      return {begin+lo, begin+hi};
    }
  }
}
#endiv
