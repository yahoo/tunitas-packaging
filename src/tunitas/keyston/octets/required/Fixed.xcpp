// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.octets.Fixed
namespace tunitas::keyston::octets::required {
  //
  // Is this type a (descendant of) Fixed<N>?
  // This is the moral equivalent of InstanceOf which accounts for the NTTP (Non-Type Template Parameter)
  //
  template<typename FIXED> concept Fixed = requires(FIXED) {
    { []<auto CAPACITY>(octets::Fixed<CAPACITY> *) requires convertible_to<decltype(CAPACITY), Size>
      {}(static_cast<FIXED *>(nullptr)) };
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    namespace required = tunitas::keyston::octets::required;
    using namespace tunitas::keyston::octets;
    //
    static_assert(required::Fixed<Fixed<8>>);
    static_assert(required::Fixed<Fixed<16>>);
  }
}
#endiv
