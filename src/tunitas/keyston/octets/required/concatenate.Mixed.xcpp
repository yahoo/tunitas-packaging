// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.octets.required.view.Mixed
#import tunitas.keyston.octets.required.view.Variable
#import tunitas.keyston.octets.required.array.Mixed
#import tunitas.keyston.octets.required.array.Variable
#import std.remove_cvref
namespace tunitas::keyston::octets::required::concatenate {
  //
  // Are these types a mixed array of (constie) octets?
  // Where "mixed" means Fixed or Variable.
  // INCLUDING zero of such.
  // This MUST be diagnosable without the complete type of MIXED.
  //
  namespace [[eponymous]] mixed {
    template<typename... MIXED> concept Pure = ((array::Mixed<MIXED> || view::Mixed<MIXED>) && ... ) && ((array::Variable<MIXED> || view::Variable<MIXED>) || ... );
    template<typename... MIXED> concept Mixed = 0uz == sizeof...(MIXED) || Pure<std::remove_cvref_t<MIXED>...>;
  }
  using mixed::Mixed;
}
#endiv
#divert <cpp>
#import tunitas.array.Variable
#import tunitas.array.Fixed
namespace {
  namespace testate {
    namespace required = tunitas::keyston::octets::required;
    namespace array = tunitas::array;
    using tunitas::keyston::Octet;
    static_assert(required::concatenate::Mixed<>);
    static_assert(required::concatenate::Mixed<array::Variable<Octet>>);
    static_assert(required::concatenate::Mixed<array::Fixed<Octet, 1uz>, array::Variable<Octet>>);
    static_assert(required::concatenate::Mixed<array::Fixed<Octet, 1uz>, array::Variable<Octet>, array::Fixed<Octet, 1uz>>);
  }
}
#endiv
