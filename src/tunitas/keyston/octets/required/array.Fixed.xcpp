// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.array.Fixed
#forward tunitas.keyston.octets.Fixed
namespace tunitas::keyston::octets::required::array {
  //
  // A fixed array of octets?
  // Because we diagnose this without the complete type of FIXED, we cannot rely upon inheritance or derived_from
  //
  namespace [[eponymous]] fixed {
    template<typename FIXED> concept Old = requires(FIXED) {
      { []<Size EXTENT>(tunitas::array::Fixed<keyston::Octet, EXTENT> *)
        {}(static_cast<FIXED *>(nullptr)) };
    };
    template<typename FIXED> concept New = requires(FIXED) {
      { []<Size EXTENT>(tunitas::keyston::octets::Fixed<EXTENT> *)
        {}(static_cast<FIXED *>(nullptr)) };
    };
    template<typename FIXED> concept Fixed = Old<FIXED> || New<FIXED>;
  }
  using fixed::Fixed;
}
#endiv
#divert <cpp>
#import tunitas.array.Fixed
#import tunitas.keyston.octets.Fixed
namespace {
  namespace testate {
    namespace required = tunitas::keyston::octets::required;
    static_assert(required::array::Fixed<tunitas::keyston::octets::Fixed<1uz>>);
    static_assert(required::array::Fixed<tunitas::array::Fixed<tunitas::keyston::Octet, 1uz>>);
  }
}
#endiv
