// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::measurement {
  namespace package_format {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_format::interface;
}
#import tunitas.keyston.array.range.required // ctcnr (cascade that certain 'namespace required'
#import langu.age
namespace tunitas::keyston::measurement::package_format {
  namespace required { using namespace tunitas::keyston::array::range::required; }
  namespace body {
    using namespace langu::age;
  }
}
#import nonstd.units.memory.scale // Bits
#import nonstd.units.quantity.Quantity
#import tunitas.keyston.measurement.Histogram
#import tunitas.keyston.histogram.Boundaries
#import tunitas.keyston.measurement.Population
#import tunitas.keyston.popularity.Prefixes
namespace tunitas::keyston::measurement::package_format {
  using nonstd::units::memory::Bits;
  using nonstd::units::quantity::Quantity;
  using histogram::Boundaries;
  static_assert(sizeof(Histogram *), "already visible");
  using popularity::Prefixes;
  static_assert(sizeof(Population *), "already visible");
  namespace body {
    class Newline;
  }
}
#endiv
#divert <hpp>
#import tunitas.Optional
#import std.ostream
namespace tunitas::keyston::measurement::package_format {
  namespace body {
    inline auto operator<<(std::ostream &, [[inout]] Newline &) -> std::ostream &;
  }
  class body::Newline : public Optional<char> {
    using Ancestor = Optional<char>;
  public:
    Newline() = default;
    using Ancestor::optional;
    using Ancestor::operator=;
    auto operator=(char c) -> Newline & { Ancestor::operator=(c); return *this; } // remove the ambiguity
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::measurement::package_format {
  auto body::operator<<(std::ostream &outbound, Newline &newline) -> std::ostream & {
    if (newline) {
      outbound << *newline;
    }
    newline = '\n';
    return outbound;
  }
}
#endiv
