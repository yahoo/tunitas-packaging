// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::measurement {
  //
  // A population (of counrs) of the results relative to the prefixes (stored separately)
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html
  //   Verifiable Distributed Aggregation Function
  //
  // Design:
  //
  //   A new type so that ADL will find the associated operators.
  // 
  // Usage:
  //
  //   auto population = Population{}; .................... list initialization
  //   auto population = Population{1,2,3}; ............... list initialization
  //   auto population = Population(3, {}); ............... note the use of the parenthesis for the constructor call (not list initialization)
  //
  struct Population;
}
#endiv
#divert <hpp>
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.array.Variable
namespace tunitas::keyston {
  namespace measurement {
    inline auto operator+(Population &&, Population &&) -> Population;
    inline auto operator+(Population &&, Population const &) -> Population;
    inline auto operator+(Population const &, Population &&) -> Population;
    inline auto operator+(Population const &, Population const &) -> Population;
  }
  class measurement::Population : public array::Variable<measurement::Count> {
    using Ancestor = array::Variable<measurement::Count>;
  public:
    Population() = default;
    explicit Population(Size s, Value v) : Ancestor{s, v} { }
    using Ancestor::Container;
    using Ancestor::operator=;
    inline auto operator+=(Population const &) -> Population &;
  };
}
#import nonstd.container.Traits.tunitas.keyston.measurement.Population
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Length
#import tunitas.keyston.array.enumerate
namespace tunitas::keyston {
  auto measurement::operator+(Population &&a, Population &&b) -> Population      { return move(a += b); }
  auto measurement::operator+(Population &&a, Population const &b) -> Population { return move(a += b); }
  auto measurement::operator+(Population const &a, Population &&b) -> Population { return move(b += a); }
  auto measurement::operator+(Population const &a, Population const &b) -> Population {
    auto c{a};
    c += b;
    return c;
  }
  auto measurement::Population::operator+=(Population const &other) -> Population & {
    if (this->size() != other.size()) {
      throw exception::Length{"size mismatch"};
    }
    for (auto [index, location] : enumerate(*this)) {
#if 1
      // [[FIXTHIS]] nonstd::units::count::Unit<> should admit to operator+ (one can add and subtract counts)
      location = Value{location.count() + other.at(index).count()};
#else
      location = location + other.at(index);
#endif
    }
    return *this;
  }
}
#endiv
