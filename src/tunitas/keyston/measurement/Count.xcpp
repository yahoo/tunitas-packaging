// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.units.count.scale // Items
namespace tunitas::keyston::measurement {
  //
  // How many measurements?
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   It's in there.
  //
  // Design:
  //
  //   It's a standard unit of "count" "items" or "each"
  //
  // Usage:
  //
  //   (Non-)standard stuff.  RTM.
  //
  using Count = nonstd::units::count::Items;
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace tunitas::keyston::measurement {
  inline constexpr auto underlying(Count c) { return c.count(); } // WATCHOUT - as a type alias, ADL won't find this. here
}
#if 0
namespace nonstd::units::count {
  // So that ADL will find it. [[AVOID]] - don't inject into other namespaces which do not offer a customization point
  using tunitas::keyston::measurement::underlying;
}
#endif
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::measurement;
    static_assert(std::is_swappable_v<Count>);
  }
}  
#endiv
