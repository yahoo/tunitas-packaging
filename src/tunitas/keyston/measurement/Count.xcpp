// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::measurement {
  //
  // How many measurements?
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   It's in there.
  //
  // Design:
  //
  //   Segregate away from the other forms of counts.
  //   So that ADL will find it and its operations.
  //
  // Usage:
  //
  //   You need a tutorial on how to use an unscoped enumeration (a flavored integer?)? o.rly?
  //
  enum class Count : std::uint64_t;
}
#endiv
#divert <hpp>
#import std.underlying_type
namespace tunitas::keyston::measurement {
  inline constexpr auto underlying(Count c) { return std::underlying_type_t<Count>(c); }
  inline auto swap(Count &a, Count &b) noexcept -> void { std::swap(a, b); }
}
#endiv
