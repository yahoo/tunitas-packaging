// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::hpke::id {
  //
  // All the HPKE identifiers.
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   The small integers.
  //
  // Usage:
  //
  //   You need a tutorial on how to use an int? o.rly?
  //
  enum Configuration : std::uint8_t;
  enum KEM : std::uint16_t;
  enum KDF : std::uint16_t;
  enum AEAD : std::uint16_t;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import nonstd.required.Enumeration
#import tunitas.keyston.required // ctcnr (cascade that certain 'namespace required')
namespace tunitas::keyston::hpke::id {
  template<required::Enumeration ENUMERATION> inline constexpr auto underlying(ENUMERATION e) { return std::underlying_type_t<ENUMERATION>(e); }
  template<required::Enumeration ENUMERATION> inline auto swap(ENUMERATION &a, ENUMERATION &b) noexcept -> void { std::swap(a, b); }
}
#endiv
