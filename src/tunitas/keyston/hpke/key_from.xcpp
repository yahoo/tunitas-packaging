// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.hpke.configuration.Basis
namespace tunitas::keyston::hpke::configuration {
  //
  // Get the Key from an HPKE Confguration
  //
  // Specification:
  //
  //   As expected by denniston::concurrent::dictionary::Dictionary<...>
  //
  // Design:
  //
  //   The key_from(...) function MUST be in this namespace so that ADL wil find it.
  //   The key_from(...) function MUST return a constie reference to the key within the value
  //
  // Usage:
  //
  //   Obvious.
  //   But see denniston::concurrent::dictionary::usage::Key_From
  //
  inline auto key_from(Basis const &) -> id::Configuration const &;
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke {
   auto configuration::key_from(Basis const &cfg) -> id::Configuration const & { return cfg.id; };
}
#endiv
#divert <cpp>
#import tunitas.denniston.concurrent.dictionary.usage.Key_From
#import tunitas.denniston.concurrent.dictionary.usage.Valuable
#import tunitas.keyston.hpke.Configuration
namespace {
  namespace testate {
    namespace usage = tunitas::denniston::concurrent::dictionary::usage;
    using tunitas::keyston::hpke::Configuration;
    using enum tunitas::keyston::hpke::Side;
    static_assert(usage::Key_From<Configuration<SECRET>>);
    static_assert(usage::Key_From<Configuration<PUBLIC>>);
    static_assert(usage::Valuable<Configuration<SECRET>>);
    static_assert(usage::Valuable<Configuration<PUBLIC>>);
  }
}
#endiv
