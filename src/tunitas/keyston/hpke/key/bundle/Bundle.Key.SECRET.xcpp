// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.key.bundle.Bundle.template
#import tunitas.keyston.hpke.Key
namespace tunitas::keyston::hpke::key::bundle {
  //
  // A bundle fo secret key material
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   Suitable for combination in Bundle<Public,Secret>
  //
  // Usage:
  //
  //   Can't use designated initialization because of the ancestry.
  //
  struct Secret_Aspect;
  template<> struct Bundle<Key<SECRET>>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::hpke::key {
  struct bundle::Secret_Aspect {
    Key<SECRET> material{};
    // What else?  parameters, algo, flavor, expiry, a poem?
  protected:
    ~Secret_Aspect() = default;
  };
  namespace bundle {
    using std::move;
    inline auto swap(Secret_Aspect &, Secret_Aspect &) noexcept -> void;
    inline auto swap(Bundle<Key<SECRET>> &, Bundle<Key<SECRET>> &) noexcept -> void;
    template<> class Bundle<Key<SECRET>> : public Secret_Aspect {
      using Ancestor = Secret_Aspect;
    public:
      [[implicit]] Bundle() = default;
      inline [[implicit]] Bundle(Key<SECRET> const &);
      auto operator=(Bundle const &) -> Bundle & = default;
      inline auto operator=(Key<SECRET> const &) -> Bundle &;
    };
  }
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke::key {
  auto bundle::swap(Bundle<Key<SECRET>> &a, Bundle<Key<SECRET>> &b) noexcept -> void { swap(static_cast<Secret_Aspect &>(a), b); }
  auto bundle::swap(Secret_Aspect &a, Secret_Aspect &b) noexcept -> void {
    swap(a.material, b.material);
  }
  namespace bundle {
    Bundle<Key<SECRET>>::Bundle(Key<SECRET> const &s) : Ancestor{s} { }
    auto Bundle<Key<SECRET>>::operator=(Key<SECRET> const &sec) -> Bundle & {
      material = sec;
      return *this;
    }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::keyston::hpke::key::bundle::Bundle;
    using enum tunitas::keyston::hpke::Side;
    using tunitas::keyston::hpke::Key;
    using Specimen = Bundle<Key<SECRET>>;
    //
    static_assert(std::semiregular<Specimen>);
    //
    static_assert(std::is_default_constructible_v<Specimen>);
    static_assert(std::is_copy_constructible_v<Specimen>);
    static_assert(std::is_move_constructible_v<Specimen>);
    static_assert(std::is_copy_assignable_v<Specimen>);
    static_assert(std::is_move_assignable_v<Specimen>);
    static_assert(std::is_swappable_v<Specimen>);
  }
}
#endiv
