!// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.key.bundle.Bundle.template
#import tunitas.keyston.hpke.Key
namespace tunitas::keyston::hpke::key::bundle {
  //
  // Combining the secret and public keys
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   Combine them.  Looky there.
  //
  // Usage:
  //
  //   Yes.
  //
  template<> struct Bundle<Key<SECRET>, Key<PUBLIC>>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.hpke.key.bundle.Combined
namespace tunitas::keyston::hpke::key::bundle {
  template<> class Bundle<Key<SECRET>, Key<PUBLIC>> : public Combined {
    using Ancestor = Combined;
  public:
    Bundle() = default;
    using Ancestor::Combined;
    Bundle &operator=(Bundle const &) = default;
    using Ancestor::operator=;
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::keyston::hpke::key::bundle::Bundle;
    using tunitas::keyston::hpke::Key;
    using enum tunitas::keyston::hpke::Side;
    using Specimen = Bundle<Key<SECRET>, Key<PUBLIC>>;
    //
    static_assert(std::semiregular<Specimen>);
    //
    static_assert(std::is_default_constructible_v<Specimen>);
    static_assert(std::is_copy_constructible_v<Specimen>);
    static_assert(std::is_move_constructible_v<Specimen>);
    static_assert(std::is_copy_assignable_v<Specimen>);
    static_assert(std::is_move_assignable_v<Specimen>);
    static_assert(std::is_swappable_v<Specimen>);
  }
}
#endiv
