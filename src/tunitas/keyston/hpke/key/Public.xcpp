// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::hpke::key {
  //
  // A public key.
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Design:
  //
  //   A new type so that overloading works.
  //
  // Usage:
  //
  //   It's public .. publish it!
  //
  struct Public;
}
#endiv
#divert <hpp>
#import tunitas.keyston.Opaque
namespace tunitas::keyston::hpke {
  namespace key {
    using std::move;
    inline auto swap(Public &, Public &) noexcept -> void;
  }
  struct key::Public : public Opaque<(1uz<<16)> {
    using Ancestor = Opaque<(1uz<<16)>;
    friend auto swap(Public &, Public &) noexcept -> void;
  public:
    explicit Public() = default;
    using Ancestor::Bounded; // Yes, you "just have to know" that the constructor name is such.
 };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke {
  auto key::swap(Public &a, Public &b) noexcept -> void {
    Public::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace key { }
}
#endiv
