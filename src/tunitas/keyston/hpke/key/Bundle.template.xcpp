// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.key.required
#forward tunitas.keyston.hpke.key.Public
#forward tunitas.keyston.hpke.key.Secret
#import tunitas.Tuple
namespace tunitas::keyston::hpke::key {
  //
  // A bundle for the keys
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   Specializations only.
  //
  // Usage:
  //
  //   Construct one, and consider it!
  //
  namespace [[eponymous]] bundle {
    namespace required {
      using namespace key::required;
      template<typename KEY> concept Keyable = same_as<KEY, key::Public> || same_as<KEY, key::Secret>;
      template<typename... KEYS> concept Countable = 1 <= sizeof...(KEYS) && sizeof...(KEYS) <= 2;
      template<typename... KEYS> concept Ordered = 1 == sizeof...(KEYS) || same_as<Tuple<KEYS...>, Tuple<Public, Secret>>;
      template<typename... KEYS> concept Bundleable = Countable<KEYS...> && (Keyable<KEYS> && ... ) && Ordered<KEYS...>;
    }
    template<typename... KEYS> requires required::Bundleable<KEYS...> struct Bundle;
  }
  using bundle::Bundle;
}
#endiv
