// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.key.Bundle.template
namespace tunitas::keyston::hpke::key::bundle {
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   Combine them.  Looky there.
  //
  // Usage:
  //
  //   Can't use designated initialization because of the inheritance.
  //
  template<> struct Bundle<key::Public, key::Secret>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.hpke.key.Bundle.Public
#import tunitas.keyston.hpke.key.Bundle.Secret
namespace tunitas::keyston::hpke::key::bundle {
  using std::move;
  inline auto swap(Bundle<key::Public,key::Secret> &, Bundle<key::Public,key::Secret> &) noexcept -> void;
  template<> struct Bundle<key::Public, key::Secret> : public Public, public Secret { };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke::key {
  auto bundle::swap(Bundle<key::Public,key::Secret> &a, Bundle<key::Public,key::Secret> &b) noexcept -> void {
    swap(static_cast<Public &>(a), b);
    swap(static_cast<Secret &>(a), b);
  }
}
#endiv
