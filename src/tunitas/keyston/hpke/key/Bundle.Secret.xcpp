// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.key.Bundle.template
#import tunitas.keyston.hpke.key.Secret
namespace tunitas::keyston::hpke::key::bundle {
  //
  // A bundle fo secret key material
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  // Design:
  //
  //   Suitable for combination in Bundle<Public,Secret>
  //
  // Usage:
  //
  //   Can't use designated initialization because of the ancestry.
  //
  struct Secret;
  template<> struct Bundle<key::Secret>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::hpke::key {
  struct bundle::Secret {
    key::Secret material{};
    // What else?  parameters, algo, flavor, expiry, a poem?
  };
  namespace bundle {
    using std::move;
    inline auto swap(Secret &, Secret &) noexcept -> void;
    inline auto swap(Bundle<key::Secret> &, Bundle<key::Secret> &) noexcept -> void;
    template<> struct Bundle<key::Secret> : public Secret { };
  }
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke::key {
  auto bundle::swap(Bundle<key::Secret> &a, Bundle<key::Secret> &b) noexcept -> void { swap(static_cast<Secret &>(a), b); }
  auto bundle::swap(Secret &a, Secret &b) noexcept -> void {
    swap(a.material, b.material);
  }
}
#endiv
