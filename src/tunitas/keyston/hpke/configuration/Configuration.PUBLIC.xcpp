// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.hpke.configuration.Configuration.template
namespace tunitas::keyston::hpke::configuration {
  //
  // A public HPKE configuration (as-packaged)
  //
  // Specification:
  //
  //   RFC 9180
  //   https://www.ietf.org/rfc/rfc9180.html
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Design:
  //
  //   Just what you see.
  //
  // Usage:
  //
  //   Use aggregate initialization.
  //   Use designated initialization.
  //
  template<> struct Configuration<PUBLIC>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.hpke.configuration.Basis
#import tunitas.keyston.hpke.id
#import tunitas.keyston.hpke.Key
namespace tunitas::keyston::hpke {
  namespace configuration {
    using std::move;
    inline auto swap(Configuration<PUBLIC> &, Configuration<PUBLIC> &) noexcept -> void;
  }
  template<> struct configuration::Configuration<configuration::PUBLIC> : public Basis {
    using Ancestor = Basis;
    friend auto swap(Configuration<PUBLIC> &, Configuration<PUBLIC> &) noexcept -> void;
  public:
    Key<PUBLIC> key{};
    [[implicit]] Configuration() = default;
    inline [[implicit]] Configuration(Ancestor const &, Key<PUBLIC>);
    inline [[implicit]] Configuration(id::Configuration, id::KEM, id::KDF, id::AEAD, Key<PUBLIC>);
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::hpke {
  auto configuration::swap(Configuration<PUBLIC> &a, Configuration<PUBLIC> &b) noexcept -> void {
    Configuration<PUBLIC>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
    swap(a.key, b.key);
  }
  namespace configuration {
    Configuration<PUBLIC>::Configuration(Ancestor const &a, Key<PUBLIC> k)
      : Ancestor{a}
      , key{move(key)}
    { }
    Configuration<PUBLIC>::Configuration(id::Configuration conf, id::KEM kem, id::KDF kdf, id::AEAD aead, Key<PUBLIC> key)
      : Ancestor{conf, kem, kdf, aead}
      , key{move(key)}
    { }
  }
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using tunitas::keyston::hpke::configuration::Configuration;
    using enum tunitas::keyston::hpke::Side;
    using Specimen = Configuration<PUBLIC>;
    //
    static_assert(std::semiregular<Specimen>);
    //
    static_assert(std::is_default_constructible_v<Specimen>);
    static_assert(std::is_copy_constructible_v<Specimen>);
    static_assert(std::is_move_constructible_v<Specimen>);
    static_assert(std::is_copy_assignable_v<Specimen>);
    static_assert(std::is_move_assignable_v<Specimen>);
    static_assert(std::is_swappable_v<Specimen>);
  }
}
#endiv
