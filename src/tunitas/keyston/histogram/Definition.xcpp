// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::histogram {
  //
  // The specification of the buckets of the histogram
  //
  // Specification:
  //
  //   This is a bundle of constants and types.
  //   You are looking for histogram::Boundaries, which is nearby
  //
  //   See the relationship among Histogram<-->Boundaries<-->Definition
  //   laid out in tunitas.keyston.histogram.Histogram
  //
  // Design:
  //
  //   Unusable as an object; it is a "packaged namespace"
  //
  // Usage:
  //
  //   auto something = [&encoded, ...somehow...]<Definition::Index... INDEX>(Definition::Sequence<INDEX...>) {
  //      return something::something_else::dark_side(encoded.at(INDEX))...};
  //   }(Definition::sequence());
  //
  struct Definition;
}
#endiv
#divert <hpp>
#import std.index_sequence
#import std.make_index_sequence
#import std.size_t
struct tunitas::keyston::histogram::Definition {
  inline static constexpr auto COUNT = Items{100u};
  template<Index... INDEX> using Sequence = std::index_sequence<INDEX...>;
  static constexpr auto sequence() { return std::make_index_sequence<COUNT.count()>{}; }
  Definition() = delete;
  Definition(Definition const &) = delete;
};
#endiv
