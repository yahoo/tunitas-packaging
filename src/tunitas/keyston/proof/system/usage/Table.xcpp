// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.proof.system.required.Table
#forward tunitas.keyston.proof.system.Length
#import nonstd.required.InstanceOf
namespace tunitas::keyston::proof::system::usage {
  //
  // Does this type have all the components of a Table?
  // This is diagnosable using the complete type of Table<...>
  //
  template<typename TABLE> concept Table = required::Table<TABLE> && requires(TABLE) {
    typename TABLE::Randomness;
    typename TABLE::Randomness::Prove;
    typename TABLE::Randomness::Query;
    typename TABLE::Randomness::Joint;
    //
    typename TABLE::Message;
    typename TABLE::Message::Input;
    typename TABLE::Message::Output;
    typename TABLE::Message::Proof;
    //
    requires required::InstanceOf<typename TABLE::Randomness::Prove, system::Length>;
    requires required::InstanceOf<typename TABLE::Randomness::Query, system::Length>;
    requires required::InstanceOf<typename TABLE::Randomness::Joint, system::Length>;
    requires required::InstanceOf<typename TABLE::Message::Input, system::Length>;
    requires required::InstanceOf<typename TABLE::Message::Output, system::Length>;
    requires required::InstanceOf<typename TABLE::Message::Proof, system::Length>;
    requires required::InstanceOf<typename TABLE::Message::Verifier, system::Length>;
  };
}
#endiv
#divert <cpp>
#import tunitas.keyston.Field
#import tunitas.keyston.proof.system.Table
namespace {
  namespace testate {
    namespace usage = tunitas::keyston::proof::system::usage;
    using namespace tunitas::keyston::proof::system;
    using tunitas::keyston::Field;
    //
    static_assert(usage::Table<Table<Field<64>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
    static_assert(usage::Table<Table<Field<128>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
    static_assert(usage::Table<Table<Field<255>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
  }
}
#endiv
