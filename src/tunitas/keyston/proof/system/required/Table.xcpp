// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.proof.system.Table
#import tunitas.keyston.proof.system.required.Field
namespace tunitas::keyston::proof::system::required {
  //
  // Is this type a proof system table?
  // This MUST be diagnosable without the complete type of Table<...>
  //
  // We can't use InstanceOf<...> here because of the NTTP (Non-Type Template Parameters)
  // This is the moral equivalent of InstanceOf<...>
  //
  namespace [[eponymous]] table {
    template<typename FIELD, typename PROVE, typename QUERY, typename JOINT, typename INPUT, typename OUTPUT, typename PROOF, typename VERIFIER> concept Arguments = requires(FIELD, PROVE, QUERY, JOINT, INPUT, OUTPUT, PROOF, VERIFIER) {
      requires Field<FIELD>;
      requires same_as<PROVE, system::Prove>;
      requires same_as<QUERY, system::Query>;
      requires same_as<JOINT, system::Joint>;
      requires same_as<INPUT, system::Input>;
      requires same_as<OUTPUT, system::Output>;
      requires same_as<PROOF, system::Proof>;
      requires same_as<VERIFIER, system::Verifier>;
    };
    template<typename TABLE> concept Table = requires(TABLE) {
      { []<typename FIELD, auto PROVE, auto QUERY, auto JOINT, auto INPUT, auto OUTPUT, auto PROOF, auto VERIFIER>(system::Table<FIELD, PROVE, QUERY, JOINT, INPUT, OUTPUT, PROOF, VERIFIER> *)
        requires Arguments<FIELD, decltype(PROVE), decltype(QUERY), decltype(JOINT), decltype(INPUT), decltype(OUTPUT), decltype(PROOF), decltype(VERIFIER)>
        {}(static_cast<TABLE *>(nullptr)) };
    };
  }
  using table::Table;
}
#endiv
#divert <cpp>
#import tunitas.keyston.Field
namespace {
  namespace testate {
    namespace required = tunitas::keyston::proof::system::required;
    using namespace tunitas::keyston::proof::system;
    using tunitas::keyston::Field;
    //
    static_assert(required::Table<Table<Field<64>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
    static_assert(required::Table<Table<Field<128>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
    static_assert(required::Table<Table<Field<255>, Prove{}, Query{}, Joint{}, Input{1}, Output{1}, Proof{1}, Verifier{1}>>);
  }
}
#endiv
