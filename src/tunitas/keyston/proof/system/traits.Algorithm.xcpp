// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::proof::system::traits {
  //
  // The diagnosis of whether a type is or is not an algorithm.
  // This is used by required::Algorithm and other "fuzzy forward" situations.
  // See also usage::Algorithm<ALGORITHM> for the full set of conditions.
  //
  template<typename> struct Algorithm;
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
#forward tunitas.keyston.prio.Algorithm
#forward tunitas.keyston.poplar.Algorithm
namespace tunitas::keyston::proof::system {
  template<typename> struct traits::Algorithm : public std::false_type { };
  namespace traits {
    template<> struct Algorithm<prio::Algorithm<prio::Name::COUNT>> : public std::true_type { };
    template<> struct Algorithm<prio::Algorithm<prio::Name::SUM>> : public std::true_type { };
    template<> struct Algorithm<prio::Algorithm<prio::Name::HISTOGRAM>> : public std::true_type { };
    template<> struct Algorithm<poplar::Algorithm<poplar::Name::ONE>> : public std::true_type { };
  }
}
#endiv
