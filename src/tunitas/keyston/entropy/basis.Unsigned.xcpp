// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::entropy::basis {
  //
  // The unsigned-basis of many entropy providers
  //
  // Specification:
  //
  //   The unsigned integer aspect ("draw") of an entropy source.
  //   It is what it does.
  //   Satisfies most of usage::Entropy<...>
  //   Optional in descendants; provides the definitions and a trivial implementation.
  //
  // Design:
  //
  //   Descendants only.
  //   The boilerplate.
  //
  //   draw() can't be constexpr becuase in other implementations it is not (elsewhere it pulls from "true" entropy)
  //
  // Usage:
  //
  //   See the descendants: None, Serial, Sequence.
  // 
  struct Unsigned;
}
#endiv
#divert <hpp>
#import nonstd.units.cast
class tunitas::keyston::entropy::basis::Unsigned {
protected:
  ~Unsigned() = default;
public:
  using Draw = unsigned int;
  inline static constexpr auto const BYTES = Bytes{sizeof(Draw)};
  inline static constexpr auto const BITS = nonstd::units::cast<Bits>(BYTES);
  inline auto entropy() const noexcept -> double { return {}; }
  inline auto draw() -> Draw                     { return {}; }
  explicit Unsigned() = default;
  Unsigned(Unsigned const &) = delete;
  Unsigned &operator=(Unsigned const &) = delete;
};
#endiv
