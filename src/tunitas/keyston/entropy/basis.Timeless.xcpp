// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::entropy::basis {
  //
  // The time-basis of many entropy providers
  //
  // Specification:
  //
  //   No time;; it is what it does.
  //   The time ("since)" aspect of an entropy source.
  //   Satisfies most of usage::Entropy<...>
  //   Optional in descendants; provides the definitions and a trivial implementation.
  //
  // Design:
  //
  //   Descendants only.
  //   The boilerplate.
  //
  //   now() can't be constexpr becuase in other implementations it is not (elsewhere it pulls from the clock)
  //
  // Usage:
  //
  //   See the descendants: None (others?)
  // 
  struct Timeless;
}
#endiv
#divert <hpp>
#import tunitas.keyston.time.Duration
class tunitas::keyston::entropy::basis::Timeless {
protected:
  ~Timeless() = default;
public:
  using Since = time::Clock::duration;
  inline static auto now() -> Since { return {}; }
  explicit Timeless() = default;
  Timeless(Timeless const &) = delete;
  Timeless &operator=(Timeless const &) = delete;
};
#endiv
