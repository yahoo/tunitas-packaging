// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::entropy {
  //
  // Not much entroyp at all.
  //
  // Specification:
  //
  //   Rhymes with Source but has no entropy
  //
  // Design:
  //
  //   Some
  //
  // Usage:
  //
  //   Some.   Er ... maybe for testing.
  // 
  struct Serial;
}
#endiv
#divert <hpp>
#import tunitas.keyston.time.Clock
#import nonstd.units.cast
struct tunitas::keyston::entropy::Serial {
  using Draw = unsigned int;
  using Since = time::Clock::duration;
  inline static constexpr auto const BYTES = Bytes{sizeof(Draw)};
  inline static constexpr auto const BITS = nonstd::units::cast<Bits>(BYTES);
  inline auto entropy() const noexcept -> double { return {}; }
  inline auto draw() -> Draw                     { return ++serial; } // never returns 0
  inline static auto now() -> Since              { return time::Clock::now().time_since_epoch(); }
  explicit Serial() = default;
  Serial(Serial const &) = delete;
  Serial &operator=(Serial const &) = delete;
private:
  static Draw serial;
};
#endiv
#divert <cpp>
namespace tunitas::keyston::entropy {
  Serial::Draw Serial::serial{};
}
#import tunitas.keyston.entropy.usage.Entropy
namespace {
  namespace testate {
    namespace usage = tunitas::keyston::entropy::usage;
    using tunitas::keyston::entropy::Serial;
    static_assert(usage::Entropy<Serial>);
  }
}
#endiv
