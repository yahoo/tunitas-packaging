// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::entropy {
  //
  // The common anchor entropy source
  //
  // Specification:
  //
  //   Basically a singleton.
  //   Type-erased; i.e. delegates all the type machinations to Generation.
  //
  //   Combines the bits-entropy and the time-entropy interaces.
  //   Suitable for use as an entropy source in nearby Generation<NONCE, ENTROPY>
  //
  // Design:
  //
  //   Not copyable.
  //   Has state inherent in std::random_device.
  //
  //   The min() and max() of the std::random_device are not surfaced here.
  //   Instead nearby Device<N> carries that.
  //
  // Constraints:
  //
  //   We presume that this thing holds an open file descriptor, so we
  //   (a) can't have to many of them
  //   (b) shouldn't create & destroy them at high frequency
  //   (c) can't copy them.
  //
  //   See the problematics around genreator::Device
  //
  // Usage:
  //
  //   auto entropy = Source{};
  //   auto generate1 = Generator<Something>{entropy};
  //   auto generate2 = Generator<Something_Else>{entropy};
  //   auto generate3 = Generator<A_Secret_Third_Thing>{entropy};
  // 
  struct Source;
}
#endiv
#divert <hpp>
#import std.random_device
#import tunitas.keyston.time.Clock
#import nonstd.units.cast
class tunitas::keyston::entropy::Source {
  std::random_device the_dev_random_device{};
public:
  using Draw = std::random_device::result_type;
  using Since = std::chrono::nanoseconds;
  inline static constexpr auto const BYTES = Bytes{sizeof(Draw)};
  inline static constexpr auto const BITS = nonstd::units::cast<Bits>(BYTES);
  auto entropy() const noexcept -> double { return the_dev_random_device.entropy(); }
  auto draw() -> Draw                     { return the_dev_random_device(); }
  static auto now() -> Since              { return time::Clock::now().time_since_epoch(); }
  explicit Source() = default;
};
#endiv
#divert <cpp>
#import tunitas.keyston.entropy.usage.Entropy
namespace {
  namespace testate {
    namespace usage = tunitas::keyston::entropy::usage;
    using tunitas::keyston::entropy::Source;
    static_assert(usage::Entropy<Source>);
  }
}
#endiv
