// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::entropy {
  //
  // No entroyp at all.
  //
  // Specification:
  //
  //   Rhymes with Source but has no entropy
  //
  // Design:
  //
  //   No.
  //
  // Usage:
  //
  //   No, don't use it.
  //   Er ... maybe use it for some testing.
  // 
  struct None;
}
#endiv
#divert <hpp>
#import tunitas.keyston.time.Clock
struct tunitas::keyston::entropy::None {
  using Bits = unsigned int;
  using Since = time::Clock::duration;
  inline auto entropy() const noexcept -> double { return {}; }
  inline auto draw() -> Bits                     { return {}; }
  inline static auto now() -> Since              { return {}; }
  explicit None() = default;
  None(None const &) = delete;
  None &operator=(None const &) = delete;
};
#endiv
#divert <cpp>
#import tunitas.keyston.entropy.required.Entropy
namespace {
  namespace testate {
    namespace required = tunitas::keyston::entropy::required;
    using namespace tunitas::keyston::entropy;
    static_assert(required::Entropy<None>);
    static_assert(std::is_default_constructible_v<None>);
    static_assert(not std::is_copy_constructible_v<None>);
    static_assert(not std::is_move_constructible_v<None>);
    static_assert(not std::is_copy_assignable_v<None>);
    static_assert(not std::is_move_assignable_v<None>);
    static_assert(not std::is_swappable_v<None>);
  }
}
#endiv
