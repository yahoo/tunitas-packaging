// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.get.required.Small
namespace tunitas::keyston::field::get {
  //
  // Will the value in CARRIER fit into the small (unsigned) integer type?
  //
  // Specification:
  //
  //   What it says.
  //
  // Design:
  //
  //   Yes. Yeah No. No Yeah.
  //   Specializations mostly.
  //   Where the underlying carrier provides a more efficient interface then use that.
  //
  // Usage:
  //
  //   Hack the Spew
  //
  template<required::Small> struct Fits;
}
#endiv
#divert <hpp>
#import tunitas.keyston.field.get.required.Carrier
#import nonstd.numeric_limits
namespace tunitas::keyston::field {
  template<required::Small SMALL> struct get::Fits {
    using Value = SMALL;
    using Limits = nonstd::numeric_limits<Value>;
    template<required::Carrier CARRIER> inline static auto fit(CARRIER const &) -> bool;
  };
  namespace get {
#if 0 // NO SUCH (use the generic template)
    template<> template<required::Carrier CARRIER> auto Fits<char unsigned>::fit(CARRIER const &) -> bool;
#endif
    template<> template<required::Carrier CARRIER> auto Fits<int short unsigned>::fit(CARRIER const &) -> bool;
    template<> template<required::Carrier CARRIER> auto Fits<int unsigned>::fit(CARRIER const &) -> bool;
    template<> template<required::Carrier CARRIER> auto Fits<int long unsigned>::fit(CARRIER const &) -> bool;
    template<> template<required::Carrier CARRIER> auto Fits<int long long unsigned>::fit(CARRIER const &) -> bool;
    template<> template<required::Carrier CARRIER> auto Fits<uint128_t>::fit(CARRIER const &) -> bool;
  }
}
#endiv
#divert <ipp>
#import tunitas.number.mp.convert
namespace tunitas::keyston::field::get {
  template<required::Small _> template<required::Carrier CARRIER> auto Fits<_>::fit(CARRIER const &impl) -> bool { return CARRIER{Limits::min()} <= impl && impl <= CARRIER{Limits::max()}; }
#if 0 // NO SUCH ... WHY NOT?
  template<> template<required::Carrier CARRIER> auto Fits<char unsigned>::fit(CARRIER const &impl) -> bool { return impl.fits_uchar_p(); }
#endif
  template<> template<required::Carrier CARRIER> auto Fits<int short unsigned>::fit(CARRIER const &impl) -> bool { return impl.fits_ushort_p(); }
  template<> template<required::Carrier CARRIER> auto Fits<int unsigned>::fit(CARRIER const &impl) -> bool       { return impl.fits_uint_p(); }
  template<> template<required::Carrier CARRIER> auto Fits<int long unsigned>::fit(CARRIER const &impl) -> bool  { return impl.fits_ulong_p(); }
  template<> template<required::Carrier CARRIER> auto Fits<int long long unsigned>::fit(CARRIER const &impl) -> bool {
    if constexpr (sizeof (Value) == sizeof (int long unsigned)) {
      return impl.fits_ulong_p();
    } else {
      return Limits::min() <= impl && impl <= Limits::max();
    }
  }
  template<> template<required::Carrier CARRIER> auto Fits<uint128_t>::fit(CARRIER const &impl) -> bool { return number::mp::convert<CARRIER>(Limits::min()) <= impl && impl <= number::mp::convert<CARRIER>(Limits::max()); }
}
#endiv
