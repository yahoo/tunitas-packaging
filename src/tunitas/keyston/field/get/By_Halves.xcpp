// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.get.required.Medium
namespace tunitas::keyston::field::get {
  //
  // Extract the medium-sized (unsigned) integer from the bignum
  //
  // Specification:
  //
  //   What it says.
  //
  // Design:
  //
  //   Specialize on the mediumness of it all.
  //   Pull the values out in parts because the underlying API doesn't support the one-shot.
  //
  // Background:
  //
  //   Expected:    LP64 (gcc x86_64) ILP64 (untested)
  //   Problematic: ILP32, LLP64 (untested)
  //
  //   https://en.wikipedia.org/wiki/64-bit_computing
  //   https://en.wikipedia.org/wiki/128-bit_computing
  //
  // Usage:
  //
  //   Hack the Spew.
  //
  template<required::Medium> struct By_Halves;
}
#endiv
#divert <hpp>
#forward tunitas.keyston.field.get.Fits
#import tunitas.keyston.field.get.required.Carrier
namespace tunitas::keyston::field {
  template<field::required::Medium MEDIUM> struct get::By_Halves {
    using Result = MEDIUM;
    template<required::Carrier CARRIER> inline static auto get(CARRIER const &) -> Result;
  protected:
    using Fits = get::Fits<Result>;
    template<required::Carrier CARRIER> inline static auto by_halves(CARRIER const &signless) -> Result;
  };
}
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Range
#import tunitas.keyston.field.get.Fits
#import tunitas.keyston.field.get.Extract
namespace tunitas::keyston::field::get {
  template<required::Medium _> template<required::Carrier CARRIER> auto By_Halves<_>::by_halves(CARRIER const &signless) -> Result {
    static_assert(sizeof (Result)/2 <= sizeof (decltype(CARRIER{}.get_ui())));
    constexpr auto const SHIFT = 8/2 * sizeof (Result);
    auto const MASK = (CARRIER{1u} << SHIFT) - 1;
    // Casting back to CARRIER forces the evaluation
    auto const lo = CARRIER{signless & MASK}.get_ui();
    auto const hi = CARRIER{(signless >> SHIFT) & MASK}.get_ui();
    return (Result{hi} << SHIFT) | Result{lo};
  }
  template<required::Medium _> template<required::Carrier CARRIER> auto By_Halves<_>::get(CARRIER const &impl) -> Result {
    if (!Fits::fit(impl) || impl < 0) {
      throw exception::Range{"by_Halves<...>::get()"};
    } else {
      if (0 == impl) {
        return {};
      } else {
        return by_halves(impl);
      }
    }
  }
}
#endiv
