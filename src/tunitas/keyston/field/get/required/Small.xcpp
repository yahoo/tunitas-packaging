// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.integer.Unsigned
namespace tunitas::keyston::field::required {
  //
  // These are the unsigned "small" integers.
  // ... by virtue of not being the "big" integers.
  //
  // Specification:
  //
  //   Unsigned integers only.
  //
  // Background:
  //
  //   Also see the documentariat in Medium<INTEGER>
  //
  template<typename INTEGER> concept Small = required::integer::Unsigned<INTEGER>;
}
#endiv
#divert <cpp>
#import nonstd.integers
namespace {
  namespace testate {
    namespace required = tunitas::keyston::field::get::required;
    using namespace nonstd::integers;
    //
    static_assert(required::Small<char unsigned>);
    static_assert(required::Small<int short unsigned>);
    static_assert(required::Small<int unsigned>);
    static_assert(required::Small<int long unsigned>);
    static_assert(required::Small<int long long unsigned>);
    static_assert(required::Small<uint128_t>);
    //
    static_assert(!required::Small<char signed>);
    static_assert(!required::Small<int short signed>);
    static_assert(!required::Small<int signed>);
    static_assert(!required::Small<int long signed>);
    static_assert(!required::Small<int long long signed>);
    static_assert(!required::Small<int128_t>);
  }
}
#endiv
