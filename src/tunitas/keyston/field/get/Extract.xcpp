// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.get.required.Small
namespace tunitas::keyston::field::get {
  //
  // Extract the small (unsigned) integer representation, if possible.
  //
  // Specification:
  //
  //   What it says.
  //
  // Design:
  //
  //   Specialize on the smallness of it all.
  //
  // Usage:
  //
  //   Check if it fits
  //   Extract the small one.
  //
  template<required::Small> struct Extract;
  template<> struct Extract<int long long unsigned>;
  template<> struct Extract<uint128_t>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.field.get.By_Halves
#import tunitas.keyston.field.get.Fits
#import tunitas.keyston.field.get.Extract
#import tunitas.keyston.field.get.required.Carrier
namespace tunitas::keyston::field {
  template<field::required::Small SMALL> struct get::Extract {
    using Result = SMALL;
    template<required::Carrier CARRIER> inline static auto get(CARRIER const &impl) -> Result;
    using Value = SMALL;
  private:
    using Fits = get::Fits<Result>;
  };
  namespace get {
    template<> class Extract<int long long unsigned> : public By_Halves<int long long unsigned> {
      using Ancestor = By_Halves<int long long unsigned>;
    public:
      template<required::Carrier CARRIER> inline static auto get(CARRIER const &impl) -> Result;
      using Value = int long long unsigned;
    };
    template<> struct Extract<uint128_t> : public By_Halves<uint128_t> {
      using Value = uint128_t;
    };
  }
}
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Range
namespace tunitas::keyston::field::get {
  template<required::Small _> template<required::Carrier CARRIER> auto Extract<_>::get(CARRIER const &impl) -> Result {
    if (!Fits::fit(impl) || impl < 0) {
      throw exception::Range{"Extract<...>::get()"};
    } else {
      return Result(impl.get_ui());
    }
  }
  template<required::Carrier CARRIER> auto Extract<int long long unsigned>::get(CARRIER const &impl) -> Result {
    if constexpr (sizeof (int long long unsigned) == sizeof (int long unsigned)) {
      // All reasonable architectures are LP64 or similar
      return Extract<int long unsigned>::get(impl);
    } else {
      return Ancestor::get(impl);
    }
  }
}
#endiv
