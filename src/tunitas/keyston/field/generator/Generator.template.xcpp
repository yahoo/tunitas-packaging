// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.generator.required.Generator
#import tunitas.keyston.field.generator.traits.Common
#include <hpp/tunitas.keyston.field.generator.traits.Common>
#import tunitas.keyston.field.generator.required.Element
#import tunitas.keyston.field.generator.required.Subelement
namespace tunitas::keyston::field::generator {
  //
  // A generator of a group.
  //
  // Specification:
  //
  //   irtf-cfrg-vdaf Verifiable Distributed Aggregation Functions
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-parameters-2 
  //   Section 6.3.1 Parameters
  //
  // Design:
  //
  //   The default implementation (template) and is constexpr becaues it expects smallints
  //
  // Usage:
  //
  //   constexpr auto gen() -> Value { return Generator{}(); }
  //
  template<auto BASE, auto EXPONENT, auto MODULUS,
           required::Element ELEMENT = typename traits::Common<BASE, EXPONENT, MODULUS>::Type,
           required::Subelement SUBELEMENT = ELEMENT>
  requires required::Generator<BASE, EXPONENT, MODULUS, ELEMENT, SUBELEMENT> struct Generator;
}
#endiv
#divert <hpp>
#import tunitas.keyston.field.generator.Triple
#import tunitas.Optional
namespace tunitas::keyston::field {
  template<auto THE_BASE, auto THE_EXPONENT, auto THE_MODULUS, generator::required::Element ELEMENT, generator::required::Subelement SUBELEMENT>
  requires generator::required::Generator<THE_BASE, THE_EXPONENT, THE_MODULUS, ELEMENT, SUBELEMENT>
  class generator::Generator : public Triple<THE_BASE, THE_EXPONENT, THE_MODULUS, SUBELEMENT> {
    using Ancestor = Triple<THE_BASE, THE_EXPONENT, THE_MODULUS, SUBELEMENT>;
  public:
    using Value = ELEMENT;
    inline constexpr auto operator()() const -> Value;
  protected:
    mutable Optional<Value> generated{};
  };
}
#endiv
#divert <ipp>
#import tunitas.integer.powm
namespace tunitas::keyston::field::generator {
  //
  // As used in Field<64>
  // 
  // MODULUS = 2^32 * 4294967295 + 1;
  // GENERATOR = 7^4294967295               (pesky ... /usr/bin/bc won't compute this)
  //
  // Witness
  //
  //   bc
  //   7^4294967295
  //   Runtime error (func=(main), adr=16): exponent too large in raise
  //
  template<auto B, auto X, auto M, required::Element E, required::Subelement S> constexpr auto Generator<B,X,M,E,S>::operator()() const -> Value {
    if (generated) {
      return *generated;
    } else {
      generated = integer::powm(Ancestor::BASE, Ancestor::EXPONENT, Ancestor::MODULUS);
      return *generated;
    }
  }
}
#endiv
