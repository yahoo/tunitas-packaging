// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.field.required.Element
#import tunitas.keyston.field.required.Vector
namespace tunitas::keyston::field::usage {
  //
  // Is this type (a descendant of) a Vector<?
  //
  // Design:
  //
  //   Whereas there is an NTTP (Non-Type Template Parameter), the usual nonstd::required::InstanceOf will not work.
  //   This is diagnosable only with the complete type of VECTOR
  //
  // Usage:
  //
  //   Yes.
  //
  template<typename VECTOR> concept Vector = required::Vector<VECTOR> && requires(VECTOR) {
    typename VECTOR::Value;
    requires required::Element<typename VECTOR::Value>;
  };
}
#endiv
#divert <cpp>
#import tunitas.keyston.field.vector.Fixed
#import tunitas.keyston.field.Element
namespace {
  namespace testate {
    namespace usage = tunitas::keyston::field::usage;
    using tunitas::keyston::field::vector::Fixed;
    using tunitas::keyston::field::Element;
    static_assert(usage::Vector<Fixed<Element<64>, 1>>);
    static_assert(usage::Vector<Fixed<Element<128>, 1>>);
    static_assert(usage::Vector<Fixed<Element<255>, 1>>);
  }
}
#endiv
