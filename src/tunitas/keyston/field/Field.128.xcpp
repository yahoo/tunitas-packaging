// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.Field.template
namespace tunitas::keyston::field {
  //
  // See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-parameters-2
  // Section 6.1.3 Parameters
  //
  // Derivation:
  //
  //   4611686018427387897
  //   obase=16
  //   3FFFFFFFFFFFFFF9
  //
  //   2^66 * 4611686018427387897 + 1
  //   340282366920938462946865773367900766209
  //   obase=16
  //   FFFFFFFFFFFFFFE40000000000000001
  //                 ^^
  //                 ||
  //                 \\------ huh... 0xe4
  //  
  template<> struct Field<128>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::field {
  template<> struct Field<128> {
    using Element = field::Element<128>;
    using Value = Element;
    using Underlying = traits::Element<Element>::Underlying;
    using Temporary = traits::Element<Element>::Temporary;
    template<Size CAPACITY> using Vector = field::Vector<Element, CAPACITY>;
    inline static constexpr Underlying const MODULUS = (Underlying{1} << 66) * 4611686018427387897 + 1;
    inline static constexpr auto const ENCODED_SIZE = Bytes{16u};
    static constexpr auto generator() -> Element; // dubious since Generator caches its result but gen() does not.
    [[deprecated("buy a vowel, spell it out! Instead prefer Field<128>::generator()")]] static constexpr auto gen() -> Element { return generator(); }
    class Generator;
  };
  class Field<128>::Generator : public numeric::Generator<7lu, 4611686018427387897llu, MODULUS> {
    using Ancestor = numeric::Generator<7lu, 4611686018427387897llu, MODULUS>;
  public:
    constexpr auto operator()() const -> Element { return Element{Ancestor::operator()()}; }
    inline static constexpr Underlying const ORDER = Underlying{1} << 66;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::field {
  constexpr auto Field<128>::generator() -> Element { return Element{Generator{}()}; }
}
#endiv
