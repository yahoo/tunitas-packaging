// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.Field.template
namespace tunitas::keyston::field {
  //
  // See https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html#name-parameters-2
  // Section 6.1.3 Parameters
  //
  // Derivation:
  //
  //   4294967295
  //   obase=16
  //   FFFFFFFF
  //
  //   2^32 * 4294967295 + 1
  //   18446744069414584321
  //   obase=16
  //   FFFFFFFF00000001
  //
  template<> struct Field<64>;
}
#endiv
#divert <hpp>
namespace tunitas::keyston::field {
  template<> struct Field<64> {
    using Element = field::Element<64>;
    using Value = Element;
    using Underlying = traits::Element<Element>::Underlying;
    using Temporary = traits::Element<Element>::Temporary;
    template<Size CAPACITY> using Vector = field::Vector<Element, CAPACITY>;
    inline static constexpr Underlying const MODULUS = (Underlying{1}<<32) * 4294967295 + 1;
    inline static constexpr auto const ENCODED_SIZE = Bytes{8u};
    static constexpr auto generator() -> Element;
    [[deprecated("buy a vowel, spell it out! Instead prefer Field<64>::generator()")]] static constexpr auto gen() -> Element { return generator(); }
    class Generator;
  };
  class Field<64>::Generator : public numeric::Generator<7lu, 4294967295lu, MODULUS> {
    using Ancestor = numeric::Generator<7lu, 4294967295lu, MODULUS> ;
  public:
    constexpr auto operator()() const -> Element { return Element{Ancestor::operator()()}; }
    inline static constexpr Underlying ORDER = Underlying{1} << 32;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::field {
  constexpr auto Field<64>::generator() -> Element { return Element{Generator{}()}; }
}
#endiv
