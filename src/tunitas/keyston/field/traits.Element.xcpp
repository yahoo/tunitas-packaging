// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.field.Element
namespace tunitas::keyston::field::traits {
  //
  // identify the field elements and give some early properties
  //
  //   enums are derived from integers .......... via the enum class definition.
  //   classes are derived from other classes ... via the class ancestor.
  //
  // to multiply two n-precision integers, one requires a (2*)n-precision intermediate result.
  //
  // specializations only.
  //
  template<typename> struct Element;
  template<> struct Element<field::Element<64>>;
  template<> struct Element<field::Element<128>>;
  template<> struct Element<field::Element<255>>;
}
#endiv
#divert <hpp>
#import std.false_type
#import std.true_type
#forward tunitas.keyston.field.Field
namespace tunitas::keyston::field {
  template<typename TYPE> struct traits::Element : public std::false_type { };
  namespace traits {
    template<> struct Element<field::Element<64>> : public std::true_type {
      using Value = field::Element<64>;
      using Underlying = std::underlying_type_t<Value>;
      using Temporary = element::uint128_t;
      using Field = field::Field<64>;
    };
    template<> struct Element<field::Element<128>> : public std::true_type {
      using Value = field::Element<128>;
      using Underlying = std::underlying_type_t<Value>;
      using Temporary = element::uint256_t;
      using Field = field::Field<128>;
    };
    template<> struct Element<field::Element<255>> : public std::true_type {
      using Value = field::Element<255>;
      using Underlying = element::uint256_t;
      using Temporary = element::uint512_t;
      using Field = field::Field<255>;
    };
  }
}
#endiv
