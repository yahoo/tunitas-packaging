// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.required.Element
namespace tunitas::keyston::field {
  //
  // A vector over the field
  //
  // Specification:
  //
  //   SIMD
  //   semiregular
  //
  // Design:
  //
  //   Fixed length.
  //   Use a new type ow that ADL will find the operations. 
  //
  //   Can't make much of this constexpr because number::Integer is not constexpr
  //
  // Usage:
  //
  //   Yes
  //.
  template<required::Element, Size CAPACITY> struct Vector;
}
#endiv
#divert <hpp>
#import std.strong_ordering
#import tunitas.keyston.array.Fixed
namespace tunitas::keyston {
  namespace field {
    using std::move;
    template<required::Element ELEMENT, Size CAPACITY> inline auto swap(Vector<ELEMENT, CAPACITY> &, Vector<ELEMENT, CAPACITY> &) noexcept -> void;
    //
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator==(Vector<ELEMENT, CAPACITY> const &, Vector<ELEMENT, CAPACITY> const &) -> bool;
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator<=>(Vector<ELEMENT, CAPACITY> const &, Vector<ELEMENT, CAPACITY> const &) -> std::strong_ordering;
    //
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator+(Vector<ELEMENT, CAPACITY> const &a) -> Vector<ELEMENT, CAPACITY> { return a; }
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator-(Vector<ELEMENT, CAPACITY> const &) -> Vector<ELEMENT, CAPACITY>;
    //
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator+(Vector<ELEMENT, CAPACITY> const &, Vector<ELEMENT, CAPACITY> const &) -> Vector<ELEMENT, CAPACITY>;
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator-(Vector<ELEMENT, CAPACITY> const &, Vector<ELEMENT, CAPACITY> const &) -> Vector<ELEMENT, CAPACITY>;
    //
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator*(ELEMENT a, Vector<ELEMENT, CAPACITY> const &b) -> Vector<ELEMENT, CAPACITY> { return b * a; }
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator*(Vector<ELEMENT, CAPACITY> const &, ELEMENT) -> Vector<ELEMENT, CAPACITY>;
    //
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator/(Vector<ELEMENT, CAPACITY> const &, ELEMENT) -> Vector<ELEMENT, CAPACITY>;
    template<required::Element ELEMENT, Size CAPACITY> inline auto operator%(Vector<ELEMENT, CAPACITY> const &, ELEMENT) -> Vector<ELEMENT, CAPACITY>;
  }
  template<field::required::Element ELEMENT, Size CAPACITY> struct field::Vector : public array::Fixed<ELEMENT, CAPACITY> {
    using Ancestor = array::Fixed<ELEMENT, CAPACITY>;
  public:
    constexpr Vector() = default;
    using Ancestor::Fixed;
    constexpr [[implicit]] Vector(Ancestor const &);
    //
    auto operator=(Vector const &) -> Vector & = default;
    using Ancestor::operator=;
    //
    inline auto operator+=(Vector const &) -> Vector &;
    inline auto operator-=(Vector const &) -> Vector &;
    inline auto operator*=(typename Ancestor::Value) -> Vector &;
    inline auto operator/=(typename Ancestor::Value) -> Vector &;
    inline auto operator%=(typename Ancestor::Value) -> Vector &;
#if 0 // these can't be defaulted (think about it ... how would the compiler know what to do?)
    auto operator==(Vector const &) const -> bool = default;
    auto operator<=>(Vector const &) const -> std::strong_ordering = default;
#endif
  };
}
#import nonstd.container.Traits.tunitas.keyston.field.Vector.ELEMENT.CAPACITY
#endiv
#divert <ipp>
#import tunitas.keyston.exception.Domain
#import std.equal
#import std.lexicographical_compare_three_way
namespace tunitas::keyston {
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::swap(Vector<ELEMENT, CAPACITY> &a, Vector<ELEMENT, CAPACITY> &b) noexcept -> void {
    typename Vector<ELEMENT, CAPACITY>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator==(Vector<ELEMENT, CAPACITY> const &a, Vector<ELEMENT, CAPACITY> const &b) -> bool { return std::equal(a.begin(), a.end(), b.begin(), b.end()); }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator<=>(Vector<ELEMENT, CAPACITY> const &a, Vector<ELEMENT, CAPACITY> const &b) -> std::strong_ordering { return std::lexicographical_compare_three_way(a.begin(), a.end(), b.begin(), b.end()); }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator-(Vector<ELEMENT, CAPACITY> const &a) -> Vector<ELEMENT, CAPACITY> { return Vector<ELEMENT, CAPACITY>{} - a; }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator+(Vector<ELEMENT, CAPACITY> const &a, Vector<ELEMENT, CAPACITY> const &b) -> Vector<ELEMENT, CAPACITY> {
    auto c{a};
    c += b;
    return c;
  }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator-(Vector<ELEMENT, CAPACITY> const &a, Vector<ELEMENT, CAPACITY> const &b) -> Vector<ELEMENT, CAPACITY> {
    auto c{a};
    c -= b;
    return c;
  }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator*(Vector<ELEMENT, CAPACITY> const &a, ELEMENT b) -> Vector<ELEMENT, CAPACITY> {
    auto c{a};
    c *= b;
    return c;
  }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator/(Vector<ELEMENT, CAPACITY> const &a, ELEMENT b) -> Vector<ELEMENT, CAPACITY> {
    auto c{a};
    c /= b;
    return c;
  }
  template<field::required::Element ELEMENT, Size CAPACITY> auto field::operator%(Vector<ELEMENT, CAPACITY> const &a, ELEMENT b) -> Vector<ELEMENT, CAPACITY> {
    auto c{a};
    c %= b;
    return c;
  }
  namespace field {
    template<required::Element E, Size C> constexpr Vector<E,C>::Vector(Ancestor const &a) : Ancestor{a} { }
    template<required::Element E, Size C> auto Vector<E,C>::operator+=(Vector const &other) -> Vector & {
      auto &self{*this};
      for (auto i : std::views::iota(0u, Ancestor::size())) {
        self[i] += other[i];
      }
      return self;
    }
    template<required::Element E, Size C> auto Vector<E,C>::operator-=(Vector const &other) -> Vector & {
      auto &self{*this};
      for (auto i : std::views::iota(0u, Ancestor::size())) {
        self[i] -= other[i];
      }
      return self;
    }
    template<required::Element E, Size C> auto Vector<E,C>::operator*=(typename Ancestor::Value other) -> Vector & {
      auto &self{*this};
      for (auto &item : self) {
        item *= other;
      }
      return self;
    }
    template<required::Element E, Size C> auto Vector<E,C>::operator/=(typename Ancestor::Value other) -> Vector & {
      if (0 == other) {
        throw exception::Domain{"division by zero"};
      }
      auto &self{*this};
      for (auto &item : self) {
        item /= other;
      }
      return self;
    }
    template<required::Element E, Size C> auto Vector<E,C>::operator%=(typename Ancestor::Value other) -> Vector & {
      if (0 == other) {
        throw exception::Domain{"division by zero"};
      }
      auto &self{*this};
      for (auto &item : self) {
        item %= other;
      }
      return self;
    }
  }
}
#endiv
