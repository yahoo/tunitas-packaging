// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.required.Element
namespace tunitas::keyston::field {
  //
  // The boilerplate of access to the spans & views
  //
  // Specification:
  //
  //   Span and View
  //   Fixed and Variable
  //
  // Design:
  //
  //   Descendants only.
  //   Descendants receive the types
  //
  // Usage:
  //
  //   Hack the Spew.
  //   By inheritance into the Definition<N>
  //
  template<required::Element> struct Access;
}
#endiv
#divert <hpp>
#import tunitas.view.Fixed
#import tunitas.view.Variable
#import tunitas.span.Span
#import tunitas.keyston.field.required.Spanable
#import std.dynamic_extent
namespace tunitas::keyston {
  template<field::required::Element VALUE> class field::Access {
  protected:
    ~Access() = default;
  public:
    using Value = VALUE;
    struct View {
      template<auto EXTENT> requires (std::dynamic_extent != EXTENT) using Fixed = view::Fixed<Value, EXTENT>;
      using Variable = view::Variable<Value>;
    };
    template<typename ELEMENT, auto EXTENT = std::dynamic_extent> requires required::Spanable<ELEMENT, Value> using Span = span::Span<ELEMENT, EXTENT>;
  };
}
#endiv
