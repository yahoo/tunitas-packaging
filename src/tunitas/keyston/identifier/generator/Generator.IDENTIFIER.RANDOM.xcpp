// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.identifier.generator.Generator.template
#import tunitas.keyston.identifier.generator.required.Unique
#import tunitas.keyston.identifier.generator.required.Entropy
namespace tunitas::keyston::identifier::generator {
  //
  // The serial id generators for the unique ids
  //
  // Usage:
  //
  //   auto generator = identifier::Generator<identifier::Batch, id::Policy::SERIAL>{};
  //   auto generated0 = generator();
  //   auto generated1 = generator();
  //
  template<required::Unique IDENTIFIER, required::Entropy SOURCE> struct Generator<IDENTIFIER, Policy::RANDOM, SOURCE>;
  template<typename ANYTHING> requires (false) struct Generator<ANYTHING, Policy::RANDOM, void>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.identifier.generator.Randomizer
namespace tunitas::keyston::identifier::generator {
  template<typename ANYTHING> requires (false) struct Generator<ANYTHING, Policy::RANDOM, void> {
    static_assert(sizeof (ANYTHING) || required::Entropy<void>, "void is not an entropy source");
    Generator() = delete;
  };
  template<required::Unique IDENTIFIER, required::Entropy SOURCE> struct Generator<IDENTIFIER, Policy::RANDOM, SOURCE> : public Randomizer<IDENTIFIER, SOURCE> {
    using Ancestor = Randomizer<IDENTIFIER, SOURCE>;
  public:
    explicit Generator(typename Ancestor::Entropy &e) : Ancestor{e} { }
  };
}
#endiv
