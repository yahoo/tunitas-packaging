// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
namespace tunitas::alambique::slurp::file {
  //
  // The context for error messaging
  //
  // Specification:
  //
  //   Capture the current filepath & line
  //   Allow for opertaor++ to easily increment the line number.
  //
  // Design:
  //
  //   Using the Best Available Means and Methods  (UBAMM)
  //
  // Lifetimes:
  //
  //   lifetime(filepath) > lifetime(Context)
  //
  //   i.e. the Context stores a reference to the underlying filepath object.
  //
  // Usage:
  //
  //   auto context = Context{filepath};
  //   ++context;
  //   cerr << context << ": error, that was bad\n";
  //
  struct Context;
}
#endiv
#divert <hpp>
#import tunitas.alambique.slurp.file.Line
#import tunitas.file.Path
#import std.ostream
namespace tunitas::alambique::slurp {
  namespace file {
    using std::move;
    inline auto operator<<(std::ostream &, Context const &) -> std::ostream &;
  }
  class file::Context {
  protected:
    friend auto operator<<(std::ostream &, Context const &) -> std::ostream &;
    using Filepath = tunitas::file::Path;
    Filepath const &stored_filepath;
    Line stored_line{};
  public:
    inline constexpr explicit Context(Filepath const &, Line = Line{});
    constexpr auto line() const -> Line { return stored_line; }
    constexpr auto file() const -> Filepath const & { return stored_filepath; }
    inline auto operator++() -> Context &;
    inline auto operator++(int) -> Context;
  };
}
#endiv
#divert <ipp>
#import langu.age.dequote
namespace tunitas::alambique::slurp {
  auto file::operator<<(std::ostream &o, Context const &c) -> std::ostream & {
    return o << langu::age::dequote(c.stored_filepath) << ':' << underlying(c.stored_line) << ':';
  }
  namespace file {
    constexpr Context::Context(Filepath const &f, Line l)
      : stored_filepath{f}
      , stored_line{l}
    { }
    auto Context::operator++() -> Context & {
      ++stored_line;
      return *this;
    }
    auto Context::operator++(int) -> Context {
      auto old{*this};
      operator++();
      return old;
    }
  }
}
#endiv
