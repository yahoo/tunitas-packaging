// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
namespace tunitas::alambique::slurp::error {
  //
  // Reporting errors during file slurping
  //
  // Specification:
  //
  //   Emit the error.
  //   May throw an exception to terminate the slurping.
  //
  //   finalize() is expected to summarize the experience
  //     return true on success
  //     return false on failure or throw an exception to terminate the slurpage.
  //
  // Design:
  //
  //   Is abstract.
  //   Descendants only.
  //
  // Exceptions:
  //
  //   Implementations are allowed to throw an exception at any time to terminate the slurping.
  //   For ease in handling such exceptions, the exception will be a descendant of alambique::slurp::exception::Aspect
  //
  // Usage:
  //
  //   See Silence.
  //
  //   auto slurped = slurp::file(some_filepath, Silence{});
  //
  struct Reporter;
}
#endiv
#divert <hpp>
#import std.error_code
#import tunitas.string.View
#import tunitas.alambique.slurp.file.Path
#import tunitas.alambique.slurp.file.Context
class tunitas::alambique::slurp::error::Reporter {
protected:
  virtual ~Reporter() = default;
  bool error_accumulator{};
public:
  explicit Reporter() = default;
  virtual auto cannot_open(file::Path const &, std::error_code) -> void  { error_accumulator = true; }
  virtual auto not_a_number(file::Context const &, string::View) -> void { error_accumulator = true; }
  virtual auto finalize() -> bool { return good(); }
  inline auto good() -> bool { return false == error_accumulator; }
  inline auto fail() -> bool { return true == error_accumulator; }
};
#endiv
