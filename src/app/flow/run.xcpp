// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
namespace app::flow {
  namespace package_run {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_run::interface;
}
#import cli.exits.constants
#import tunitas.keyston.time.literals
#import tunitas.alambique.slurp
namespace app::flow::package_run {
  namespace body {
    using namespace cli::exits::constants;
    using namespace tunitas::keyston::time::literals;
    namespace slurp = tunitas::alambique::slurp;
  }
}
#import cli.controllability.Through
#import cli.exits.Code
#import cli.experience.Console
#import tunitas.alambique.Demonstrator
#include <hpp/tunitas.alambique.Demonstrator> // for Demonstrator::Name
#import tunitas.keyston.array.Series
#import tunitas.keyston.entropy.Source
#import tunitas.file.Path
namespace app::flow::package_run {
  using Exit = cli::exits::Code;
  using cli::experience::Console;
  namespace body {
    using cli::controllability::Through;
    using Entropy = tunitas::keyston::entropy::Source;
    using Demonstrator = tunitas::alambique::Demonstrator<tunitas::alambique::Function::DAF>;
    using tunitas::keyston::array::Series;
    using Filepath = tunitas::file::Path;
    using enum Demonstrator::Name;
  }
}
#endiv
#divert <hpp>
#import app.flow.Configuration
namespace app::flow::package_run {
  namespace body {
    namespace exported {
      auto run([[inout]] Console &, [[inout]] Configuration const &) -> Exit;
    }
    inline auto intake(Filepath const &) -> Series<Demonstrator::Measured>;
  }
}
#endiv
#divert <ipp>
#import tunitas.alambique.slurp.from_file
#import std.transform
#import std.back_inserter
namespace app::flow::package_run {
  auto body::intake(Filepath const &datafile) -> Series<Demonstrator::Measured> {
    auto slurped = slurp::from_file(datafile);
    auto measured = Series<Demonstrator::Measured>{};
    auto prepare_one_specimen = [](auto const &specimen) { return Demonstrator::Measured{specimen}; };
    std::transform(slurped.begin(), slurped.end(), std::back_inserter(measured), prepare_one_specimen);
    return measured;

  }
}
#endiv
#divert <cpp>
#import std.cout
#import app.exception.Testing
namespace app::flow::package_run {
  auto interface::run(Console &exp, Configuration const &cfg) -> Exit {
    auto source = Entropy{};
    auto demo = Demonstrator{source, SUM};
    auto measurements = intake(cfg.measurement_data_filepath.value());
    auto parameters = Demonstrator::Parameters{}; // there are "none" so we can reasonably choose them this way
    //
    if (testing(cfg) <= Through::SETUP) { throw exception::Testing{exp}; }
    auto ran = demo.run(parameters, measurements.begin(), measurements.end());
    std::cout << underlying(ran.value) << '\n';
    return OK;
  }
}
#endiv
