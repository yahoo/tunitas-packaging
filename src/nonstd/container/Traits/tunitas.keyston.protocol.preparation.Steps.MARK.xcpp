// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.container.Traits
#forward tunitas.keyston.protocol.preparation.Steps
namespace nonstd::container {
  template<tunitas::keyston::protocol::preparation::Mark MARK> struct Traits<tunitas::keyston::protocol::preparation::Steps<MARK>>;
  template<tunitas::keyston::protocol::preparation::Mark MARK> struct Traits<tunitas::keyston::protocol::preparation::Steps<MARK> const>;
}
#endiv
#divert <hpp>
#import nonstd.container.Traits.tunitas.keyston.array.Bounded.TYPE.CAPACITY
#import tunitas.keyston.protocol.preparation.Step
namespace nonstd::container {
  template<tunitas::keyston::protocol::preparation::Mark MARK> struct Traits<tunitas::keyston::protocol::preparation::Steps<MARK>> : public Traits<tunitas::keyston::array::Bounded<tunitas::keyston::protocol::preparation::Step<MARK>, (1uz<<32)>> { };
  template<tunitas::keyston::protocol::preparation::Mark MARK> struct Traits<tunitas::keyston::protocol::preparation::Steps<MARK> const> : public Traits<tunitas::keyston::array::Bounded<tunitas::keyston::protocol::preparation::Step<MARK>, (1uz<<32)> const> { };
}
#endiv
#divert <cpp>
#import tunitas.keyston.protocol.preparation.Mark
namespace {
  namespace testate {
    using enum tunitas::keyston::protocol::preparation::Mark;
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED>>));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED>>::Iterator));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED>>::Value));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED>>::Container));
    //
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED> const>));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED> const>::Iterator));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED> const>::Value));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::protocol::preparation::Steps<POSITIONED> const>::Container));
  }
}
#endiv
