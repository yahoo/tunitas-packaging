// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.container.Traits
#forward tunitas.keyston.field.vector.Fixed
namespace nonstd::container {
  template<typename ELEMENT, size_t CAPACITY> struct Traits<tunitas::keyston::field::vector::Fixed<ELEMENT, CAPACITY>>;
  template<typename ELEMENT, size_t CAPACITY> struct Traits<tunitas::keyston::field::vector::Fixed<ELEMENT, CAPACITY> const>;
}
#endiv
#divert <hpp>
#import nonstd.container.Traits.tunitas.array.Fixed.TYPE.CAPACITY
namespace nonstd::container {
  template<typename ELEMENT, size_t CAPACITY> struct Traits<tunitas::keyston::field::vector::Fixed<ELEMENT, CAPACITY>> : public Traits<tunitas::array::Fixed<ELEMENT, CAPACITY>> { };
  template<typename ELEMENT, size_t CAPACITY> struct Traits<tunitas::keyston::field::vector::Fixed<ELEMENT, CAPACITY> const> : public Traits<tunitas::array::Fixed<ELEMENT, CAPACITY> const> { };
}
#endiv
#divert <cpp>
#import tunitas.keyston.field.vector.Fixed
#import tunitas.keyston.field.Element
namespace {
  namespace testate {
    using tunitas::keyston::field::Element;
    //
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1>>));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1>>::Iterator));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1>>::Value));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1>>::Container));
    //
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1> const>));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1> const>::Iterator));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1> const>::Value));
    static_assert(sizeof(nonstd::container::Traits<tunitas::keyston::field::vector::Fixed<Element<64>, 1> const>::Container));
  }
}
#endiv
