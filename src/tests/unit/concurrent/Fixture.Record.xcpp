// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert<fpp>
#include <hpp/tests.unit.concurrent.Fixture>
#endiv
#divert <hpp>
namespace tests::unit::concurrent {
  //
  // Just enough so that it will work in a Dictionary<...>
  //
  struct Fixture::Record {
    string::Storage key{}, value{};
    Record() = default;
    Record(string::Storage k) : key{move(k)} { }
    Record(string::Storage k, string::Storage v) : key{move(k)}, value{move(v)} { }
    friend auto key_from(Record const &r) -> string::Storage const & { return r.key; }
    auto operator==(string::Storage const &other) const -> bool { return other == key; }
  };
}
#endiv
