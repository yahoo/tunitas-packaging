// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.Container
#import tunitas.array.range.required.Container
#import nonstd.required.Container
namespace tests::unit::array::range::enumerate {
  //
  // The subject is an array::range::required::Container
  // The underlying container is a vanilla nonstd::required::Container
  //
  template<typename SUBJECT, typename UNDERLYING>
  requires (required::Container<SUBJECT> && nonstd::required::Container<UNDERLYING>)
    struct Range;
}
#endiv
#divert <hpp>
#import std.same_as
#import std.remove_const
#import nonstd.container.Traits
namespace tests::unit::array::range {
  template<typename SUBJECT, typename UNDERLYING>
  requires (library::required::Container<SUBJECT> && nonstd::required::Container<UNDERLYING>)
  struct enumerate::Range : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    using Underlying = UNDERLYING;
    //
    auto test_constructor() -> void;
    auto test_empty() -> void;
    auto test_size() -> void;
    auto test_begin_end_constie() -> void;
    auto test_begin_end_mutable() -> void;
    auto test_subrange_constie() -> void;
    auto test_subrange_mutable() -> void;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::array::range::enumerate {
  template<typename S, typename U> auto Range<S,U>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << add("constructor", &Range::test_constructor)
      << add("empty", &Range::test_empty)
      << add("size", &Range::test_size)
           << []{
                auto be = Stream{"begin-end"sv};
                be << add("constie", &Range::test_begin_end_constie)
                   << add("mutable", &Range::test_begin_end_mutable)
                   << END;
                return be;
              }()
           << []{
                auto be = Stream{"subrange"sv};
                be << add("constie", &Range::test_subrange_constie)
                   << add("mutable", &Range::test_subrange_mutable)
                   << END;
                return be;
              }()
           << END;
    return settle(series);
  }
  template<typename S, typename U> auto Range<S,U>::test_constructor() -> void {
    auto underlying = Underlying{};
    auto subject = Subject{underlying.begin(), underlying.end()};
    require(ASSERTION, underlying.empty() == subject.empty());
    require(ASSERTION, subject.empty());
  }
  template<typename S, typename U> auto Range<S,U>::test_empty() -> void {
    auto underlying = Underlying{1,2,3};
    auto subject = Subject{underlying.begin(), underlying.end()};
    require(ASSERTION, underlying.empty() == subject.empty());
  }
  template<typename S, typename U> auto Range<S,U>::test_size() -> void {
    auto underlying = Underlying{1,2,3};
    auto subject = Subject{underlying.begin(), underlying.end()};
    require(ASSERTION, underlying.empty() == subject.empty());
    require(ASSERTION, 3 == subject.size());
  }
  template<typename S, typename U> auto Range<S,U>::test_begin_end_constie() -> void {
    if constexpr (std::is_const_v<Subject>) {
      auto const underlying = Underlying{1,2,3}; // <---- this constie requires a different sort of Subject
      auto accumulator{0u};
      for (auto [index, value] : Subject{underlying.begin(), underlying.end()}) {
        require(ASSERTION, 1+index == value);
        accumulator += index;
      }
      require(ASSERTION, 6u == accumulator);
    }
  }
  template<typename S, typename U> auto Range<S,U>::test_begin_end_mutable() -> void {
    auto underlying = Underlying{1,2,3};
    auto accumulator{0u};
    for (auto [index, value] : Subject{underlying.begin(), underlying.end()}) {
      value *= 10;
      require(ASSERTION, 10*(1+index) == (std::size_t) value);
      accumulator += value;
    }
    require(ASSERTION, 60u == accumulator);
  }
  template<typename S, typename U> auto Range<S,U>::test_subrange_constie() -> void {
    if constexpr (std::is_const_v<Subject>) {
      auto const underlying = Underlying{1,2,3}; // <---- this constie requires a different sort of Subject
      auto accumulator{0u};
      for (auto const subject=Subject{underlying.begin(), underlying.end()}; auto [index, value] : subject.subrange()) {
        require(ASSERTION, 1+index == value);
        accumulator += index;
      }
      require(ASSERTION, 6u == accumulator);
    }
  }
  template<typename S, typename U> auto Range<S,U>::test_subrange_mutable() -> void {
    auto underlying = Underlying{1,2,3};
    auto accumulator{0u};
    for (auto subject=Subject{underlying.begin(), underlying.end()}; auto [index, value] : subject.subrange()) {
      value *= 10;
      require(ASSERTION, 10*(1+index) == (std::size_t)value);
      accumulator += value;
    }
    require(ASSERTION, 60u == accumulator);
  }
}
#endiv
