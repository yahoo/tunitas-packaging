// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::array {
  template<typename SUBJECT> class Fixed;
}
#endiv
#divert <hpp>
namespace tests::unit {
  template<typename SUBJECT> struct array::Fixed : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    using Value = typename Subject::Value;
    //
    auto test_constructor_default() -> void;
    //
    auto test_swap() -> void;
    auto test_at_constie() -> void;
    auto test_at_mutable() -> void;
    //
    auto test_subrange_constie() -> void;
    auto test_subrange_mutable() -> void;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::array {
  template<typename _> auto Fixed<_>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << []{
                auto con = Stream{"constructor"sv};
                con << add("default", &Fixed::test_constructor_default)
                    << END;
                return con;
              }()
           << add("swap", &Fixed::test_swap)
           << []{
                auto at = Stream{"at"sv};
                at << add("constie", &Fixed::test_at_constie)
                   << add("mutable", &Fixed::test_at_mutable)
                   << END;
                return at;
              }()
           << []{
                auto face = Stream{"subrange"sv};
                face << add("constie", &Fixed::test_subrange_constie)
                     << add("mutable", &Fixed::test_subrange_mutable)
                     << END;
                return face;
              }()
           << END;
    return settle(series);
  }
}
#import tunitas.exception.feature.Bound
namespace tests::unit::array {
  template<typename _> auto Fixed<_>::test_constructor_default() -> void {
    auto subject = Subject{};
    require(ASSERTION, subject.capacity() == subject.size());
  }
  template<typename _> auto Fixed<_>::test_swap() -> void {
    auto subject0 = Subject{};
    auto subject1 = Subject{};
    swap(subject0, subject1);
  }
  template<typename _> auto Fixed<_>::test_at_constie() -> void {
    auto const subject = Subject{0, 1, 2, 3}; // <----- using this (constie)
    require(ASSERTION, 4 == subject.size());
    try {
      subject.at(400);
      impossible(ASSERTION);
    } catch (::tunitas::exception::feature::Bound const &) {
      require(ASSERTION);
    }
  }
  template<typename _> auto Fixed<_>::test_at_mutable() -> void {
    auto subject = Subject{0, 1, 2, 3}; // <----- using this (mutable)
    require(ASSERTION, 4 == subject.size());
    try {
      subject.at(0) = subject.at(400);
      impossible(ASSERTION);
    } catch (::tunitas::exception::feature::Bound const &) {
      require(ASSERTION);
    }
  }
  template<typename _> auto Fixed<_>::test_subrange_constie() -> void {
    auto const subject = Subject{0, 1, 2, 3}; // <------------------------------ constie
    require(ASSERTION, 4 == subject.size());
    auto count{0uz};
    for (auto const &item : subrange(subject)) { // <--------------- test this (constie)
      count += 0 != sizeof (item);
    }
    require(ASSERTION, 4uz == count);
  }
  template<typename _> auto Fixed<_>::test_subrange_mutable() -> void {
    auto subject = Subject{0, 1, 2, 3}; // <------------------------------------ mutable
    require(ASSERTION, 4 == subject.size());
    auto count{0uz};
    for (auto const &item : subrange(subject)) { // <--------------- test this (mutable)
      count += 0 != sizeof (item);
    }
    require(ASSERTION, 4uz == count);
  }
}
#endiv
