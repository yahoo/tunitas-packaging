// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::array {
  template<typename SUBJECT> class Variable;
}
#endiv
#divert <hpp>
namespace tests::unit {
  template<typename SUBJECT> struct array::Variable : public cppunit::test::Fixture {
    static auto suite() -> cppunit::Test *;
    //
    using Subject = SUBJECT;
    //
    auto test_constructor_default() -> void;
    auto test_at_constie() -> void;
    auto test_at_mutable() -> void;
    auto test_push_back() -> void;
    auto test_emplace_back() -> void;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::array {
  template<typename _> auto Variable<_>::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{typeid(Subject)};
    series << []{
                auto con = Stream{"constructor"};
                con << add("default", &Variable::test_constructor_default)
                    << END;
                return con;
              }()
           << []{
                auto at = Stream{"at"};
                at << add("constie", &Variable::test_at_constie)
                   << add("mutable", &Variable::test_at_mutable)
                   << END;
                return at;
              }()
           << []{
                auto back = Stream{"back"};
                back << add("push_back", &Variable::test_push_back)
                     << add("emplace_back", &Variable::test_emplace_back)
                     << END;
                return back;
              }()
           << END;
    return finalize(series);
  }
}
#import tunitas.exception.feature.Bound
namespace tests::unit::array {
  template<typename _> auto Variable<_>::test_constructor_default() -> void {
    auto subject = Subject{};
    require(ASSERTION, 0 == subject.size());
  }
  template<typename _> auto Variable<_>::test_at_constie() -> void {
    auto const subject = Subject(4); // <----- using this (constie)
    require(ASSERTION, 4 == subject.size());
    auto v0 = subject.at(0); // <---------------------------------------- test this
    auto v1 = subject.at(1);
    auto v2 = subject.at(2);
    auto v3 = subject.at(3);
    require(ASSERTION, sizeof (v0) + sizeof (v1) + sizeof (v2) + sizeof (v3));
    try {
      subject.at(4);
      impossible(ASSERTION);
    } catch (::tunitas::exception::feature::Bound const &) {
      require(ASSERTION);
    }
  }
  template<typename _> auto Variable<_>::test_at_mutable() -> void {
    auto subject = Subject(4); // <----- using this (mutable)
    require(ASSERTION, 4 == subject.size());
    subject.at(0) = subject.at(0); // <---------------------------------------- test this
    subject.at(1) = subject.at(1);
    subject.at(2) = subject.at(2);
    subject.at(3) = subject.at(3);
    try {
      subject.at(4) = subject.at(4);
      impossible(ASSERTION);
    } catch (::tunitas::exception::feature::Bound const &) {
      require(ASSERTION);
    }
  }
  template<typename _> auto Variable<_>::test_push_back() -> void {
    auto subject = Subject{};
    require(ASSERTION, 0 == subject.size());
    subject.push_back({});
    subject.push_back({});
    subject.push_back({});
    subject.push_back({});
    require(ASSERTION, 4 == subject.size());
  }
  template<typename _> auto Variable<_>::test_emplace_back() -> void {
    auto subject = Subject{};
    require(ASSERTION, 0 == subject.size());
    subject.template emplace_back<typename Subject::Value>({});
    subject.template emplace_back<typename Subject::Value>({});
    subject.template emplace_back<typename Subject::Value>({});
    subject.template emplace_back<typename Subject::Value>({});
    require(ASSERTION, 4 == subject.size());
  }
}
#endiv
