// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::run::log { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.run.service.Name
struct tests::unit::run::log::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using Name = ::tunitas::keyston::run::service::Name;
  //
  auto test_usage_Client() -> void;
  auto test_usage_Concentrator() -> void;
  //
  auto test_ine() -> void;
  //
  auto test_stamp_none() -> void;
  auto test_stamp_time_Point() -> void;
  auto test_stamp_service_Name() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::run::log::Fixture::suite() -> Suite {
  auto series = Stream{"log"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Client", &Fixture::test_usage_Client)
                  << add("Concentrator", &Fixture::test_usage_Concentrator)
                  << END;
              return use;
            }()
         << add("ine", &Fixture::test_ine)
         << []{
              auto tamp = Stream{"stamp"sv};
              tamp << add("none", &Fixture::test_stamp_none)
                   << add("time::Point", &Fixture::test_stamp_time_Point)
                   << add("service::Name", &Fixture::test_stamp_service_Name)
                   << END;
              return tamp;
            }()
         << END;
  return settle(series);
}
#import tunitas.keyston.run.log.ine
#import tunitas.keyston.run.log.stamp
#import tunitas.keyston.run.log.Client
#import tunitas.keyston.run.log.Concentrator
#import std.ostringstream
namespace tests::unit::run::log {
  auto Fixture::test_usage_Client() -> void {
    using Subject = library::Client;
    auto subject = Subject{Name::GATEWAY};
    require(ASSERTION, sizeof (subject));
  }
  auto Fixture::test_usage_Concentrator() -> void {
    using Subject = library::Concentrator;
    auto subject = Subject{};
    require(ASSERTION, sizeof (subject));
  }
  auto Fixture::test_ine() -> void {
    auto buf = std::ostringstream{};
    auto const full = "full"sv;
    auto const empty = ""sv;
    buf << library::ine(full) << '/' << library::ine(empty); // <-------------------- test this
    auto const expected = "full/(empty)"s;
    auto actual = buf.str();
    std::cerr << "actual = " << actual << '\n';
    require(ASSERTION, expected == actual);
  }
  auto Fixture::test_stamp_none() -> void {
    auto buf = std::ostringstream{};
    buf << library::stamp(); // <---------------------------------------- test this
    auto actual = buf.str();
    std::cerr << "stamp = " << actual << '\n';
    require(ASSERTION, !actual.empty());
  }
  auto Fixture::test_stamp_time_Point() -> void {
    auto buf = std::ostringstream{};
    buf << library::stamp(std::chrono::system_clock::now()); // <-------------------- test this
    auto actual = buf.str();
    std::cerr << "stamp = " << actual << '\n';
    require(ASSERTION, !actual.empty());
  }
  auto Fixture::test_stamp_service_Name() -> void {
    auto buf = std::ostringstream{};
    buf << library::stamp(Name::COLLECTOR); // <-------------------- test this
    auto actual = buf.str();
    std::cerr << "stamp = " << actual << '\n';
    require(ASSERTION, !actual.empty());
  }
}
#endiv
