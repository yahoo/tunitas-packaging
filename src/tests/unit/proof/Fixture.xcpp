// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::proof { struct Fixture; }
#endiv
#divert <hpp>
#import tests.unit.proof.construction.Table
#import tunitas.keyston.prio.Algorithm
#import tunitas.keyston.poplar.Algorithm
struct tests::unit::proof::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  struct Specimen {
    using Count = construction::System<::tunitas::keyston::prio::Algorithm<::tunitas::keyston::prio::Name::COUNT>>;
    using Sum = construction::System<::tunitas::keyston::prio::Algorithm<::tunitas::keyston::prio::Name::SUM>>;
    using Histogram = construction::System<::tunitas::keyston::prio::Algorithm<::tunitas::keyston::prio::Name::HISTOGRAM>>;
#ifdef POPLAR1_IS_READY
    using Popularity = construction::System<::tunitas::keyston::poplar::Algorithm<::tunitas::keyston::poplar::Name::ONE>>;
#endif
  };
  template<typename SYSTEM> auto test_usage_System() -> void;
};
#endiv
#divert <tpp>
namespace tests::unit::proof {
  template<typename SYSTEM> auto Fixture::test_usage_System() -> void {
    using Subject = SYSTEM;
    // Subject is full of types and static member functions.
    // TODO ... test something
    require(ASSERTION, sizeof(Subject));
  }
}
#endiv
#divert <cpp>
auto tests::unit::proof::Fixture::suite() -> Suite {
  auto series = Stream{"proof"sv};
  series << []{
             auto use = Stream{"usage"sv};
             use << []{
                     auto sys = Stream{"System"sv};
                     sys << add("COUNT", &Fixture::test_usage_System<Specimen::Count>)
                         << add("SUM", &Fixture::test_usage_System<Specimen::Sum>)
                         << add("HISTOGRAM", &Fixture::test_usage_System<Specimen::Histogram>)
#ifdef POPLAR1_IS_READY
                         << add("POPULARITY", &Fixture::test_usage_System<Specimen::Popularity>)
#endif
                         << END;
                     return sys;
                   }()
                 << END;
             return use;
           }()
         << END;
  return settle(series);
}
#endiv
