// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::af::numeric {
  //
  // The palette of values for testing.
  //
  // Usage:
  //
  //   By inheritance into a companion Fixture.  You know how this works.
  //
  struct Palette;
}
#endiv
#divert <hpp>
#import tunitas.keyston.measurement.Specimen
#import tunitas.keyston.measurement.Result
#import tunitas.keyston.af.numeric.Intermediate
class tests::unit::af::numeric::Palette {
protected:
  ~Palette() = default;
public:
  struct Inventory {
    // at test sites, these types will be referenced from the nearby Configuration (but not here)
    using Specimen = ::tunitas::keyston::measurement::Specimen;
    using Intermediate = ::tunitas::keyston::af::numeric::Intermediate;
    using Aggregation = ::tunitas::keyston::measurement::Result;
  };
  inline static auto const MEASUREMENT = Inventory::Specimen{3};
  inline static auto const INTERMEDIATE0 = Inventory::Intermediate{0};
  inline static auto const INTERMEDIATE = Inventory::Intermediate{4};
  inline static auto const ZERO = Inventory::Aggregation{0};
  inline static auto const COUNT = Inventory::Aggregation{1};
  inline static auto const SUM = Inventory::Aggregation{7};
};
#endiv
