!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.af.numeric.popularity
namespace tests::unit::af::numeric::popularity {
  class Fixture;
  namespace library = ::tunitas::keyston::af::numeric::popularity;
}
#endiv
#divert <hpp>
#import tests.unit.af.numeric.Palette
#import tunitas.keyston.measurement.Specimen
struct tests::unit::af::numeric::popularity::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  auto test_computation() -> void;
  auto test_finalization() -> void;
protected:
    using S = ::tunitas::keyston::measurement::Specimen;
  static auto generate_some_parameters() -> Configuration::Parameters;
};
#endiv
#divert <cpp>
auto tests::unit::af::numeric::popularity::Fixture::suite() -> Suite {
  auto series = Stream{"popularity"sv};
  series << add("computation", &Fixture::test_computation)
         << add("finalization", &Fixture::test_finalization)
         << END;
  return settle(series);
}
#import nonstd.exception.Unimplemented
#import tunitas.keyston.popularity.Prefixes
#import nonstd.units.memory.scale // in unts of bits
namespace tests::unit::af::numeric::popularity {
  auto Fixture::generate_some_parameters() -> Configuration::Parameters {
    auto ret = Configuration::Parameters{};
    ret.prefix_length = nonstd::units::memory::Bits{4};
    ret.prefixes = ::tunitas::keyston::popularity::Prefixes{S{1}, S{2}, S{3}, S{4}};
    return ret;
  }
  auto Fixture::test_computation() -> void try {
    auto parameters = generate_some_parameters();
    auto intermediate = Initial::generate_population(parameters);
    auto measurement = Configuration::Measurement{MEASUREMENT};
    auto more = library::computation(parameters, intermediate, measurement);
    require(ASSERTION, sizeof(more));
  } catch (nonstd::exception::Unimplemented const &) {
    require(ASSERTION);
  }
  auto Fixture::test_finalization() -> void try {
    auto parameters = generate_some_parameters();
    auto intermediate = Initial::generate_population(parameters);
    auto finalized = library::finalization(parameters, intermediate);
    require(ASSERTION, sizeof(finalized));
  } catch (nonstd::exception::Unimplemented const &) {
    require(ASSERTION);
  }
}
#endiv
