// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tests.unit.prio.required.Algorithm
namespace tests::unit::prio {
  template<typename SUBJECT> requires required::Algorithm<SUBJECT> struct Algorithm;
}
#endiv
#divert <hpp>
namespace tests::unit {
  template<typename SUBJECT> requires prio::required::Algorithm<SUBJECT> struct prio::Algorithm : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    //
    auto test_call_encode() -> void;
    auto test_call_truncate() -> void;
    auto test_call_decode() -> void;
    //
    auto test_known_encode() -> void;
    auto test_known_truncate() -> void;
    auto test_known_decode() -> void;
  };
  namespace prio {
    template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_encode() -> void;
    template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_truncate() -> void;
    template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_decode() -> void;
    //
    template<> auto Algorithm<library::Algorithm<SUM>>::test_known_encode() -> void;
    template<> auto Algorithm<library::Algorithm<SUM>>::test_known_truncate() -> void;
    template<> auto Algorithm<library::Algorithm<SUM>>::test_known_decode() -> void;
    //
    template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_encode() -> void;
    template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_truncate() -> void;
    template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_decode() -> void;
  }
}
#endiv
#divert <tpp>
namespace tests::unit::prio {
  template<typename _> auto Algorithm<_>::suite() -> Suite { 
    auto series = Stream{typeid(Subject)};
    series << []{
               auto call = Stream{"call"sv};
               call << add("encode", &Algorithm::test_call_encode)
                    << add("truncate", &Algorithm::test_call_truncate)
                    << add("decode", &Algorithm::test_call_decode)
                    << END;
               return call;
             }()
           << []{
               auto kno = Stream{"known"sv};
               kno << add("encode", &Algorithm::test_known_encode)
                   << add("truncate", &Algorithm::test_known_truncate)
                   << add("decode", &Algorithm::test_known_decode)
                   << END;
               return kno;
             }()
           << END;
    return settle(series);
  }
  template<typename _> auto Algorithm<_>::test_call_encode() -> void {
    auto measurement = typename Subject::Measurement{};
    auto encoded = [measurement]{
      if constexpr (std::same_as<Subject, library::Algorithm<library::Name::HISTOGRAM>>) {
        auto boundaries = typename Subject::Boundaries{};
        return Subject::encode(measurement, boundaries);
      } else {
        return Subject::encode(measurement);
      }
    }();
    require(ASSERTION, sizeof (encoded));
  }
  template<typename _> auto Algorithm<_>::test_call_truncate() -> void { 
    auto encoded = typename Subject::Encoded{};
    auto truncated = Subject::truncate(encoded);
    require(ASSERTION, sizeof (truncated));
  }
  template<typename _> auto Algorithm<_>::test_call_decode() -> void { 
    auto truncated = typename Subject::Truncated{};
    auto processed = typename Subject::Processed{};
    auto decoded = Subject::decode(truncated, processed);
    require(ASSERTION, sizeof (decoded));
  }
}
#endiv
#divert <cpp>
#import tunitas.keyston.prio.Algorithm
namespace tests::unit::prio {
  template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_encode() -> void {
    auto specimen = Subject::Measurement{5};
    auto expected = Subject::Encoded{1u};
    auto observed = Subject::encode(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_truncate() -> void {
    auto specimen = Subject::Encoded{99u};
    auto expected = Subject::Truncated{99u};
    auto observed = Subject::truncate(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<COUNT>>::test_known_decode() -> void {
    auto specimen = Subject::Truncated{101u};
    auto expected = Subject::Decoded{101u};
    auto observed = Subject::decode(specimen, Subject::Processed{});
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<SUM>>::test_known_encode() -> void {
    auto specimen = Subject::Measurement{5};
    auto expected = Subject::Encoded{1u, 0u, 1u, 0u, 0u, 0u, 0u};
    auto observed = Subject::encode(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<SUM>>::test_known_truncate() -> void {
    auto specimen = Subject::Encoded{1u, 0u, 1u, 0u, 1u};
    auto expected = Subject::Truncated{21u};
    auto observed = Subject::truncate(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<SUM>>::test_known_decode() -> void {
    auto specimen = Subject::Truncated{23u};
    auto expected = Subject::Decoded{23u};
    auto observed = Subject::decode(specimen, Subject::Processed{});
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_encode() -> void {
    auto make = [](auto... values) { return Subject::Boundaries{Subject::Boundaries::Value{values}...}; };
    auto boundaries = make(1u, 3u, 5u, 7u);
    auto specimen = Subject::Measurement{5u};
    auto expected = Subject::Encoded{0u, 0u, 1u, 0u, 0u, 0u, 0u};
    auto observed = Subject::encode(specimen, boundaries);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_truncate() -> void {
    auto specimen = Subject::Encoded{0u, 1u, 0u, 1u};
    auto expected = Subject::Truncated{0u, 1u, 0u, 1u, 0u, 0u, 0u, 0u};
    auto observed = Subject::truncate(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Algorithm<library::Algorithm<HISTOGRAM>>::test_known_decode() -> void {
    auto specimen = Subject::Truncated{0u, 1u, 0u, 1u};
    auto histogram = [](auto... values) { return Subject::Decoded{Subject::Decoded::Value{values}...}; };
    auto expected = histogram(0u, 1u, 0u, 1u, 0u, 0u, 0u);
    auto observed = Subject::decode(specimen, Subject::Processed{});
    require(ASSERTION, std::equal(expected.begin(), expected.end(), observed.begin(), observed.end()));
  }
}
#endiv
