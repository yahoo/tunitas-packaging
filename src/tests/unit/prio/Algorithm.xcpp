// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tests.unit.prio.required.Algorithm
namespace tests::unit::prio {
  template<typename SUBJECT> requires required::Algorithm<SUBJECT> struct Algorithm;
}
#endiv
#divert <hpp>
namespace tests::unit {
  template<typename SUBJECT> requires prio::required::Algorithm<SUBJECT> struct prio::Algorithm : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    //
    auto test_encode() -> void;
    auto test_truncate() -> void;
    auto test_decode() -> void;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::prio {
  template<typename _> auto Algorithm<_>::suite() -> Suite { 
    auto series = Stream{typeid(Subject)};
    series << add("encode", &Algorithm::test_encode)
           << add("truncate", &Algorithm::test_truncate)
           << add("decode", &Algorithm::test_decode)
           << END;
    return settle(series);
  }
  template<typename _> auto Algorithm<_>::test_encode() -> void {
    auto measurement = typename Subject::Measurement{};
    auto encoded = [measurement]{
      if constexpr (std::same_as<Subject, library::Algorithm<library::Name::HISTOGRAM>>) {
        auto boundaries = typename Subject::Boundaries{};
        return Subject::encode(measurement, boundaries);
      } else {
        return Subject::encode(measurement);
      }
    }();
    require(ASSERTION, sizeof (encoded));
  }
  template<typename _> auto Algorithm<_>::test_truncate() -> void { 
    auto encoded = typename Subject::Encoded{};
    auto truncated = Subject::truncate(encoded);
    require(ASSERTION, sizeof (truncated));
  }
  template<typename _> auto Algorithm<_>::test_decode() -> void { 
    auto truncated = typename Subject::Truncated{};
    auto count = ::tunitas::keyston::measurement::Count{};
    auto decoded = Subject::decode(truncated, count);
    require(ASSERTION, sizeof (decoded));
  }
}
#endiv
