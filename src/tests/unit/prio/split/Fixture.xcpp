// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::prio::split { struct Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.shards.Shards // ... for SHARD_COUNT
#import tunitas.keyston.prg.constants // ... for SEED_SIZE
struct tests::unit::prio::split::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  inline static constexpr auto SHARDS = ::tunitas::keyston::shards::SHARD_COUNT.count();
  inline static constexpr auto WITHOUT = 2uz; // with joint randomness (add one more for the blinding thingie)
  inline static constexpr auto WITH = 1uz + WITHOUT;
  inline static constexpr auto SEED = ::tunitas::keyston::prg::SEED_SIZE.count();
};
#endiv
#divert <cpp>
#import tunitas.keyston.prio.Definition
#import tunitas.keyston.prio.split.Allocator
#import tunitas.keyston.prio.split.Slicer
#import tunitas.keyston.prio.split
#import tests.unit.prio.split.Allocator
#import tests.unit.prio.split.Slicer
#import tests.unit.prio.split.Split
auto tests::unit::prio::split::Fixture::suite() -> Suite {
  auto series = Stream{"split"sv};
  series << []{
             auto all = Stream{"Allocator"sv};
             all << add<Allocator<library::Allocator<SHARDS*WITHOUT*SEED>, SHARDS, WITHOUT, SEED>>()
                 << add<Allocator<library::Allocator<SHARDS*WITH*SEED>, SHARDS, WITH, SEED>>()
                 << END;
             return all;
         }()
        << []{
             auto all = Stream{"Slicer"sv};
             all << add<Slicer<library::Allocator<SHARDS*WITHOUT*SEED>, SHARDS, WITHOUT, SEED>>()
                 << add<Slicer<library::Allocator<SHARDS*WITH*SEED>, SHARDS, WITH, SEED>>()
                 << END;
             return all;
        }()
         << []{
             auto lit = Stream{"split"sv};
             lit << add<Split<prio::library::Definition<COUNT>>>()
                 << add<Split<prio::library::Definition<SUM>>>()
                 << add<Split<prio::library::Definition<HISTOGRAM>>>()
                 << END;
             return lit;
           }()
         << END;
  return settle(series);
}
#endiv
