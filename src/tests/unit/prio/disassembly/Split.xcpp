// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tests.unit.prio.required.Definition
namespace tests::unit::prio::disassembly {
  template<required::Definition> struct Split;
}
#endiv
#divert <hpp>
#import tests.unit.prio.disassembly.Prototype
#import tunitas.keyston.octets.required.Fixed
namespace tests::unit::prio {
  template<required::Definition DEFINITION> class disassembly::Split : public rigging::suite::Fixture, protected Prototype {
    using Ancestor = Prototype;
  public:
    static auto suite() -> Suite;
    //
    using Definition = DEFINITION;
    //
    auto test_call() -> void;
  protected:
    // fill with something obvious (but deterministic)
    template<::tunitas::keyston::octets::required::Fixed BUFFER> static auto generate() -> BUFFER;
  };
}
#endiv
#divert <tpp>
#import tests.unit.prio.disassembly
namespace tests::unit::prio::disassembly {
  template<required::Definition _> auto Split<_>::suite() -> Suite {
    auto series = Stream{"disassembly<"s + typeid(Definition::PRIO).name() + ">"s};
    series << add("disassembly", &Split::test_call)
           << END;
    return settle(series);
  }
  template<required::Definition _> template<::tunitas::keyston::octets::required::Fixed BUFFER> auto Split<_>::generate() -> BUFFER {
    auto ret = BUFFER{};
    unsigned ith{};
    for (auto &each : ret) {
      each = Octet(ith++); // the narrowing is desired
    }
    return ret;
  }
  template<required::Definition _> auto Split<_>::test_call() -> void {
    auto specimen = typename Ancestor::Specimen{0u};
    auto nonce = generate<::tunitas::keyston::octets::Fixed<Definition::NONCE_SIZE.count()>>();
    auto randomness = generate<::tunitas::keyston::octets::Fixed<Definition::randomness_size().count()>>();
    auto viewof = []<Size SIZE>(::tunitas::array::Fixed<typename Ancestor::Octet, SIZE> const &a) -> ::tunitas::view::View<typename Ancestor::Octet, SIZE> { return /*explicit constructor*/ ::tunitas::view::View<typename Ancestor::Octet, SIZE>{a.data(), a.size()}; };
    auto splat = [&]{
      if constexpr (::tunitas::keyston::prio::Name::HISTOGRAM == Definition::PRIO) {
        auto boundaries = ::tunitas::keyston::measurement::Boundaries{std::in_place, typename Ancestor::Specimen{1u}, typename Ancestor::Specimen{2u}, typename Ancestor::Specimen{2u}};
        return ::tunitas::keyston::prio::disassembly<Definition>(specimen, boundaries, viewof(nonce), viewof(randomness)); // <-------------------- test this
      } else {
        return ::tunitas::keyston::prio::disassembly<Definition>(specimen, viewof(nonce), viewof(randomness)); // <-------------------- test this
      }
    }();
    dump(splat);
  }
}
#endiv
