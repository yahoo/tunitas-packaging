// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tests.unit.prio.disassembly.required.Allocator
namespace tests::unit::prio::disassembly {
  template<required::Allocator, Size SHARDS, Size STRIDE, Size SEED> struct Slicer;
}
#endiv
#divert <hpp>
#import tests.unit.prio.disassembly.Embodied
namespace tests::unit::prio {
  template<disassembly::required::Allocator ALLOCATOR, Size THE_SHARDS, Size THE_STRIDE, Size THE_SEED> struct disassembly::Slicer : public rigging::suite::Fixture,
                                                                                                                         protected Embodied<ALLOCATOR, THE_SHARDS, THE_STRIDE, THE_SEED> {
    using Ancestor = Embodied<ALLOCATOR, THE_SHARDS, THE_STRIDE, THE_SEED>;
  public:
    static auto suite() -> Suite;
    //
    using Subject = ALLOCATOR;
    //
    auto test_constructed() -> void;
    template<Index OFFSET> auto test_stride() -> void;
  };
}
#endiv
#divert <tpp>
#import tunitas.sequence.Sequence
#import std.to_string
namespace tests::unit::prio::disassembly {
  template<required::Allocator A, Size H, Size T, Size E> auto Slicer<A,H,T,E>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << add("constructed", &Slicer::test_constructed)
           << []{
               auto ide = Stream{"stride"sv};
               [&ide]<Size... INDEX>(::tunitas::sequence::Sequence::Pack<INDEX...>) {
                 ((ide << add(std::to_string(INDEX), &Slicer::test_stride<INDEX>)), ...);
               }(::tunitas::sequence::Sequence::make<Ancestor::STRIDE_COUNT.count()>());
               return ide;
           }()
           << END;
    return settle(series);
  }
}
#import tunitas.keyston.prio.disassembly.Slicer
#import tunitas.keyston.prio.disassembly.Allocator
#import tests.unit.prio.format
namespace tests::unit::prio::disassembly {
  template<required::Allocator A, Size H, Size T, Size E> auto Slicer<A,H,T,E>::test_constructed() -> void {
    auto buf = Ancestor::generate();
    auto allocator = typename Ancestor::Allocator{buf.data(), buf.size()};
    auto subject = allocator.template slice<Ancestor::SHARD_COUNT.count(), Ancestor::STRIDE_COUNT.count()>(); // <------------ test this (the constructor is in there)
    require(ASSERTION, sizeof(subject));
  }
  template<required::Allocator A, Size H, Size T, Size E> template<Index OFFSET> auto Slicer<A,H,T,E>::test_stride() -> void {
    auto buf = Ancestor::generate();
    auto allocator = typename Ancestor::Allocator{buf.data(), buf.size()};
    auto subject = allocator.template slice<Ancestor::SHARD_COUNT.count(), Ancestor::STRIDE_COUNT.count()>();
    auto shards = subject.template stride<OFFSET>();
    std::cerr << format(shards) << '\n';
  }
}
#endiv
