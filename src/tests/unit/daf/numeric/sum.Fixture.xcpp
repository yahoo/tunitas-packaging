!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.daf.numeric.sum
namespace tests::unit::daf::numeric::sum {
  class Fixture;
  namespace library = ::tunitas::keyston::daf::numeric::sum;
}
#endiv
#divert <hpp>
struct tests::unit::daf::numeric::sum::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_disassembly() -> void;
  auto test_computation() -> void;
  auto test_amalgamation() -> void;
  auto test_reassembly() -> void;
protected:
  struct Observed {
    inline static constexpr auto ONE = Specimen{1};
    inline static constexpr auto TWO = Specimen{2};
    inline static constexpr auto THREE = Specimen{3};
  };
  struct Numeric {
    inline static constexpr auto ZERO = 0ll;
    inline static constexpr auto ONE = 1ll;
    inline static constexpr auto TWO = 2ll;
    inline static constexpr auto THREE = 3ll;
    inline static constexpr auto SIX = 6ll;
  };
  struct Derived {
    inline static constexpr auto FIVE = Result{5};
  };
};
#endiv
#divert <cpp>
auto tests::unit::daf::numeric::sum::Fixture::suite() -> Suite {
  auto series = Stream{"sum"sv};
  series << add("disassembly", &Fixture::test_disassembly)
         << add("computation", &Fixture::test_computation)
         << add("amalgamation", &Fixture::test_amalgamation)
         << add("reassembly", &Fixture::test_reassembly)
         << END;
  return settle(series);
}
namespace tests::unit::daf::numeric::sum {
  auto Fixture::test_disassembly() -> void {
    auto parameters = Configuration::Parameters{};
    auto measurement = Configuration::Measurement<WHOLE>{Observed::THREE};
    auto randomness = Configuration::Randomness{};
    auto [publick, inputs] = library::disassembly(parameters, measurement, randomness);
    require(ASSERTION, sizeof(publick)); // don't are what it is
    // Because this is what the constants algo does on disassembly
    require(ASSERTION, Numeric::ONE == inputs.at(0_shard).value);
    require(ASSERTION, Numeric::TWO == inputs.at(1_shard).value); // this one is the residual
  }
  auto Fixture::test_computation() -> void {
    auto parameters = Configuration::Parameters{};
    auto publick = Configuration::Public<SHARE>{};
    auto input = Configuration::Input<SHARE>{Numeric::SIX};
    auto output = library::computation(parameters, 0_shard, publick, input);
    require(ASSERTION, output.value == input.value);
  }
  auto Fixture::test_amalgamation() -> void {
    using O = Configuration::Output<SHARE>;
    auto parameters = Configuration::Parameters{};
    {
      auto outputs = Series<Configuration::Output<SHARE>>{};
      auto amalgamated = library::amalgamation(parameters, outputs);
      require(ASSERTION, Numeric::ZERO == amalgamated.value);
    } {
      auto outputs = Series<Configuration::Output<SHARE>>{O{Numeric::ONE},O{Numeric::TWO},O{Numeric::THREE}};
      auto amalgamated = library::amalgamation(parameters, outputs);
      require(ASSERTION, Numeric::SIX == amalgamated.value);
    }
  }
  auto Fixture::test_reassembly() -> void {
    auto parameters = Configuration::Parameters{};
    using A = Configuration::Aggregation<SHARE>;
    auto aggregations = Shards<Configuration::Aggregation<SHARE>>{A{Numeric::TWO}, A{Numeric::THREE}};
    auto count = Count{41};
    auto reassembled = library::reassembly(parameters, aggregations, count);
    require(ASSERTION, Derived::FIVE == reassembled.value);
  }
}
#endiv
