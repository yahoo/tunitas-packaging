!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::daf::numeric::popularity { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.daf.Name
#import tunitas.keyston.daf.Function
#import tests.unit.daf.numeric.Palette
struct tests::unit::daf::numeric::popularity::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  struct Function : public library::Function<POPLAR, library::Name::POPULARITY> {
    template<typename TYPE> using Shards = ::tunitas::keyston::Shards<TYPE>;
    using Parameters = library::Parameters;
    template<Slice SLICE> using Measurement = library::Measurement<SLICE>;
    template<Slice SLICE> using Input       = library::Input<SLICE>;
    template<Slice SLICE> using Public      = library::Public<SLICE>;
    template<Slice SLICE> using Output      = library::Output<SLICE>;
    template<Slice SLICE> using Aggregation = library::Aggregation<SLICE>;
  };
  //
  auto test_disassembly() -> void;
  auto test_computation() -> void;
  auto test_amalgamation() -> void;
  auto test_reassembly() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::daf::numeric::popularity::Fixture::suite() -> Suite {
  auto series = Stream{"popularity"sv};
  series << add("disassembly", &Fixture::test_disassembly)
         << add("computation", &Fixture::test_computation)
         << add("amalgamation", &Fixture::test_amalgamation)
         << add("reassembly", &Fixture::test_reassembly)
         << END;
  return settle(series);
}
namespace tests::unit::daf::numeric::popularity {
  auto Fixture::test_disassembly() -> void {
#warning WRITETHIS 
    require(ASSERTION);
  }
  auto Fixture::test_computation() -> void {
#warning WRITETHIS 
    require(ASSERTION);
  }
  auto Fixture::test_amalgamation() -> void {
#warning WRITETHIS 
    require(ASSERTION);
  }
  auto Fixture::test_reassembly() -> void {
#warning WRITETHIS 
    require(ASSERTION);
  }
}
#endiv
