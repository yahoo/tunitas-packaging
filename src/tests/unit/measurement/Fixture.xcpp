// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::measurement { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::measurement::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Count() -> void;
  auto test_usage_Specimen() -> void;
  auto test_usage_Result() -> void;
  auto test_usage_Simple() -> void;
  auto test_usage_Histogram() -> void;
  auto test_usage_Population() -> void;
};
#endiv
#divert <cpp>
#import tests.unit.measurement.io.Fixture
#import tests.unit.measurement.Limits
auto tests::unit::measurement::Fixture::suite() -> Suite {
  auto series = Stream{"measurement"sv};
  series << []{
             auto use = Stream{"usage"sv};
             use << add("Count", &Fixture::test_usage_Count)
                  << add("Specimen", &Fixture::test_usage_Specimen)
                  << add("Result", &Fixture::test_usage_Result)
                  << add("Simple", &Fixture::test_usage_Simple)
                  << add("Histogram", &Fixture::test_usage_Histogram)
                  << add("Population", &Fixture::test_usage_Population)
                  << END;
             return use;
           }()
         << add<io::Fixture>()
         << add<Limits>()
         << END;
  return settle(series);
}
#import tunitas.keyston.measurement.Count
#import tunitas.keyston.measurement.Specimen
#import tunitas.keyston.measurement.Result
#import tunitas.keyston.measurement.Simple
#import tunitas.keyston.measurement.Histogram
#import tunitas.keyston.measurement.Population
namespace tests::unit::measurement { 
  auto Fixture::test_usage_Count() -> void {
    using Subject = library::Count;
    auto subject0 = Subject{0};
    auto subject1 = Subject{1};
    swap(subject0, subject1);
    require(ASSERTION, 0u == subject1.count());
  }
  auto Fixture::test_usage_Specimen() -> void {
    using Subject = library::Specimen;
    auto subject0 = Subject{0};
    auto subject1 = Subject{1};
    swap(subject0, subject1);
    require(ASSERTION, 0u == underlying(subject1));
    require(ASSERTION, 1u == underlying(subject0));
  }
  auto Fixture::test_usage_Result() -> void {
    using Subject = library::Result;
    auto subject0 = Subject{0};
    auto subject1 = Subject{1};
    swap(subject0, subject1);
    require(ASSERTION, 0u == underlying(subject1));
    require(ASSERTION, 1u == underlying(subject0));
  }
  auto Fixture::test_usage_Simple() -> void {
    using Subject = library::Simple;
    auto subject0 = Subject{0};
    auto subject1 = Subject{1};
    swap(subject0, subject1);
    require(ASSERTION, 0u == underlying(subject1));
    require(ASSERTION, 1u == underlying(subject0));
  }
  auto Fixture::test_usage_Histogram() -> void {
    using Subject = library::Histogram;
    auto subject = Subject{};
    require(ASSERTION, 0 < subject.size());
  }
  auto Fixture::test_usage_Population() -> void {
    using Subject = library::Population;
    auto subject = Subject{33uz, library::Count{99}};
    require(ASSERTION, 33uz == subject.size());
  }
}
#endiv
