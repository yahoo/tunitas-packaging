// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::Fixture : public cppunit::test::Fixture {
  static auto suite() -> cppunit::Test *;
  auto test_something() -> void;
};
#endiv
#divert <cpp>
#import tests.unit.array.Fixture
#import tests.unit.keyston.Fixture
#import tests.unit.protocol.Fixture
#import tests.unit.run.Fixture
#import tests.unit.time.Fixture
#import tests.unit.wire.Fixture
#import tests.unit.want.Fixture
auto tests::unit::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"unit"};
  series << add("something", &Fixture::test_something)
         << add<array::Fixture>()
         << add<keyston::Fixture>()
         << add<protocol::Fixture>()
         << add<run::Fixture>()
         << add<time::Fixture>()
         << add<wire::Fixture>()
         << add<want::Fixture>()
         << END;
  return finalize(series);
}
namespace tests::unit {
  auto Fixture::test_something() -> void {
    require(ASSERTION, true);
  }
}
#endiv
