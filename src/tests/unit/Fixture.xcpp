// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
};
#endiv
#divert <cpp>
#import tests.unit.channel.Fixture
#import tests.unit.concurrent.Fixture
#import tests.unit.count.Fixture
#import tests.unit.denniston.Fixture
#import tests.unit.dictionary.Fixture
#import tests.unit.driver.Fixture
#import tests.unit.exception.Fixture
#import tests.unit.index.Fixture
#import tests.unit.job.Fixture
#import tests.unit.log.Fixture
#import tests.unit.network.Fixture
#import tests.unit.nonstd.Fixture
#import tests.unit.preparation.Fixture
#import tests.unit.process.Fixture
#import tests.unit.protocol.Fixture
#import tests.unit.report.Fixture
#import tests.unit.role.Fixture
#import tests.unit.service.Fixture
#import tests.unit.task.Fixture
#import tests.unit.variable.Fixture
#import tests.unit.version.Fixture
#import tests.unit.want.Fixture
#import tests.unit.world.Fixture
auto tests::unit::Fixture::suite() -> Suite {
  auto series = Stream{"unit"sv};
  series << add<channel::Fixture>()
         << add<concurrent::Fixture>()
         << add<count::Fixture>()
         << add<denniston::Fixture>()
         << add<dictionary::Fixture>()
         << add<driver::Fixture>()
         << add<exception::Fixture>()
         << add<index::Fixture>()
         << add<job::Fixture>()
         << add<log::Fixture>()
         << add<network::Fixture>()
         << add<nonstd::Fixture>()
         << add<preparation::Fixture>()
         << add<process::Fixture>()
         << add<protocol::Fixture>()
         << add<report::Fixture>()
         << add<role::Fixture>()
         << add<service::Fixture>()
         << add<task::Fixture>()
         << add<variable::Fixture>()
         << add<version::Fixture>()
         << add<want::Fixture>()
         << add<world::Fixture>()
         << END;
  return settle(series);
}
#endiv
