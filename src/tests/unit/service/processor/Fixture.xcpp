// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::service::processor { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.denniston.Species
struct tests::unit::service::processor::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using Species = ::tunitas::denniston::Species;
  //
  auto test_usage_Processor() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::service::processor::Fixture::suite() -> Suite {
  auto series = Stream{"processor"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Processor", &Fixture::test_usage_Processor)
                  << END;
              return use;
            }()
         << END;
  return settle(series);
}
#import tunitas.denniston.service.processor.Processor
#import tunitas.denniston.World
#import tunitas.keyston.entropy.Source
namespace tests::unit::service::processor {
  auto Fixture::test_usage_Processor() -> void {
    auto source = ::tunitas::keyston::entropy::Source{};
    auto world = ::tunitas::denniston::World{source};
    using Subject = library::Processor;
    auto subject = Subject{world, Species::PROCESSOR1};
    require(ASSERTION, sizeof (subject));
  }
}
#endiv
