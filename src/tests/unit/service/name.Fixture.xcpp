// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::service::name {
  class Fixture;
  namespace library = ::tunitas::denniston::service;
}
#endiv
#divert <hpp>
#import tunitas.denniston.service.Name
struct tests::unit::service::name::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using Subject = library::Name;
  //
  auto test_is_client() -> void;
  auto test_is_collector() -> void;
  auto test_is_configuration() -> void;
  auto test_is_directory() -> void;
  auto test_is_gateway() -> void;
  auto test_is_processor() -> void;
  //
  auto test_make_client_name() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::service::name::Fixture::suite() -> Suite {
  auto series = Stream{"name"sv};
  series << []{
              auto is = Stream{"is"sv};
              is << add("Client", &Fixture::test_is_client)                 
                 << add("Collector", &Fixture::test_is_collector)
                 << add("Configuration", &Fixture::test_is_configuration)
                 << add("Directory", &Fixture::test_is_directory)
                 << add("Gateway", &Fixture::test_is_gateway)
                 << add("Processor", &Fixture::test_is_processor)
                 << END;
              return is;
            }()
         << add("make_client_name", &Fixture::test_make_client_name)
         << END;
  return settle(series);
}
namespace tests::unit::service::name {
  auto Fixture::test_is_client() -> void {
    require(ASSERTION, not is_client(Subject::COLLECTOR));
    require(ASSERTION, not is_client(Subject::CONFIGURATION));
    require(ASSERTION, not is_client(Subject::DIRECTORY));
    require(ASSERTION, not is_client(Subject::PROCESSOR2));
    require(ASSERTION, not is_client(Subject::PROCESSOR1));
    require(ASSERTION, not is_client(Subject::GATEWAY));
    require(ASSERTION, is_client(Subject::CLIENT));
    require(ASSERTION, is_client(Subject{1}));
    require(ASSERTION, is_client(Subject{2}));
    require(ASSERTION, is_client(Subject{3}));
    require(ASSERTION, is_client(Subject{4}));
  }
  auto Fixture::test_is_collector() -> void {
    require(ASSERTION, is_collector(Subject::COLLECTOR));
    require(ASSERTION, not is_collector(Subject::CONFIGURATION));
    require(ASSERTION, not is_collector(Subject::DIRECTORY));
    require(ASSERTION, not is_collector(Subject::PROCESSOR2));
    require(ASSERTION, not is_collector(Subject::PROCESSOR1));
    require(ASSERTION, not is_collector(Subject::GATEWAY));
    require(ASSERTION, not is_collector(Subject::CLIENT));
  }
  auto Fixture::test_is_configuration() -> void {
    require(ASSERTION, is_configuration(Subject::CONFIGURATION));
    require(ASSERTION, not is_configuration(Subject::COLLECTOR));
    require(ASSERTION, not is_configuration(Subject::DIRECTORY));
    require(ASSERTION, not is_configuration(Subject::PROCESSOR2));
    require(ASSERTION, not is_configuration(Subject::PROCESSOR1));
    require(ASSERTION, not is_configuration(Subject::GATEWAY));
    require(ASSERTION, not is_configuration(Subject::CLIENT));
  }
  auto Fixture::test_is_directory() -> void {
    require(ASSERTION, not is_directory(Subject::COLLECTOR));
    require(ASSERTION, not is_directory(Subject::CONFIGURATION));
    require(ASSERTION, not is_directory(Subject::PROCESSOR2));
    require(ASSERTION, not is_directory(Subject::PROCESSOR1));
    require(ASSERTION, not is_directory(Subject::GATEWAY));
    require(ASSERTION, not is_directory(Subject::CLIENT));
  }
  auto Fixture::test_is_gateway() -> void {
    require(ASSERTION, not is_gateway(Subject::COLLECTOR));
    require(ASSERTION, not is_gateway(Subject::CONFIGURATION));
    require(ASSERTION, not is_gateway(Subject::DIRECTORY));
    require(ASSERTION, not is_gateway(Subject::PROCESSOR2));
    require(ASSERTION, not is_gateway(Subject::PROCESSOR1));
    require(ASSERTION, is_gateway(Subject::GATEWAY));
    require(ASSERTION, not is_gateway(Subject::CLIENT));
  }
  auto Fixture::test_is_processor() -> void {
    require(ASSERTION, not is_processor(Subject::COLLECTOR));
    require(ASSERTION, not is_processor(Subject::CONFIGURATION));
    require(ASSERTION, not is_processor(Subject::DIRECTORY));
    require(ASSERTION, is_processor(Subject::PROCESSOR2));
    require(ASSERTION, is_processor(Subject::PROCESSOR1));
    require(ASSERTION, not is_processor(Subject::GATEWAY));
    require(ASSERTION, not is_processor(Subject::CLIENT));
  }
  auto Fixture::test_make_client_name() -> void {
    auto observed = library::make_client_name(3);
    auto expected = Subject{4};
    require(ASSERTION, expected == observed);
  }
}
#endiv
