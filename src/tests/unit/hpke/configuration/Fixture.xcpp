// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::hpke::configuration { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.hpke.Side
struct tests::unit::hpke::configuration::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using enum ::tunitas::keyston::hpke::Side;
  //
  auto test_usage_Public() -> void;
  auto test_usage_Secret() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::hpke::configuration::Fixture::suite() -> Suite {
  auto series = Stream{"configuration"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << []{
                       auto con = Stream{"Configuration"sv};
                       con << add("PUBLIC", &Fixture::test_usage_Public)
                           << add("SECRET", &Fixture::test_usage_Secret)
                           << END;
                       return con;
                     }()
                 << END;
              return use;
            }()
         << END;
  return settle(series);
}
#import tunitas.keyston.hpke.configuration.Configuration
namespace tests::unit::hpke::configuration {
  auto Fixture::test_usage_Public() -> void {
    using Subject = library::Configuration<PUBLIC>;
    auto subject = Subject{};
    require(ASSERTION, sizeof (subject));
  }
  auto Fixture::test_usage_Secret() -> void {
    using Subject = library::Configuration<SECRET>;
    auto subject = Subject{};
    require(ASSERTION, sizeof (subject));
  }
}
#endiv
