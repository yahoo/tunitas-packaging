// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::vdaf { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.Scheme
struct tests::unit::vdaf::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using enum ::tunitas::keyston::Scheme;
  //
  auto test_usage_Name() -> void;
};
#endiv
#divert <cpp>
#import tunitas.keyston.vdaf.Configuration
#import tunitas.keyston.vdaf.Definition
#import tunitas.keyston.vdaf.Executor
#import tests.unit.vdaf.Configuration
#import tests.unit.vdaf.Definition
#import tests.unit.vdaf.Executor
#import tests.unit.vdaf.Name
#import tests.unit.vdaf.numeric.Fixture
#import tests.unit.vdaf.protocol.Fixture
auto tests::unit::vdaf::Fixture::suite() -> Suite {
  auto series = Stream{"vdaf"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Name", &Fixture::test_usage_Name)
                  << END;
              return use;
            }()
         << add<Name>()
         << []{
              auto cfg = Stream{"Configuration"sv};
              cfg << add<Configuration<library::Configuration<NUMERIC>>>()
                  << add<Configuration<library::Configuration<PROTOCOL>>>()
                  << END;
              return cfg;
            }()
         << []{
              auto def = Stream{"Definition"sv};
              def << add<Definition<library::Definition<NUMERIC>, library::Configuration<NUMERIC>>>()
                  << add<Definition<library::Definition<PROTOCOL>, library::Configuration<PROTOCOL>>>()
                  << END;
              return def;
            }()
         << []{
              auto exe = Stream{"Executor"sv};
              exe << add<Executor<library::Executor<NUMERIC>, library::Definition<NUMERIC>, library::Configuration<NUMERIC>>>()
                  << add<Executor<library::Executor<PROTOCOL>, library::Definition<PROTOCOL>, library::Configuration<PROTOCOL>>>()
                  << END;
              return exe;
            }()
         << add<numeric::Fixture>()
         << add<protocol::Fixture>()
         << END;
  return settle(series);
}
#import tunitas.keyston.vdaf.Name
namespace tests::unit::vdaf {
  auto Fixture::test_usage_Name() -> void {
    using Subject = library::Name;
    auto subject = Subject{};
    require(ASSERTION, sizeof (subject));
    auto subject0 = Subject{0};
    auto subject1 = Subject{1};
    swap(subject0, subject1);
    // The other testers wil examine the output value; here we just call the core function to prove it exists & is callable
    render(subject);
  }
}
#endiv
