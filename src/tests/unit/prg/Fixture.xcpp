// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::prg { struct Fixture; }
#endiv
#divert <hpp>
#import tunitas.octets.Fixed
#import tunitas.keyston.prg.generator.Prototype
#import tests.unit.prg.Palette
struct tests::unit::prg::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  template<typename GENERATOR> auto test_usage_Generator() -> void;
};
#endiv
#divert <tpp>
namespace tests::unit::prg {
  template<typename GENERATOR> auto Fixture::test_usage_Generator() -> void {
    using Subject = GENERATOR;
    auto subject = Subject{generate_seed(), generate_custom(), generate_binder()}; // <----------- test this
    require(ASSERTION, sizeof(subject));
  }
}
#endiv
#divert <cpp>
#import tests.unit.prg.Generator
auto tests::unit::prg::Fixture::suite() -> Suite {
  auto series = Stream{"prg"sv};
  series << []{
             auto use = Stream{"usage"sv};
             use << add("SHA3", &Fixture::test_usage_Generator<library::Generator<SHA3_cSHAKE128>>)
                 << add("FIXED_KEY", &Fixture::test_usage_Generator<library::Generator<FIXED_KEY_AES128>>)
                 << END;
             return use;
           }()
         << add<Generator<library::Generator<SHA3_cSHAKE128>>>()
         << add<Generator<library::Generator<FIXED_KEY_AES128>>>()
         << END;
  return settle(series);
}
#endiv
