// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::prg {
  //
  // Palette of helpers.
  // Descendants only.
  //
  struct Palette;
}
#endiv
#divert <hpp>
#import nonstd.uint128_t
#import tunitas.keyston.octets.Fixed
#import tunitas.keyston.octets.Variable
#import tunitas.keyston.prg.generator.Prototype
#import tests.unit.prg.Palette
#import tunitas.Optional
struct tests::unit::prg::Palette {
protected:
  ~Palette() = default;
public:
  using Seed = ::tunitas::keyston::octets::Fixed<library::generator::Prototype::SEED_SIZE.count()>;
  using Custom = ::tunitas::keyston::octets::Variable;
  using Binder = ::tunitas::keyston::octets::Variable;
  using Generated = library::generator::Prototype::Output;
  //
  static auto dump(Generated const &) -> void;
  static auto generate_seed(::tunitas::Optional<nonstd::uint128_t> = {}) -> Seed;
  static auto generate_custom(::tunitas::Optional<nonstd::uint128_t> = {}) -> Custom;
  static auto generate_binder(::tunitas::Optional<nonstd::uint128_t> = {}) -> Binder;
protected:
  template<typename SOMETHING> static auto generate_by_number(::tunitas::Optional<nonstd::uint128_t>) -> SOMETHING;
  template<typename SOMETHING> static auto generate_by_string(::tunitas::Optional<nonstd::uint128_t>) -> SOMETHING;
};
#endiv
#divert <tpp>
#import tunitas.keyston.integer.to_octets
#import tunitas.keyston.octets.cast
#import tunitas.keyston.octets.View
#import nonstd.to_string
namespace tests::unit::prg {
  template<typename SOMETHING> auto Palette::generate_by_number(::tunitas::Optional<nonstd::uint128_t> init) -> SOMETHING {
    if (!init) {
      return SOMETHING{};
    } else {
      return ::tunitas::keyston::integer::to_octets<SOMETHING, std::endian::little>(*init);
    }
  }
  template<typename SOMETHING> auto Palette::generate_by_string(::tunitas::Optional<nonstd::uint128_t> init) -> SOMETHING {
    if (!init) {
      return SOMETHING{};
    } else {
#if 1 // [[FIXTHIS]] get a nonstd::to_string(...) that can accept nonstd::uint128_t ... which the nonstd <= 2.3.0 does not
      auto str = nonstd::to_string(static_cast<std::uint64_t>(*init));
#else
      auto str = nonstd::to_string(*init);
#endif
      auto redo = ::tunitas::keyston::octets::cast<::tunitas::keyston::octets::View>( std::span{str.data(), str.size()} );
      return SOMETHING{redo.begin(), redo.end()};
    }
  }
}
#endiv
#divert <cpp>
#import std.hex
#import std.dec
#import nonstd.setfill
#import nonstd.setwidth
namespace tests::unit::prg {
  auto Palette::generate_seed(::tunitas::Optional<nonstd::uint128_t> init) -> Seed     { return generate_by_number<Seed>(init); }
  auto Palette::generate_custom(::tunitas::Optional<nonstd::uint128_t> init) -> Custom { return generate_by_string<Custom>(init); }
  auto Palette::generate_binder(::tunitas::Optional<nonstd::uint128_t> init) -> Binder { return generate_by_string<Binder>(init); }
  auto Palette::dump(Generated const &generated) -> void {
    auto &out{std::cerr};
    if (generated.empty()) {
      out << "(empty)";
    } else {
      out << std::hex;
      for (auto each : generated) {
        out << nonstd::setfill('0') << nonstd::setwidth(2) << static_cast<unsigned>(each);
      }
      out << std::dec;
    }
    out << '\n';
  }
}
#endiv
