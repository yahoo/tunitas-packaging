// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.task
#import tunitas.keyston.protocol.id
#import tunitas.keyston.function // for function::Function
namespace tests::unit::protocol::task {
  class Fixture;
  namespace library = ::tunitas::keyston::protocol::task;
  namespace id = ::tunitas::keyston::protocol::id;
  namespace protocol = ::tunitas::keyston::protocol;
  using ::tunitas::keyston::function::Function;
}
#endiv
#divert <hpp>
#import tunitas.keyston.id.Generator
struct tests::unit::protocol::task::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Task() -> void;
protected:
  struct Generator {
    id::Generator<id::Task, id::generator::Policy::SERIAL> task_id{};
    id::Generator<id::Batch, id::generator::Policy::SERIAL> batch_id{};
  } generate{};
};
#endiv
#divert <cpp>
auto tests::unit::protocol::task::Fixture::suite() -> Suite {
  auto series = Stream{"task"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Task", &Fixture::test_usage_Task)
                  << END;
              return use;
            }()
         << END;
  return settle(series);
}
#import tunitas.keyston.protocol.task.Task
#import tunitas.keyston.protocol.query.Fixed_Size
namespace tests::unit::protocol::task {
  auto Fixture::test_usage_Task() -> void {
    using Subject = library::Task;
    auto subject0 = Subject{};
    auto subject1 = [this]{
                      auto ret = Subject{};
                      ret.id = generate.task_id();
                      ret.services.push_back(id::Service{});
                      ret.query = [this]{ // wow this is lugubrious
                                    using namespace protocol::query;
                                    using namespace protocol::query::batch;
                                    return Record<Type::FIXED_SIZE>{Fixed_Size{generate.batch_id()}};
                                  }();
                      ret.expiration = Subject::Expiration{};
                      ret.function = Function::SUM;
                      return ret;
                    }();
    require(ASSERTION, Function::SUM == subject1.function);
    swap(subject0, subject1);
    require(ASSERTION, Function::SUM == subject0.function);
  }
}
#endiv
