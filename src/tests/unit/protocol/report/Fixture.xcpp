// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::protocol::report { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::protocol::report::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Metadata() -> void;
  auto test_usage_Share() -> void;
  auto test_usage_Whole() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::protocol::report::Fixture::suite() -> Suite {
  auto series = Stream{"report"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Metadata", &Fixture::test_usage_Metadata)
                  << add("Share", &Fixture::test_usage_Share)
                  << add("Whole", &Fixture::test_usage_Whole)
                  << END;
              return use;
            }()
         << END;
  return settle(series);
}
#import tunitas.keyston.protocol.report.Metadata
#import tunitas.keyston.protocol.report.whole.Produced
#import tunitas.keyston.protocol.report.share.Produced
namespace tests::unit::protocol::report {
  auto Fixture::test_usage_Metadata() -> void {
    using Subject = library::Metadata;
    auto subject0 = Subject{};
    auto subject1 = Subject{};
    swap(subject0, subject1);
    require(ASSERTION, sizeof (subject0));
  }
  auto Fixture::test_usage_Share() -> void {
    using Subject = library::share::Produced;
    auto subject0 = Subject{};
    auto subject1 = Subject{};
    swap(subject0, subject1);
    require(ASSERTION, sizeof (subject0));
  }
  auto Fixture::test_usage_Whole() -> void {
    using Subject = library::whole::Produced;
    auto subject0 = Subject{};
    auto subject1 = Subject{};
    swap(subject0, subject1);
    require(ASSERTION, sizeof (subject0));
  }
}
#endiv
