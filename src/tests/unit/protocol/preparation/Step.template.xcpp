// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.protocol.preparation.step
#import tunitas.keyston.protocol.preparation.Mark
namespace tests::unit::protocol::preparation {
  namespace [[eponymous]] step {
    template<typename SUBJECT> class Step;
    namespace library = ::tunitas::keyston::protocol::preparation::step;
    using enum ::tunitas::keyston::protocol::preparation::Mark;
  }
  using step::Step;
}
#endiv
#divert <hpp>
#import tunitas.keyston.protocol.id // for id::Report
#import tunitas.keyston.protocol.preparation.Step
#import tunitas.keyston.protocol.preparation.step.Result
namespace tests::unit::protocol::preparation{
  template<typename SUBJECT> struct step::Step : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    using Result = library::Result;
    using Identifier = ::tunitas::keyston::protocol::id::Report;
    //
    // All the constructors MUST be specialized (they differ across library::Mark)
    auto test_constructor_default() -> void;
    auto test_constructor_conversion() -> void;
    auto test_constructor_undetermined() -> void;
    auto test_constructor_continued() -> void;
    auto test_constructor_finished() -> void;
    auto test_constructor_failed() -> void;
    auto test_constructor_positioned() -> void;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::protocol::preparation::step {
  template<typename _> auto Step<_>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << []{
                auto con = Stream{"constructor"sv};
                con << add("default", &Step::test_constructor_default)
                    << add("conversion", &Step::test_constructor_conversion)
                    << add("undetermined", &Step::test_constructor_undetermined)
                    << add("continued", &Step::test_constructor_continued)
                    << add("finished", &Step::test_constructor_finished)
                    << add("failed", &Step::test_constructor_failed)
                    << add("positioned", &Step::test_constructor_positioned)
                    << END;
                return con;
              }()
           << END;
    return settle(series);
  }
}
#endiv
