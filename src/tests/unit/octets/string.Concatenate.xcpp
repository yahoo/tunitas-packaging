// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::octets::string { struct Concatenate; }
#endiv
#divert <hpp>
#import tests.unit.octets.Palette
struct tests::unit::octets::string::Concatenate : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  template<unsigned> auto test_concatenate() -> void;
};
#endiv
#divert <cpp>
//
// The specializations MUST occur before suite() so that their address is known
//
#import tunitas.keyston.octets.string // for concatenate(...)
namespace tests::unit::octets::string {
  template<> auto Concatenate::test_concatenate<0>() -> void {
    auto got = library::concatenate(); // <--------------- test this
    require(ASSERTION, 0 == got.size());
  }
  template<> auto Concatenate::test_concatenate<1>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>()); // <--------------- test this
    require(ASSERTION, 2 == got.size());
  }
  template<> auto Concatenate::test_concatenate<2>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Fixed<2>>()); // <--------------- test this
    require(ASSERTION, 4 == got.size());
  }
  template<> auto Concatenate::test_concatenate<3>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Fixed<2>>(), generate<Fixed<2>>()); // <--------------- test this
    require(ASSERTION, 6 == got.size());
  }
  namespace {
    inline constexpr auto const COUNT = 4uz;
  }
}
#import std.make_index_sequence
#import std.index_sequence
#import std.to_string
auto tests::unit::octets::string::Concatenate::suite() -> Suite {
  auto series = Stream{"concatenate"sv};
  [&series]<Size... INDEX>(std::index_sequence<INDEX...>) {
    ((series << add(std::to_string(INDEX), &Concatenate::test_concatenate<INDEX>)), ... );
  }(std::make_index_sequence<COUNT>{});
  return settle(series);
}
#endiv
