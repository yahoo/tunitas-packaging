// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::octets { struct Concatenate; }
#endiv
#divert <hpp>
#import tests.unit.octets.Palette
struct tests::unit::octets::Concatenate : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  template<unsigned> auto test_variable() -> void;
  template<unsigned> auto test_fixed() -> void;
};
#endiv
#divert <cpp>
//
// The specializations MUST occur before suite() so that their address is known
//
#import tunitas.keyston.octets.concatenate
namespace tests::unit::octets {
  template<> auto Concatenate::test_variable<0>() -> void {
    auto got = library::concatenate(); // <--------------- test this
    require(ASSERTION, 0 == got.size());
  }
  template<> auto Concatenate::test_variable<1>() -> void {
    auto got = library::concatenate(generate<Variable>(2)); // <--------------- test this
    require(ASSERTION, 2 == got.size());
  }
  template<> auto Concatenate::test_variable<2>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Variable>(2)); // <--------------- test this (mixed use, see?)
    require(ASSERTION, 4 == got.size());
  }
  template<> auto Concatenate::test_variable<3>() -> void {
    auto got = library::concatenate(generate<Variable>(2), generate<Variable>(2), generate<Variable>(2)); // <--------------- test this
    require(ASSERTION, 6 == got.size());
  }
  namespace {
    inline constexpr auto const COUNT_VARIABLE = 4uz;
  }
  template<> auto Concatenate::test_fixed<0>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>()); // <--------------- test this (must must have at least one for fixed concatenation)
    require(ASSERTION, 2 == got.size());
  }
  template<> auto Concatenate::test_fixed<1>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Fixed<2>>()); // <--------------- test this (fixed only)
    require(ASSERTION, 4 == got.size());
  }
  template<> auto Concatenate::test_fixed<2>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Fixed<2>>(), generate<Fixed<2>>()); // <--------------- test this (fixed only)
    require(ASSERTION, 6 == got.size());
  }
  template<> auto Concatenate::test_fixed<3>() -> void {
    auto got = library::concatenate(generate<Fixed<2>>(), generate<Fixed<2>>(), generate<Fixed<2>>(), generate<Fixed<2>>()); // <--- test this (fixed only)
    require(ASSERTION, 8 == got.size());
  }
  namespace {
    inline constexpr auto const COUNT_FIXED = 4uz;
  }
}
#import tunitas.sequence.Sequence
#import std.to_string
auto tests::unit::octets::Concatenate::suite() -> Suite {
  auto series = Stream{"concatenate"sv};
  series << []{
             auto var = Stream{"variable"sv};
             [&var]<Size... INDEX>(::tunitas::sequence::Sequence::Pack<INDEX...>) {
               ((var << add(std::to_string(INDEX), &Concatenate::test_variable<INDEX>)), ... );
             }(::tunitas::sequence::Sequence::make<COUNT_VARIABLE>());
             return var;
           }()
         << []{
             auto fix = Stream{"fixed"sv};
             [&fix]<Size... INDEX>(::tunitas::sequence::Sequence::Pack<INDEX...>) {
               ((fix << add(std::to_string(INDEX), &Concatenate::test_fixed<INDEX>)), ... );
             }(::tunitas::sequence::Sequence::make<COUNT_FIXED>());
             return fix;
           }()
         << END;
    return settle(series);
}
#endiv
