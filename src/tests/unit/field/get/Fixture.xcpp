// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::field::get { struct Fixture; }
#endiv
#divert <hpp>
#import tests.unit.field.get.Palette
struct tests::unit::field::get::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  template<required::Small SMALL> auto test_usage_Extract() -> void;
  template<required::Small SMALL> auto test_usage_Fits() -> void;
};
#endiv
#divert <tpp>
#import tunitas.keyston.field.get.Extract
#import tunitas.keyston.field.get.Fits
#import tunitas.number.mp.convert
namespace tests::unit::field::get {
  template<required::Small SMALL> auto Fixture::test_usage_Extract() -> void {
    static_assert(!std::same_as<SMALL, char unsigned>);
    static_assert(!std::same_as<SMALL, int short unsigned>);
    static_assert(!std::same_as<SMALL, int unsigned>);
    using Subject = library::Extract<SMALL>;
    { auto original = Limits<SMALL>::min() + SMALL{1};
      auto candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)};
      auto got = Subject::get(candidate.impl);
      require(ASSERTION, original == got); }
    { auto original = SMALL{};
      auto candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)};
      auto got = Subject::get(candidate.impl);
      require(ASSERTION, original == got); }
    { auto original = Limits<SMALL>::max() - 1;
      auto candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)};
      auto got = Subject::get(candidate.impl);
      require(ASSERTION, original == got); }
    // test for the exception in the Driver
  }
  template<required::Small SMALL> auto Fixture::test_usage_Fits() -> void {
    static_assert(!std::same_as<SMALL, char unsigned>);
    static_assert(!std::same_as<SMALL, int short unsigned>);
    static_assert(!std::same_as<SMALL, int unsigned>);
    using Subject = library::Fits<SMALL>;
    { auto original = Limits<SMALL>::min();
      Candidate candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)} - 1;
      auto got = Subject::fit(candidate.impl);
      require(ASSERTION, false == got); }
    { auto original = Limits<SMALL>::min();
      Candidate candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)} + 1;
      auto got = Subject::fit(candidate.impl);
      require(ASSERTION, true == got); }
    { auto original = SMALL{};
      Candidate candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)};
      auto got = Subject::fit(candidate.impl);
      require(ASSERTION, true == got); }
    { auto original = Limits<SMALL>::max();
      Candidate candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)} - 1;
      auto got = Subject::fit(candidate.impl);
      require(ASSERTION, true == got); }
    { auto original = Limits<SMALL>::max();
      Candidate candidate = Candidate{::tunitas::number::mp::convert<mpz_class>(original)} + 1;
      auto got = Subject::fit(candidate.impl);
      require(ASSERTION, false == got); }
  }
}
#endiv
#divert <cpp>
#import tests.unit.field.get.Fits
#import tests.unit.field.get.Extract
#import nonstd.uint128_t
auto tests::unit::field::get::Fixture::suite() -> Suite {
  auto series = Stream{"field"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << []{
                       auto ext = Stream{"Extract"sv};
                       ext << add("int long unsigned", &Fixture::test_usage_Extract<int long unsigned>)
                           << add("int long long unsigned", &Fixture::test_usage_Extract<int long long unsigned>)
                           << add("uint128_t", &Fixture::test_usage_Extract<nonstd::uint128_t>)
#if 0
                           << add("int unsigned", &Fixture::test_usage_Extract<int unsigned>)
                           << add("char unsigned", &Fixture::test_usage_Extract<char unsigned>)
                           << add("int short unsigned", &Fixture::test_usage_Extract<int short unsigned>)
#endif
                           << END;
                       return ext;
                     }()
                  << []{
                       auto ext = Stream{"Fits"sv};
                       ext << add("int long unsigned", &Fixture::test_usage_Fits<int long unsigned>)
                           << add("int long long unsigned", &Fixture::test_usage_Fits<int long long unsigned>)
                           << add("uint128_t", &Fixture::test_usage_Fits<nonstd::uint128_t>)
#if 0
                           << add("int unsigned", &Fixture::test_usage_Fits<int unsigned>)
                           << add("char unsigned", &Fixture::test_usage_Fits<char unsigned>)
                           << add("int short unsigned", &Fixture::test_usage_Fits<int short unsigned>)
#endif
                           << END;
                       return ext;
                     }()
                  << END;
              return use;
            }()
         << []{
              auto ext = Stream{"Extract"sv};
              ext << add<Extract<library::Extract<int short unsigned>>>()
                  << add<Extract<library::Extract<int unsigned>>>()
                  << add<Extract<library::Extract<int long unsigned>>>()
                  << add<Extract<library::Extract<int long long unsigned>>>()
                  << add<Extract<library::Extract<nonstd::uint128_t>>>()
#if 0
                  << add<Extract<library::Extract<char unsigned>>>()
#endif
                  << END;
              return ext;
            }()
         << []{
              auto ext = Stream{"Fits"sv};
              ext << add<Fits<library::Fits<int short unsigned>>>()
                  << add<Fits<library::Fits<int unsigned>>>()
                  << add<Fits<library::Fits<int long unsigned>>>()
                  << add<Fits<library::Fits<int long long unsigned>>>()
                  << add<Fits<library::Fits<nonstd::uint128_t>>>()
#if 0
                  << add<Fits<library::Fits<char unsigned>>>()
#endif
                  << END;
              return ext;
            }()
         << END;
  return settle(series);
}
#endiv
