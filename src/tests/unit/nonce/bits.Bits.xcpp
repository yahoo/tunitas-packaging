// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::nonce::bits {
  template<typename SUBJECT> struct Bits;
}
#endiv
#divert <hpp>
#import tunitas.keyston.entropy.Serial
#import tunitas.keyston.nonce.Generator
namespace tests::unit::nonce {
  template<typename SUBJECT> struct bits::Bits : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    //
    auto test_constructor_default() -> void;
    auto test_constructor_copy() -> void;
    auto test_assignment_copy() -> void;
    auto test_operator_eq() -> void;
    auto test_operator_ne() -> void;
    auto test_ennumerate() -> void;
    auto test_ennumerate2() -> void;
  protected:
    using Entropy = ::tunitas::keyston::entropy::Serial;
    Entropy source{};
    library::Generator<Subject, Entropy> generate{source};
  };
}
#endiv
#divert <tpp>
#import tunitas.keyston.nonce.ennumerate
#import nonstd.int128.ostream // for operator<< on uint128_t
namespace tests::unit::nonce::bits {
  template<typename _> auto Bits<_>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << []{
                auto con = Stream{"constructor"sv};
                con << add("default", &Bits::test_constructor_default)
                    << add("copy", &Bits::test_constructor_copy)
                    << END;
                return con;
              }()
           << []{
                auto ass = Stream{"assignment"sv};
                ass << add("copy", &Bits::test_constructor_copy)
                    << END;
                return ass;
              }()
           << add("operator==", &Bits::test_operator_eq)
           << add("operator!=", &Bits::test_operator_ne)
           << add("ennumerate", &Bits::test_ennumerate)
           << add("ennumerate2", &Bits::test_ennumerate2)
           << END;
    return settle(series);
  }
  template<typename _> auto Bits<_>::test_constructor_default() -> void {
    auto subject = Subject{}; // <---------------------------------------- test this
    require(ASSERTION, sizeof (subject));
  }
  template<typename _> auto Bits<_>::test_constructor_copy() -> void {
    auto const specimen = generate();
    auto subject = Subject{specimen}; // <---------------------------------------- test this
    require(ASSERTION, sizeof (subject));
  }
  template<typename _> auto Bits<_>::test_assignment_copy() -> void {
    auto const specimen = generate();
    auto subject = Subject{};
    subject = specimen; // <---------------------------------------- test this
    require(ASSERTION, sizeof (subject));
  }
  template<typename _> auto Bits<_>::test_operator_eq() -> void {
    auto const a = generate();
    auto const b = generate();
    auto const c = a;
    require(ASSERTION, a == c);
    require(ASSERTION, !(a == b));
  }
  template<typename _> auto Bits<_>::test_operator_ne() -> void {
    auto const a = generate();
    auto const b = generate();
    auto const c = a;
    require(ASSERTION, a != b);
    require(ASSERTION, !(a != c));
  }
  template<typename _> auto Bits<_>::test_ennumerate() -> void {
    auto const generated = generate();
    auto const ennumerated = library::ennumerate(generated);
    // There is some possibility that it could be zero.
    using nonstd::int128::operator<<;
    std::cerr << "ennumerated = " << ennumerated << '\n';
  }
  template<typename _> auto Bits<_>::test_ennumerate2() -> void {
    if constexpr (!std::same_as<library::Bits<1>, Subject>) {
      auto const generated = generate();
      auto const [a, b] = library::ennumerate2(generated);
      // There is some possibility that both could be zero.
      using nonstd::int128::operator<<;
      std::cerr << "ennumerated2 = " << a << ", " << b << '\n';
    }
  }
}
#endiv
