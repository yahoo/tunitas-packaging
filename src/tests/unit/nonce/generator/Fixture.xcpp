// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::nonce::generator { struct Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.nonce.required.Nonce
#import tunitas.keyston.entropy.Serial
#import tests.unit.nonce.Palette
namespace tests::unit::nonce {
  struct generator::Fixture : public rigging::suite::Fixture, protected Palette {
    static auto suite() -> Suite;
    //
    template<required::Nonce NONCE> auto test_usage_Generator() -> void;
  protected:
    // We must use Serial here because the usage tests check that the generated value changes in check_for_changes(...)
    using Entropy = ::tunitas::keyston::entropy::Serial;
    Entropy source{};
  };
  namespace generator {
    template<> auto Fixture::test_usage_Generator<noncelib::Since<Palette::Seconds>>() -> void;
  }
}
#endiv
#divert <tpp>
#import tunitas.keyston.nonce.generator.Generator
#import tests.unit.nonce.generator.Check_For_Changes
namespace tests::unit::nonce::generator {
  template<required::Nonce NONCE> auto Fixture::test_usage_Generator() -> void {
    using Subject = library::Generator<NONCE, Entropy>;
    auto subject = Subject{source};
    // We'll test the non-zero values in and aroundx Generator<Subject>
    auto got = subject();
    Check_For_Changes<Subject>::check(subject, got);
  }
}
#endiv
#divert <cpp>
#import tests.unit.nonce.generator.Generator
#import tunitas.keyston.nonce.Bits
#import tunitas.keyston.nonce.Bundle
#import tunitas.keyston.nonce.Unsigned
#import tunitas.keyston.nonce.Element
#import tunitas.keyston.nonce.Generator
#import tunitas.keyston.nonce.Since
#import tunitas.keyston.integer
#import tunitas.keyston.field.Element
#import tunitas.array.Fixed
#import tunitas.keyston.octets.Fixed
auto tests::unit::nonce::generator::Fixture::suite() -> Suite {
  auto series = Stream{"Generator"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Bits<4>", &Fixture::test_usage_Generator<noncelib::Bits<16>>)
                  << add("Since<seconds>", &Fixture::test_usage_Generator<noncelib::Since<Seconds>>)
                  << add("Bits<4>,Since<seconds>", &Fixture::test_usage_Generator<noncelib::Bundle<noncelib::Bits<32>, noncelib::Since<Seconds>>>)
                  << add("Since<seconds>,Bits<4>", &Fixture::test_usage_Generator<noncelib::Bundle<noncelib::Since<Seconds>, noncelib::Bits<64>>>)
                  << add("Unsigned<uint128_t>", &Fixture::test_usage_Generator<noncelib::Unsigned<::tunitas::keyston::integer::uint128_t>>)
                  << add("Element<128>", &Fixture::test_usage_Generator<noncelib::Element<::tunitas::keyston::field::Element<128>>>)
                  << add("array::Fixed<Octet, 123>", &Fixture::test_usage_Generator<array::Fixed<Octet, 123>>)
                  << add("octets::Fixed<321>", &Fixture::test_usage_Generator<octets::Fixed<321>>)
                  << END;
              return use;
            }()
         << add<generator::Generator<library::Generator<noncelib::Bits<16>, Entropy>>>()
         << add<generator::Generator<library::Generator<noncelib::Since<Seconds>, Entropy>>>()
         << add<generator::Generator<library::Generator<noncelib::Bundle<noncelib::Bits<32>, noncelib::Since<Seconds>>, Entropy>>>()
         << add<generator::Generator<library::Generator<noncelib::Bundle<noncelib::Since<Seconds>, noncelib::Bits<64>>, Entropy>>>()
         << []{
              auto oct = Stream{"array-of-octets"sv};
              oct << add<generator::Generator<library::Generator<array::Fixed<Octet, 0>, Entropy>>>()
                  << add<generator::Generator<library::Generator<array::Fixed<Octet, 1>, Entropy>>>()
                  << add<generator::Generator<library::Generator<array::Fixed<Octet, 10>, Entropy>>>()
                  << END;
              return oct;
         }()
         << []{
              auto oct = Stream{"octets"sv};
              oct << add<generator::Generator<library::Generator<octets::Fixed<0>, Entropy>>>()
                  << add<generator::Generator<library::Generator<octets::Fixed<1>, Entropy>>>()
                  << add<generator::Generator<library::Generator<octets::Fixed<10>, Entropy>>>()
                  << END;
              return oct;
         }()
         << []{
              auto uns = Stream{"Unsigned"sv};
              uns << add<generator::Generator<library::Generator<noncelib::Unsigned<::tunitas::keyston::integer::uint64_t>, Entropy>>>()
                  << add<generator::Generator<library::Generator<noncelib::Unsigned<::tunitas::keyston::integer::uint128_t>, Entropy>>>()
                  << add<generator::Generator<library::Generator<noncelib::Unsigned<::tunitas::keyston::integer::uint256_t>, Entropy>>>()
                  << END;
              return uns;
         }()
         << []{
              auto ele = Stream{"Element"sv};
              ele << add<generator::Generator<library::Generator<noncelib::Element<::tunitas::keyston::field::Element<64>>, Entropy>>>()
                  << add<generator::Generator<library::Generator<noncelib::Element<::tunitas::keyston::field::Element<128>>, Entropy>>>()
                  << add<generator::Generator<library::Generator<noncelib::Element<::tunitas::keyston::field::Element<255>>, Entropy>>>()
                  << END;
              return ele;
         }()
         << END;
  return settle(series);
}
#import tests.unit.nonce.generator.Check_For_Changes
namespace tests::unit::nonce::generator {
  template<> auto Fixture::test_usage_Generator<noncelib::Since<Palette::Seconds>>() -> void {
    using Subject = library::Generator<noncelib::Since<Seconds>, Entropy>;
     auto subject = Subject{source};
    // We'll test the non-zero values in and around Generator<Subject>
    auto got = subject();
    Check_For_Changes<Subject>::check(subject, got);
  }
}
#endiv
