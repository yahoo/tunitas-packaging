// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.InstanceOf
#import tunitas.keyston.nonce.Generator
namespace tests::unit::nonce::generator {
  template<required::InstanceOf<library::Generator> SUBJECT> struct Generator;
}
#endiv
#divert <hpp>
#import tunitas.keyston.entropy.None
#import tunitas.keyston.nonce.Bundle
#import tunitas.keyston.nonce.Since
#import tests.unit.nonce.Palette
#import tests.unit.nonce.generator.Check_For_Changes
namespace tests::unit::nonce {
  template<required::InstanceOf<generator::library::Generator> SUBJECT> struct generator::Generator : public rigging::suite::Fixture, protected Palette {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    //
    auto test_constructor() -> void;
    auto test_operator_call() -> void;
  protected:
    using Entropy = typename Subject::Entropy;
    Entropy source{};
    using Check_For_Changes = generator::Check_For_Changes<Subject>;
  };
}
#endiv
#divert <tpp>
namespace tests::unit::nonce::generator {
  template<typename _> auto Generator<_>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << add("constructor", &Generator::test_constructor)
           << add("operator()", &Generator::test_operator_call)
           << END;
    return settle(series);
  }
  template<typename _> auto Generator<_>::test_constructor() -> void {
    auto subject = Subject{source};
    require(ASSERTION, sizeof (subject));
  }
  template<typename _> auto Generator<_>::test_operator_call() -> void {
    auto subject = Subject{source};
    auto got1 = subject();
    Check_For_Changes::check(subject, got1);
  }
}
#endiv
