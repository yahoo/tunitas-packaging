// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::nonce::generator {
  template<typename SUBJECT> struct Generator;
}
#endiv
#divert <hpp>
#import tunitas.keyston.entropy.None
#import tests.unit.nonce.Palette
#import tunitas.keyston.nonce.Bundle
#import tunitas.keyston.nonce.Since
namespace tests::unit::nonce {
  template<typename SUBJECT> struct generator::Generator : public rigging::suite::Fixture, protected Palette {
    static auto suite() -> Suite;
    //
    using Subject = SUBJECT;
    //
    auto test_constructor() -> void;
    auto test_operator_call() -> void;
  protected:
    using Entropy = typename Subject::Entropy;
    Entropy source{};
    // Any other Bundles of Since with wider precision we don't detect and can't remediate around
    inline static constexpr auto GENERATOR_OF_SINCE = ((std::same_as<typename Subject::Result, noncelib::Since<Seconds>> ||
                                                        std::same_as<typename Subject::Result, noncelib::Since<Milliseconds>> ||
                                                        std::same_as<typename Subject::Result, noncelib::Since<Microseconds>>)
                                                       ||
                                                       (std::same_as<typename Subject::Result, noncelib::Bundle<noncelib::Since<Seconds>>> ||
                                                        std::same_as<typename Subject::Result, noncelib::Bundle<noncelib::Since<Milliseconds>>> ||
                                                        std::same_as<typename Subject::Result, noncelib::Bundle<noncelib::Since<Microseconds>>>));
  };
};
#endiv
#divert <tpp>
namespace tests::unit::nonce::generator {
  template<typename _> auto Generator<_>::suite() -> Suite {
    auto series = Stream{typeid(Subject)};
    series << add("constructor", &Generator::test_constructor)
           << add("operator()", &Generator::test_operator_call)
           << END;
    return settle(series);
  }
  template<typename _> auto Generator<_>::test_constructor() -> void {
    auto subject = Subject{source};
    require(ASSERTION, sizeof (subject));
  }
  template<typename _> auto Generator<_>::test_operator_call() -> void {
    auto subject = Subject{source};
    auto got1 = subject();
    auto check_for_changes = [&subject, got1]{
                               auto got2 = subject();
                               require(ASSERTION, got1 != got2);
                             };
    if constexpr (GENERATOR_OF_SINCE) {
        if (Palette::delay<Seconds>()) {
        check_for_changes();
      }
    } else {
      check_for_changes();
    }
  }
}
#endiv
