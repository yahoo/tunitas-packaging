// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::popularity { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.exception.Aspect
struct tests::unit::popularity::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Population() -> void;
  auto test_usage_Prefixes() -> void;
protected:
  using Failure = ::tunitas::keyston::exception::Aspect;
};
#endiv
#divert <cpp>
#import tests.unit.popularity.Prefixes
#import tests.unit.popularity.Population
auto tests::unit::popularity::Fixture::suite() -> Suite {
  auto series = Stream{"popularity"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Prefixes", &Fixture::test_usage_Prefixes)
                  << add("Population", &Fixture::test_usage_Population)
                  << END;
              return use;
            }()
         << add<Population>()
         << add<Prefixes>()
         << END;
  return settle(series);
}
#import tunitas.keyston.popularity.Population
#import tunitas.keyston.popularity.Prefixes
namespace tests::unit::popularity {
  auto Fixture::test_usage_Prefixes() -> void {
    using Subject = library::Prefixes;
    auto subject = Subject{};
    require(ASSERTION, sizeof(subject));
    require(ASSERTION, 0 == subject.size());
    subject.push_back(Subject::Value{1});
    subject.push_back(Subject::Value{2});
    subject.push_back(Subject::Value{3});
    require(ASSERTION, 3u == subject.size());
  }
  auto Fixture::test_usage_Population() -> void {
    using Subject = library::Population;
    auto subject = Subject(33uz, Subject::Value{99});
    require(ASSERTION, 33uz == subject.size());
    require(ASSERTION, subject == subject); // ...... so operator== exists
    require(ASSERTION, !(subject != subject)); // ... so operator!= exists
  }
}
#endiv
