// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::exhibition::inventory {
  //
  // The inventory of exhibitions.
  //
  // Specification:
  //
  //   It's a map, lookup by name.
  //   Call the exhibition function to emit on an ostream
  //
  // Design:
  //
  //   Obvious, when you think bout it.
  //   std::less<> is std::less<void> which allows for deduced comparisons (since C++14)
  //
  // Usage:
  //
  //   Hack The Spew (this is a test, rig after all)
  //
  //   Also, see tests::exhibition::main(...)
  //   To wit:
  //        auto inventory = Inventory{};
  //        auto found = inventory.find(word);
  //        if (INVENTORY.end() == found) {
  //          ...complain...
  //        } else {
  //          found->second();
  //        }
  //      }
  //
  //
  struct Inventory;
}
#endiv
#divert <hpp>
#import tunitas.string.Storage
#import std.function
#import std.less
#import std.ostream
#import std.map
#import tunitas.keyston.formatter.Formatter
namespace tests::exhibition {
  namespace inventory {
    inline constexpr auto format(Inventory const &i) -> formatter::Formatter<Inventory, Inventory const &> { return {i}; }
  }
  struct inventory::Inventory : private std::map<tunitas::string::Storage, std::function<void (std::ostream &)>, std::less<>> {
    using Ancestor = std::map<tunitas::string::Storage, std::function<void (std::ostream &)>, std::less<>>;
  public:
    using Key = Ancestor::key_type;
    using Mapped = Ancestor::mapped_type;
    using Value = Ancestor::value_type;
    Inventory();
    Inventory(Inventory const &) = delete; // why would you need to copy one of these?
    //
    using Ancestor::find;
    using Ancestor::begin;
    using Ancestor::end;
  };
}
#import tests.exhibition.inventory.io
#endiv
#divert <cpp>
#import tests.exhibition.inventory.Recital
namespace tests::exhibition::inventory {
  Inventory::Inventory()
    : Ancestor{{"count", Recital<PRIO, PRIO3_COUNT>::show},
               {"sum", Recital<PRIO, PRIO3_SUM>::show},
               {"histogram", Recital<PRIO, PRIO3_HISTOGRAM>::show},
               {"poplar", Recital<POPLAR, POPLAR1>::show},
               {"doplar", Recital<POPLAR, DOPLAR>::show}}
  { }
}
#endiv
