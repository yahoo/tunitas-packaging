// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::flow { struct Invocations; }
#endiv
#divert <hpp>
#import rigging.app.fixture.Core
#import tests.fixture.Mainly
#import tests.fixture.Combine
#import app.flow.Configuration
struct tests::flow::Invocations : public rigging::app::fixture::Core<fixture::Mainly<fixture::Combine<app::flow::Configuration>>> {
  static auto suite() -> Suite;
  //
  auto test_zero() -> void;
  auto test_empty() -> void;
  //
  template<unsigned> auto test_interactive() -> void;
  template<unsigned> auto test_programmatic() -> void;
};
#endiv
#divert <cpp>
namespace tests::flow {
  // And these definitions MUST appear before their address is taken
  template<> auto Invocations::test_interactive<0>() -> void      { exercise(CONFIGURATION, "--interactive"); }
  template<> auto Invocations::test_programmatic<0>() -> void     { exercise(CONFIGURATION, "--programmatic"); }
  auto Invocations::suite() -> Suite {
    auto series = Stream{"invocations"sv};
    series << add("zero", &Invocations::test_zero)
           << add("empty", &Invocations::test_empty)
           << []{
                auto act = Stream{"interactive"sv};
                act << add("0", &Invocations::test_interactive<0>)
                    << END;
                return act;
              }()
           << []{
                auto act = Stream{"programmatic"sv};
                act << add("0", &Invocations::test_programmatic<0>)
                    << END;
                return act;
              }()
           << END;
    return settle(series);
  }
  auto Invocations::test_zero() -> void  { exercise(USAGE); }
  auto Invocations::test_empty() -> void { exercise(USAGE, ""); }
}
#endiv
