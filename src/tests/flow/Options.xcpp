// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
namespace tests::flow {
  namespace [[eponymous]] options {
    struct Options;
  }
  using options::Options;
}
#endiv
#divert <hpp>
#import app.flow.Configuration
#import rigging.app.fixture.Core
#import tests.fixture.Partly.app.flow.Configuration.THROUGH
#import tests.fixture.Partly.Entrypoint.app.flow.Configuration.THROUGH
#import tests.fixture.Combine
//
// We're only testing the options parsing here.
// Thus Through::OPTIONS
//
namespace tests::flow {
  namespace options {
    using Ancestor = rigging::app::fixture::Core<fixture::Partly<fixture::Combine<app::flow::Configuration>, cli::controllability::Through::OPTIONS>>;
  }
  struct options::Options : public Ancestor {
    static auto suite() -> Suite;
    //
    auto test_i() -> void;
    auto test_interactive() -> void;
    //
    auto test_p() -> void;
    auto test_program() -> void;
    auto test_programmatic() -> void;
  };
}
#endiv
#divert <cpp>
namespace tests::flow::options {
  auto Options::test_i() -> void            { exercise(OK, "-i"s); }
  auto Options::test_interactive() -> void  { exercise(OK, "--interactive"s); }
  auto Options::test_p() -> void            { exercise(OK, "-p"s); }
  auto Options::test_program() -> void      { exercise(OK, "--program"s); }
  auto Options::test_programmatic() -> void { exercise(OK, "--programmatic"s); }
}
#import std.integer_sequence
#import std.make_index_sequence
#import std.to_string
#import std.size_t
auto tests::flow::options::Options::suite() -> Suite {
  auto series = Stream{"options"sv};
  series << stanza("generic"sv)
         << []{
           auto act = Stream{"interactive"sv};
           act << add("i", &Options::test_i)
               << add("interactive", &Options::test_interactive)
               << END;
           return act;
         }()
         << []{
           auto prog = Stream{"programmatic"sv};
           prog << add("h", &Options::test_p)
                << add("program", &Options::test_program)
                << add("programmatic", &Options::test_programmatic)
                << END;
           return prog;
         }()
#if 0
         << []{
           auto life = Stream{"simulation-lifetime"sv};
           [&life]<std::size_t... INDEX>(std::integer_sequence<std::size_t, INDEX...>) {
             ((life << add(std::to_string(INDEX), &Options::test_simulation_lifetime<INDEX>)), ...);
           }(std::make_index_sequence<SIMULATION_LIFETIME_COUNT>{});
           return life;
         }()
#endif
         << END;
  return settle(series);
}
#endiv
