// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
#include <hpp/app.flow.options.Parser>
#endiv
#divert <hpp>
#import nonstd.required.iterator.Forward
#import nonstd.required.iterator.Producing
#import tunitas.application.words.Strings
#import app.flow.required
namespace app::flow::options::parser {
  class Parser::Result : public tunitas::application::words::Strings {
    using Ancestor = tunitas::application::words::Strings;
    using Strings = Ancestor;
  public:
    using Ancestor::deque; // you "just have to know" that the this is the constructor name
    template<required::iterator::Forward ITERATOR> inline [[implicit]] Result(ITERATOR start, ITERATOR finish) requires required::iterator::Producing<ITERATOR, Strings::value_type>;
  };
}
#endiv
#divert <ipp>
namespace app::flow::options::parser {
  template<required::iterator::Forward ITERATOR> Parser::Result::Result(ITERATOR start, ITERATOR finish)
    requires required::iterator::Producing<ITERATOR, Strings::value_type>
    : Ancestor{start, finish}
    { }
}
#endiv
