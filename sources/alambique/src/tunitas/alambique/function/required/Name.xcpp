// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
#import nonstd.required.Enumeration
#forward tunitas.alambique.function.Name
#import tunitas.tuple.Element
#include <hpp/tunitas.tuple.Element>
#import tunitas.tuple.Size
#include <hpp/tunitas.tuple.Size>
namespace tunitas::alambique::function::required {
  //
  // Is this (enumeration) type suitable for Name<...>
  //
  // The magic happens in (the tuple) tunitas::alambique::function::name::Universe
  //
  namespace [[eponymous]] name {
    template<typename MATCH, typename... REST> concept AnyOf = (same_as<MATCH, REST> || ... );
    template<typename MATCH> concept Name = requires(MATCH) {
      requires Enumeration<MATCH>;
      { []<std::size_t... INDEX>(std::index_sequence<INDEX...>)
          requires AnyOf<MATCH, typename tuple::Element<INDEX, function::name::Universe>::type...>
          {} (std::make_index_sequence<tuple::Size<function::name::Universe>::value>{}) };
    };
  }
  using name::Name;
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    namespace required = tunitas::alambique::function::required;
    using tunitas::alambique::function::Name;
    using tunitas::alambique::function::Mode;
    //
    static_assert(required::Name<Name<Mode::AF>>);
    static_assert(required::Name<Name<Mode::DAF>>);
    static_assert(required::Name<Name<Mode::VDAF>>);
#if 0 // not yet, but soon
    static_assert(required::Name<Name<Mode::VIDAF>>);
#endif
  }
}
#endiv
