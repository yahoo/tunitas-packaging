// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
#import tests.fixture.required.configuration.Application
namespace tests::fixture {
  //
  // Combine the (app) Experience and the (app) Configuration for the (rigging) Configuration
  //
  // Specification:
  //
  //   What it says on the label.
  //
  // Design:
  //
  //   Because, the night.
  //
  // Background:
  //
  //   Whreeas rigging expects (and checks for) a configuration that also provides UX
  //   AND alambique uses a separated UX nad configuration scheme, the two must be combined for testing.
  //
  //   THUS: the term "configuration" means two different things herein (WATCHOUT)
  //
  // Usage:
  //
  //   template<> auto Mainly<Combine<app::something::Configuration>::Entrypoint::operator()([[inout]] Configuration &, Arguments) const -> Exit
  //
  template<required::configuration::Application APPLICATION_CONFIGURATION> struct Combine;
}
#endiv
#endiv
#divert <hpp>
#import cli.experience.Console
#import cli.options.Program
namespace tests {
  template<fixture::required::configuration::Application APPLICATION_CONFIGURATION> class fixture::Combine : public APPLICATION_CONFIGURATION, public ::cli::experience::Console {
    struct Ancestors {
      using Configuration = APPLICATION_CONFIGURATION;
      using Experience = ::cli::experience::Console;
    };
  public:
    using Program = ::cli::options::Program;
    using Configuration = typename Ancestors::Configuration;
    inline explicit Combine(Program);
  };
}
#endiv
#divert <ipp>
namespace tests::fixture {
  template<required::configuration::Application _> Combine<_>::Combine(Program p)
    : Ancestors::Experience{move(p), *this}
  { }
}
#endiv
