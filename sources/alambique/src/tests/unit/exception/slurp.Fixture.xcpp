// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-alambique/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/alambique/tree/LICENSE
#divert <fpp>
#import tunitas.alambique.slurp.exception
namespace tests::unit::exception::slurp {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::tunitas::alambique::slurp::exception;
    namespace feature = ::tunitas::exception::feature;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
#import tests.unit.exception.Palette
struct tests::unit::exception::slurp::fixture::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  // reminders mostly
  using Palette::stanza0;
  using Palette::stanza1string;
  using Palette::stanza1error;
  using Palette::stanza1type;
  //
  template<typename CATCHABLE, typename EXCEPTION> auto test_exception0() -> void;
  template<typename CATCHABLE, typename EXCEPTION> auto test_exception1string() -> void;
  template<typename CATCHABLE, typename EXCEPTION> auto test_exception1error() -> void;
  template<typename CATCHABLE, typename EXCEPTION> auto test_exception1type() -> void;
  auto test_Open() -> void;
  auto test_Limit() -> void;
};
#endiv
#divert <tpp>
#import std.error_code
namespace tests::unit::exception::slurp::fixture {
  template<typename CATCHABLE, typename EXCEPTION> auto Fixture::test_exception0() -> void       { exercise<CATCHABLE, EXCEPTION>(); }
  template<typename CATCHABLE, typename EXCEPTION> auto Fixture::test_exception1string() -> void { exercise<CATCHABLE, EXCEPTION>("give-me-one-reason"s); }
  template<typename CATCHABLE, typename EXCEPTION> auto Fixture::test_exception1error() -> void  { exercise<CATCHABLE, EXCEPTION>(std::error_code{}, "give-me-one-reason"s); }
  template<typename CATCHABLE, typename EXCEPTION> auto Fixture::test_exception1type() -> void   { exercise<CATCHABLE, EXCEPTION>(typeid(CATCHABLE)); }
}
#endiv
#divert <cpp>
#import tunitas.alambique.slurp.exception.Failure
auto tests::unit::exception::slurp::fixture::Fixture::suite() -> Suite {
  auto series = Stream{"slurp"sv};
  series << stanza1error<Fixture, feature::Failure, library::Failure>("Failure")
         << add("Open", &Fixture::test_Open)
         << add("Limit", &Fixture::test_Limit)
         << END;
  return settle(series);
}
#import tunitas.alambique.slurp.exception.Open
#import tunitas.alambique.slurp.exception.Limit
#import tunitas.exception.feature.Files
namespace tests::unit::exception::slurp::fixture {
  auto Fixture::test_Open() -> void try {
    auto const filepath = ::tunitas::file::Path{"/dev/null"};
    auto const ec = std::error_code{};
    auto const reason = "because we respect (Certificate) Authorities, that's why"sv;
    throw library::Open(filepath, ec, reason);
  } catch (feature::Files const &) {
    require(ASSERTION);
  }
  auto Fixture::test_Limit() -> void try {
    auto const specimen_limit = 9999llu;
    auto const specimen_reason = "too many notes"sv;
    auto subject = library::Limit(specimen_limit, specimen_reason);
    require(ASSERTION, specimen_limit == subject.limit());
  } catch (feature::Files const &) {
    require(ASSERTION);
  }
}
#endiv
