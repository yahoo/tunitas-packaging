// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.entropy.required.Entropy
namespace tunitas::entropy {
  //
  // A (time) jitter generator
  //
  // Specification:
  //
  //   Given an unspecified entropy source
  //   And bounds-and-base
  //
  //   Jitter delay suitable for std::this_thread::sleep_for(...)
  //   i.e. std::chrono::system_clock::duration
  //
  // Preconditions:
  //
  //   The interval MUST not be zero or negative.
  //   The base MUST not be negative.
  //
  // Exceptions:
  //
  //    Upon Construction, if an invariant is violated.
  //
  // Design:
  //
  //   Obvious.
  //
  // Usage:
  //
  //   auto jitter = Jitter{source, 100ms, 10ms};
  //
  template<required::Entropy> struct Jitter;
}
#endiv
#divert <hpp>
#import tunitas.time.Duration
#import std.uniform_int_distribution
#import std.numeric_limits
namespace tunitas {
  template<entropy::required::Entropy SOURCE> struct entropy::Jitter {
    using Source = SOURCE;
    using Duration = time::Duration;
    inline explicit Jitter(Source &, Duration interval, Duration base = {});
    inline auto operator()() -> Duration;
  protected:
    Duration base{};
    using Distribution = std::uniform_int_distribution<Duration::rep>;
    Distribution distribution{};
    inline static auto count_minus_1(Duration) -> Duration::rep;
    struct Generator {
      // Whereas Source provides Source::draw() and Distribution requires Generator::operator()
      Source &source;
      Generator(Source &s) : source{s} { }
      using Result [[school("New School")]] = typename Source::Draw;
      using Limits = std::numeric_limits<Result>;
      using result_type [[school("old_school")]] = Result;
      auto operator()() -> result_type { return source.draw(); }
      static constexpr auto min() -> Result { return Limits::min(); }
      static constexpr auto max() -> Result { return Limits::max(); }
    };
    Generator generator;
  };
}
#endiv
#divert <ipp>
#import tunitas.exception.Domain
namespace tunitas::entropy {
  template<required::Entropy _> Jitter<_>::Jitter(Source &source, Duration interval, Duration base)
    : base{base}
    , distribution{0, count_minus_1(interval)}
    , generator{source} {
    if (base.count() < 0) {
      throw exception::Domain{"a jitter base cannot be negative"};
    }
  }
  template<required::Entropy _> auto Jitter<_>::count_minus_1(Duration interval) -> Duration::rep {
    if (auto candidate=interval.count(); 0 == candidate) {
      throw exception::Domain{"a jitter interval cannot be zero"};
    } else if (candidate < 0) {
      throw exception::Domain{"a jitter interval cannot be negative"};
    } else {
      return candidate;
    }
  }
  template<required::Entropy _> auto Jitter<_>::operator()() -> Duration { return base + Duration{distribution(generator)}; }
}
#endiv
