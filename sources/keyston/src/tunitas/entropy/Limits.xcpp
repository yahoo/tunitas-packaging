// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.required.Has_Single_Bit
namespace tunitas::entropy {
  //
  // The limits
  //
  // Specification:
  //
  //   For widths smaller and larger than any integral type
  //   Rhymes with std::numeric_limits<INTEGRAL>
  //
  // Design:
  //
  //   Free of encumberance with any specific Entropy system.
  //   Specializations, computation and magic.
  //
  // Usage:
  //
  //   See Device<N>.
  //
  template<unsigned N> requires ((0 < N && N <= 256) && required::Has_Single_Bit<N>) struct Limits;
  template<> struct Limits<128>;
  template<> struct Limits<256>;
}
#endiv
#divert <hpp>
#import nonstd.numeric_limits
namespace tunitas {
  template<unsigned N> requires ((0 < N && N <= 256) && required::Has_Single_Bit<N>) struct entropy::Limits {
    using Value = unsigned long long;
    inline static constexpr auto width() -> unsigned { return N; };
    inline static constexpr auto min() -> Value { return 0u; }
    inline static constexpr auto max() -> Value;
  };
  namespace entropy {
    template<> struct Limits<128> {
      using Value = uint128_t; // this type is different; the width, min & max must be rehearsed again because... reasons.
      static constexpr auto width() -> unsigned { return 128; };
      inline static constexpr auto min() -> Value { return 0u; }
      inline static constexpr auto max() -> Value;
    };
    template<> struct Limits<256> {
      using Value = uint256_t; // this type is different; the width, min & max must be rehearsed again because... reasons.
      static constexpr auto width() -> unsigned { return 256; };
      inline static constexpr auto min() -> Value { return 0u; }
      inline static constexpr auto max() -> Value;
    };
    template<> constexpr auto Limits<1>::max() -> Value   { return 1u; }
    template<> constexpr auto Limits<2>::max() -> Value   { return 3u; }
    template<> constexpr auto Limits<4>::max() -> Value   { return 0xfu; }
    template<> constexpr auto Limits<8>::max() -> Value   { return nonstd::numeric_limits<uint8_t>::max(); }
    template<> constexpr auto Limits<16>::max() -> Value  { return nonstd::numeric_limits<uint16_t>::max(); }
    template<> constexpr auto Limits<32>::max() -> Value  { return nonstd::numeric_limits<uint32_t>::max(); }
    template<> constexpr auto Limits<64>::max() -> Value  { return nonstd::numeric_limits<uint64_t>::max(); }
    /*......*/ constexpr auto Limits<128>::max() -> Value { return nonstd::numeric_limits<uint128_t>::max(); }
    /*......*/ constexpr auto Limits<256>::max() -> Value { return nonstd::numeric_limits<uint256_t>::max(); }
  }
}
#endiv
