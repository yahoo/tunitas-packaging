// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.octets.required.array.Fixed
#import tunitas.octets.required.view.Fixed
#import std.remove_cvref
namespace tunitas::octets::required::concatenate {
  //
  // Are these types all fixed arrays-or-spans-or-views of (constie) octets?
  // EXCLUDING zero-count of such.
  // This MUST be diagnosable without the complete type of FIXED.
  //
  namespace [[eponymous]] fixed {
    template<typename... FIXED> concept Pure = (0u < sizeof...(FIXED)) && ((array::Fixed<FIXED> || view::Fixed<FIXED>) && ... );
    template<typename... FIXED> concept Fixed = Pure<std::remove_cvref_t<FIXED>...>;
  }
  using fixed::Fixed;
}
#endiv
#divert <cpp>
#import tunitas.array.Fixed
namespace {
  namespace testate {
    namespace required = tunitas::octets::required;
    namespace array = tunitas::array;
    using tunitas::octets::Octet;
    static_assert(not required::concatenate::Fixed<>);
    static_assert(required::concatenate::Fixed<array::Fixed<Octet, 1uz>>);
    static_assert(required::concatenate::Fixed<array::Fixed<Octet, 1uz>>);
    static_assert(required::concatenate::Fixed<array::Fixed<Octet, 1uz>, array::Fixed<Octet, 1uz>>);
  }
}
#endiv
