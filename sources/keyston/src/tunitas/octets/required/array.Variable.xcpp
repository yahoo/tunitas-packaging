// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.array.Variable
#forward tunitas.octets.Variable
#import tunitas.octets.Octet
namespace tunitas::octets::required::array {
  //
  // A variable array of octets?
  // Because we diagnose this without the complete type of VARIABLE, we cannot rely upon inheritance or derived_from
  //
  namespace [[eponymous]] variable {
    template<typename VARIABLE> concept Old = same_as<VARIABLE, tunitas::array::Variable<octets::Octet>>;
    template<typename VARIABLE> concept New = same_as<VARIABLE, octets::Variable>;
    template<typename VARIABLE> concept Variable = Old<VARIABLE> || New<VARIABLE>;
  }
  using variable::Variable;
}
#endiv
#divert <cpp>
#import tunitas.array.Variable
#import tunitas.octets.Variable
namespace {
  namespace testate {
    namespace required = tunitas::octets::required;
    static_assert(required::array::Variable<tunitas::octets::Variable>);
    static_assert(required::array::Variable<tunitas::array::Variable<tunitas::octets::Octet>>);
  }
}
#endiv
