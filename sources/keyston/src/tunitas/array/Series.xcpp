// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.array.required.Arrayable
namespace tunitas::array {
  //
  // A variable-length series.
  //
  // Specification:
  //
  //   Obvious.
  //
  // Design:
  //
  //   Unlimited length, thus variable length
  //   discontiguous storage; hence no data() member function
  //   https://en.cppreference.com/w/cpp/container/deque
  //
  // Usage:
  //
  //   As you would a deque; with the reduced interface.
  //
  template<required::Arrayable TYPE> struct Series;
}
#endiv
#divert <hpp>
#import tunitas.array.Container
#import std.deque
namespace tunitas {
  namespace array {
    using std::move;
    template<required::Arrayable TYPE> inline auto swap(Series<TYPE> &, Series<TYPE> &) noexcept -> void;
  }
  template<array::required::Arrayable TYPE> class array::Series : public Container<std::deque<TYPE>> {
    using Ancestor = Container<std::deque<TYPE>>;
    friend auto array::swap<>(Series &, Series &) noexcept -> void;
  public:
    [[implicit]] Series() = default;
    using Ancestor::Container; // constructors for deque are inherited
    inline [[implicit]] Series(Ancestor const &);
    inline [[implicit]] Series(Ancestor &&);
  };
}
#endiv
#divert <ipp>
namespace tunitas {
  template<array::required::Arrayable TYPE> auto array::swap(Series<TYPE> &a, Series<TYPE> &b) noexcept -> void {
    typename Series<TYPE>::Ancestor &aa{a}, &bb{b};
    swap(aa, bb);
  }
  namespace array {
    template<required::Arrayable _> Series<_>::Series(Ancestor const &other) : Ancestor{other} { }
    template<required::Arrayable _> Series<_>::Series(Ancestor &&other) : Ancestor{move(other)} { }
  }
}
#endiv
#divert <cpp>
#import tunitas.array.Fixed
#import tunitas.array.Variable
#import tunitas.array.Bounded
namespace {
  namespace testate {
    namespace array = tunitas::array;
    using Subject = array::Series<char>;
    using Fixed = array::Fixed<char, (1uz<<16)>;
    using Bounded = array::Bounded<char, (1uz<<16)>;
    using Variable = array::Variable<char>;
    using Series = Subject;
    //
    static_assert(std::semiregular<Subject>);
    static_assert(std::is_default_constructible_v<Subject>);
    static_assert(std::is_copy_constructible_v<Subject>);
    static_assert(std::is_move_constructible_v<Subject>);
    static_assert(std::is_copy_assignable_v<Subject>);
    static_assert(std::is_move_assignable_v<Subject>);
    static_assert(std::is_swappable_v<Subject>);
    //
    static_assert(std::constructible_from<Subject, Fixed const &>);
    static_assert(std::constructible_from<Subject, Fixed &>);
    static_assert(std::constructible_from<Subject, Fixed &&>);
    //
    static_assert(std::constructible_from<Subject, Bounded const &>);
    static_assert(std::constructible_from<Subject, Bounded &>);
    static_assert(std::constructible_from<Subject, Bounded &&>);
    //
    static_assert(std::constructible_from<Subject, Variable const &>);
    static_assert(std::constructible_from<Subject, Variable &>);
    static_assert(std::constructible_from<Subject, Variable &&>);
    //
    static_assert(std::constructible_from<Subject, Series const &>);
    static_assert(std::constructible_from<Subject, Series &>);
    static_assert(std::constructible_from<Subject, Series &&>);
    //
    static_assert(std::assignable_from<Subject&, Fixed>);
    static_assert(std::assignable_from<Subject &, Fixed &&>);
    //
    static_assert(std::assignable_from<Subject &, Bounded>);
    static_assert(std::assignable_from<Subject &, Bounded &&>);
    //
#if 1
    // Seems like this occurs because the operator= is inherited and it does not return a reference to the Variable; it returns a reference to Variable::Ancestor
    auto f = []{
               auto s = Subject{};
               auto v = Variable{};
               s = v;
               s = move(v);
               return s;
             }();
    namespace our {
      template<typename LHS, typename RHS> concept assignable_from = requires(LHS lhs, RHS rhs) {
        requires std::is_lvalue_reference_v<LHS>;
        requires std::is_rvalue_reference_v<RHS> || !std::is_reference_v<RHS>;
        { lhs = rhs };
      };
    }
    static_assert(    our::assignable_from<Subject &, Variable>);
    static_assert(    our::assignable_from<Subject &, Variable &&>);
    static_assert(not std::assignable_from<Subject &, Variable>);
    static_assert(not std::assignable_from<Subject &, Variable &&>);
#else
    static_assert(std::assignable_from<Subject &, Variable>);
    static_assert(std::assignable_from<Subject &, Variable &&>);
#endif
    //
    static_assert(std::assignable_from<Subject &, Series>);
    static_assert(std::assignable_from<Subject &, Series &&>);
  }
}
#endiv
