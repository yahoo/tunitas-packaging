// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::array::required::has {
  //
  // Does this container have a capacity() accessor member?
  // Does this container have a max_size() accessor member?
  //
  // Inventory:
  //   
  //   capacity()  max_size()    container
  //   yes         yes           std::vector<...>
  //   yes         yes           std::basic_string<...>
  //   no          yes           std::array<...>         but max_size() seems to produce the same sort of information
  //   no          yes           std::deque<...>         eadem ratione
  //
  // Usage:
  //
  template<typename CONTAINER> concept Capacity = requires(CONTAINER const &container) {
    { container.capacity() } -> convertible_to<Size>;
  };
  template<typename CONTAINER> concept Max_Size = requires(CONTAINER const &container) {
    { container.max_size() } -> convertible_to<Size>;
  };
  template<typename CONTAINER> concept Reserve = requires(CONTAINER const &container) {
    { container.reserve() } -> convertible_to<void>;
  };
  template<typename CONTAINER> concept Resize = requires(CONTAINER const &container, Size noob) {
    { container.resize(noob) } -> convertible_to<void>;
  };
}
#endiv
