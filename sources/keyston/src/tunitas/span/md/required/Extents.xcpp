// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
// #import std.extents [[FIXTHIS]] when std.extents appears in the C++23 pantheon
#import std.size_t
namespace tunitas::span::md::required {
  //
  // Is this type a std::extents?
  // This is the moral equivalent of InstanceOf that accounts for the NTTP (Non-Type Template Parameters)
  //
  template<typename EXTENTS> concept Extents = requires(EXTENTS) {
    { []<typename TYPE, std::size_t... INDEX>(std::extents<TYPE, INDEX...> *)
      {}(static_cast<EXTENTS *>(nullptr)) };
  };
}
#endiv
#divert <cpp>
namespace {
  namespace testate {
    namespace required = tunitas::span::md::required;
    static_assert(required::Extents<std::extents<std::size_t, 2>>);
    static_assert(required::Extents<std::extents<std::size_t, 2, 2>>);
    static_assert(required::Extents<std::extents<std::size_t, 1, 3, 5>>);
  }
}
#endiv
