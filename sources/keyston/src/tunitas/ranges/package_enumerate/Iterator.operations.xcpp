// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import nonstd.required.iterator.Undirected
#import tunitas.ranges.required // ctcnr (cascade that certain namespace 'required')
#import std.ptrdiff_t
#forward tunitas.ranges.package_enumerate.Iterator
namespace tunitas::ranges::package_enumerate::body {
  template<required::iterator::Undirected SUBITERATOR, Mutability MUTABILITY> inline auto operator-(Iterator<SUBITERATOR, MUTABILITY> const &, Iterator<SUBITERATOR, MUTABILITY> const &) -> std::ptrdiff_t;
  template<required::iterator::Undirected SUBITERATOR, Mutability MUTABILITY> inline auto operator+(std::ptrdiff_t, Iterator<SUBITERATOR, MUTABILITY> const &) -> Iterator<SUBITERATOR, MUTABILITY>;
  template<required::iterator::Undirected SUBITERATOR, Mutability MUTABILITY> inline auto operator+(Iterator<SUBITERATOR, MUTABILITY> const &, std::ptrdiff_t) -> Iterator<SUBITERATOR, MUTABILITY>;
}
#endiv
#divert <ipp>
#import tunitas.exception.Bound
namespace tunitas::ranges::package_enumerate {
  template<required::iterator::Undirected SUBITERATOR, body::Mutability MUTABILITY> auto body::operator-(Iterator<SUBITERATOR, MUTABILITY> const &a, Iterator<SUBITERATOR, MUTABILITY> const &b) -> std::ptrdiff_t {
    // NEVER subtract the indices; the index is a derived quantity managed by operator++, only the subiterator demarcates actual position
    return a.subiterator - b.subiterator;
  }
  template<required::iterator::Undirected SUBITERATOR, body::Mutability MUTABILITY> auto body::operator+(Iterator<SUBITERATOR, MUTABILITY> const &a, std::ptrdiff_t b) -> Iterator<SUBITERATOR, MUTABILITY> { return b + a; }
  template<required::iterator::Undirected SUBITERATOR, body::Mutability MUTABILITY> auto body::operator+(std::ptrdiff_t a, Iterator<SUBITERATOR, MUTABILITY> const &b) -> Iterator<SUBITERATOR, MUTABILITY> {
    if (a < 0 && b.index < -a) {
      throw exception::Bound{"negative index"};
    } else {
      auto c = auto{b};
      c.index += a;
      c.subiterator += a;
      return c;
    }
  }
}
#endiv
