// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.daf.function.Function.template
#import tunitas.keyston.daf.Name
namespace tunitas::keyston::daf::function {
  //
  // The Distributed Aggregation Function - ZERO (sic)
  //
  // Specification:
  //
  //   Pass-thru a zero value.
  //
  // Design:
  //
  //   It's not in the standard.
  //   This is used for "cleaning the pipes" and proving that end-to-end this multi-cast variant record technique works (well enough).
  //
  // Usage:
  //
  //   Within Definition<NAME> and Executor<NAME>
  //
  template<> struct Function<ADHOC, Name::ZERO>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.daf.function.Prototype
#import tunitas.array.Fixed
static_assert(sizeof(tunitas::array::Fixed<long unsigned int, 1>));
static_assert(sizeof(tunitas::array::Fixed<long unsigned int, 1>{}));
static_assert(sizeof(tunitas::keyston::Field<64>::Vector<1>::Value));
static_assert(sizeof(tunitas::keyston::Field<64>::Vector<1>::Value{}));
//
// WATCHOUT - the error message here points to the wrong locatoin which misdirects from the omitted definition
// Need the constexpr constructor definitions for the vectors so the initializers in ZERO will work.
// else error:
//    'constexpr tunitas::array::Fixed<TYPE, CAPACITY>::Fixed() [with TYPE = tunitas::keyston::field::element::Basis<64>::Type; long unsigned int CAPACITY = 1]' used before its definition)
// (the problem is not in tunitas::array::Fixed<...>, the problem is with a constructor omission on field::Vector)
//
#include <ipp/tunitas.keyston.field.Vector> // MUST HAVE
namespace tunitas::keyston::daf::function {
  template<> struct Function<ADHOC, Name::ZERO> : public Prototype {
    using Ancestor = Prototype;
  protected:
    using Codec = prio::Codec<prio::Name::COUNT>; // pick one
    using Field = Codec::Field;
    struct ZERO {
      inline static constexpr auto const INPUT = Field::Vector<Codec::INPUT_LENGTH.count()>::Value{}; // ..... in lieu of Codec<ZERO>::Field::Vector ... which doens't exist
      inline static constexpr auto const OUTPUT = Field::Vector<Codec::OUTPUT_LENGTH.count()>::Value{}; // ... eadem ratione
      inline static constexpr auto const AGGREGATION = Field::Vector<Codec::OUTPUT_LENGTH.count()>::Value{};
    };
  public:
    //
    // a.k.a. measurement_to_input_shares(...)
    static auto disassembly(Parameters const &, Measurement<WHOLE> const &, Randomness const &) -> Disassembled;
    //
    // a.k.a. prep(...)
    static auto computation(Parameters const &, Shard, Public<SHARE> const &, Input<SHARE> const &) -> Computed;
    //
    // a.k.a. out_shares_to_agg_share(...)
    static auto amalgamation(Parameters const &, Series<Output<SHARE>> const &) -> Amalgamated;
    //
    // a.k.a. agg_shares_to_result(...)
    static auto reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &, Processed) -> Reassembled;
  };
}
#endiv
#divert <cpp>
#import std.accumulate
#import tunitas.keyston.daf.exception.Invariant
#import tunitas.keyston.numeric.Augmentment
#import tunitas.keyston.numeric.Treatment
namespace tunitas::keyston::daf::function {
  auto Function<ADHOC, Name::ZERO>::disassembly(Parameters const &, Measurement<WHOLE> const &m, Randomness const &) -> Disassembled {
    auto publick = Public<SHARE>{};
    auto zero = Input<SHARE>{}; // that's it ... that's the "disassembly" algo for "zero".
    auto inputs = Shards<Input<SHARE>>{zero, zero};
    return {move(publick), move(inputs)};
  }
  auto Function<ADHOC, Name::ZERO>::computation(Parameters const &, Shard s, Public<SHARE> const &, Input<SHARE> const &input) -> Computed {
    // the compute phase is trivial here
    auto treatment = numeric::Treatment{[](input::Count const &value) -> Output<SHARE>::Count {
        if (ZERO::INPUT != value) { throw exception::Invariant{"not zero"}; }
        return value; // copy that zero from input to output
      }};
    return {visit(treatment, input)};
  }
  auto Function<ADHOC, Name::ZERO>::amalgamation(Parameters const &, Series<Output<SHARE>> const &outputs) -> Amalgamated {
    if (outputs.empty()) { throw exception::Invariant{"empty amalgamation"}; }
    auto accumulate = [](Aggregation<SHARE> &&accumulator, Output<SHARE> const &each) -> Aggregation<SHARE> {
      auto augmentment = numeric::Augmentment{[](Aggregation<SHARE>::Count &&accumulator, Output<SHARE>::Count const &each) -> Aggregation<SHARE>::Count {
        if (ZERO::OUTPUT != each) {
          throw exception::Invariant{"not zero"};
        } else {
          accumulator += each; // pro forma
        }
        return move(accumulator);
      }};
      return {visit(augmentment, move(accumulator), each)};
    };
    return std::accumulate(outputs.begin(), outputs.end(), Aggregation<SHARE>{}, accumulate);
  }
  auto Function<ADHOC, Name::ZERO>::reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &aggregations, Processed count) -> Reassembled {
    if (aggregations.empty()) { throw exception::Invariant{"empty reassembly"}; }
    auto accumulate = [count](Aggregation<WHOLE>::Count &&accumulator, Aggregation<SHARE> const &increment) -> Aggregation<WHOLE>::Count {
      // indeed, count is never used in this variant of the algorithm
      auto treatment = numeric::Treatment{[count](Aggregation<SHARE>::Count const &each) -> Aggregation<WHOLE>::Count {
          if (ZERO::AGGREGATION != each) {
            throw exception::Invariant{"not zero"};
          } else {
            return keyston::aggregation::Count{underlying(each.at(0))}; // in lieu of Codec<ZERO>::decode(...) which does not exist
          }
        }};
      accumulator += visit(treatment, increment);
      return move(accumulator);
    };
    auto accumulated = std::accumulate(aggregations.begin(), aggregations.end(), Aggregation<WHOLE>::Count{}, accumulate);
    return Aggregation<WHOLE>{accumulated};
  }
}
#endiv
