// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.daf.function.Function.template
#import tunitas.keyston.daf.Name
namespace tunitas::keyston::daf::function {
  //
  // The Distributed Aggregation Function - CONSTANT (sic)
  //
  // Specification:
  //
  //   Pass-thru a constant value.
  //
  // Design:
  //
  //   It's not in the standard.
  //   This is used for "cleaning the pipes" and proving that end-to-end this multi-cast variant record technique works (well enough).
  //
  // Usage:
  //
  //   Within Definition<NAME> and Executor<NAME>
  //
  template<> struct Function<ADHOC, Name::CONSTANT>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.daf.function.Prototype
namespace tunitas::keyston::daf::function {
  template<> struct Function<ADHOC, Name::CONSTANT> : public Prototype {
    using Ancestor = Prototype;
  protected:
    using Element = prio::Codec<prio::Name::COUNT>::Field::Element; // pick one
  public:
    //
    // a.k.a. measurement_to_input_shares(...)
    static auto disassembly(Parameters const &, Measurement<WHOLE> const &, Randomness const &) -> Disassembled;
    //
    // a.k.a. prep(...)
    static auto computation(Parameters const &, Shard, Public<SHARE> const &, Input<SHARE> const &) -> Computed;
    //
    // a.k.a. out_shares_to_agg_share(...)
    static auto amalgamation(Parameters const &, Series<Output<SHARE>> const &) -> Amalgamated;
    //
    // a.k.a. agg_shares_to_result(...)
    static auto reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &, Processed) -> Reassembled;
  };
}
#endiv
#divert <cpp>
#import std.accumulate
#import tunitas.keyston.daf.exception.Invariant
#import tunitas.keyston.numeric.Augmentment
#import tunitas.keyston.numeric.Treatment
#import tunitas.keyston.numeric.enbiggen
namespace tunitas::keyston::daf::function {
  auto Function<ADHOC, Name::CONSTANT>::disassembly(Parameters const &, Measurement<WHOLE> const &m, Randomness const &) -> Disassembled {
    auto publick = Public<SHARE>{};
    auto encoded = Element{numeric::enbiggen(m.value)}; // in lieu of Codec<CONSTANT>::encode(...) - there being nosuch Algorithm<CONSTANT>
    auto enwrapped = Input<SHARE>::Count{encoded};
    auto biggie = Input<SHARE>{move(enwrapped)};
    auto little = Input<SHARE>{}; // ............................................. zero goes here, that's the "split" algo, that's the tweet.
    return {move(publick), Shards(biggie, little)};
  }
  auto Function<ADHOC, Name::CONSTANT>::computation(Parameters const &, Shard, Public<SHARE> const &, Input<SHARE> const &input) -> Computed {
    // the compute phase is trivial here
    auto treatment = numeric::Treatment{[](Input<SHARE>::Count const &value) -> Output<SHARE>::Count { return value; }};
    return Output<SHARE>{visit(treatment, input)};
  }
  auto Function<ADHOC, Name::CONSTANT>::amalgamation(Parameters const &, Series<Output<SHARE>> const &outputs) -> Amalgamated {
    if (outputs.empty()) { throw exception::Invariant{"empty amalgamation"}; }
    auto accumulate = [](Aggregation<SHARE> &&accumulator, Output<SHARE> const &each) -> Aggregation<SHARE> {
      auto augmentment = numeric::Augmentment{[](Aggregation<SHARE>::Count &&accumulator, Output<SHARE>::Count const &each) -> Aggregation<SHARE>::Count {
        // whereas the modular vectors do not have operator>, we must rely on operator!= for consistency
        if (each != accumulator) {
          accumulator = each; // last one wins? (dubious)
        }
        return move(accumulator);
      }};
      return {visit(augmentment, move(accumulator), each)};
    };
    return std::accumulate(outputs.begin(), outputs.end(), Aggregation<SHARE>{}, accumulate);
  }
  auto Function<ADHOC, Name::CONSTANT>::reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &aggregations, Processed processed) -> Reassembled {
    if (aggregations.empty()) { throw exception::Invariant{"empty reassembly"}; }
    auto accumulate = [processed](Aggregation<WHOLE>::Count &&accumulator, Aggregation<SHARE> const &increment) -> Aggregation<WHOLE>::Count {
      // indeed, processed is never used in this variant of the algorithm
      auto treatment = numeric::Treatment{[processed](Aggregation<SHARE>::Count const &each) -> Aggregation<WHOLE>::Count {
          return keyston::aggregation::Count{underlying(each.at(0))}; // in lieu of Codec<CONSTANT>::decode(...) which does not exist
        }};
      if (auto each=visit(treatment, increment); each > accumulator) {
        accumulator = each; // max
      }
      return move(accumulator);
    };
    auto accumulated = std::accumulate(aggregations.begin(), aggregations.end(), Aggregation<WHOLE>::Count{}, accumulate);
    return Aggregation<WHOLE>{accumulated};
  }
}
#endiv
