// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.daf.function.Function.template
#import tunitas.keyston.daf.Name
namespace tunitas::keyston::daf::function {
  //
  // The Distributed Aggregation Function - POPLAR
  //
  // Specification:
  //
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html
  //   There's some section in there that covers this.
  //   And there's papers in the references section; e.g. CGB2017
  //
  //   Section 8. Poplar
  //   though Poplar is oonly formally defined in the context of the *Verifiable* Distributed Aggregation Function (VDAF),
  //   contrariwise, Poplar is not (really) defined in the context of the *unverifiable* Distributed Aggregation Function (DAF)
  //
  // Design:
  //
  //   Right out of the manual.
  //
  // Usage:
  //
  //   Within Definition<NAME> and Executor<NAME>
  //
  template<> struct Function<POPLAR, Name::POPULARITY>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.poplar.Algorithm
#import tunitas.keyston.daf.function.Prototype
namespace tunitas::keyston::daf::function {
  template<> struct Function<POPLAR, Name::POPULARITY> : public Prototype {
    using Ancestor = Prototype;
  protected:
    using Codec = poplar::Algorithm<poplar::Name::ONE>;
    using Algorithm = poplar::Algorithm<poplar::Name::ONE>;
  public:
    template<array::required::Arrayable TYPE> using Series = Ancestor::template Series<TYPE>;
    //
    // Section 4.1 Sharding
    // a.k.a. measurement_to_input_shares(...)
    static auto disassembly(Parameters const &, Measurement<WHOLE> const &, Randomness const &) -> Disassembled;
    // Section 4.2 Preparation
    // a.k.a. prep(...)
    static auto computation(Parameters const &, Shard, Public<SHARE> const &, Input<SHARE> const &) -> Computed;
    // Section 4.4 Aggregation
    // a.k.a. out_shares_to_agg_share(...)
    static auto amalgamation(Parameters const &, Series<Output<SHARE>> const &) -> Amalgamated;
    // Section 4.5 Unsharding
    // a.k.a. agg_shares_to_result(...)
    static auto reassembly(Parameters const &, Shards<Aggregation<SHARE>> const &, Processed) -> Reassembled;
  };
}
#endiv
#divert <cpp>
#warning WRITETHIS tunitas::keyston::daf::function::Function<POPLAR, POPULARITY>
#import tunitas.keyston.exception.Unimplemented
namespace tunitas::keyston::daf::function {
  auto Function<POPLAR, Name::POPULARITY>::disassembly(Parameters const &parameters, Measurement<WHOLE> const &measurement, Randomness const &randomness) -> Disassembled {
    throw exception::Unimplemented{};
    return {};
  }
  auto Function<POPLAR, Name::POPULARITY>::computation(Parameters const &parameters, Shard index, Public<SHARE> const &publick, Input<SHARE> const &input) -> Computed {
    throw exception::Unimplemented{};
    return {};
  }
  auto Function<POPLAR, Name::POPULARITY>::amalgamation(Parameters const &parameters, Series<Output<SHARE>> const &outputs) -> Amalgamated {
    throw exception::Unimplemented{};
    return {};
  }
  auto Function<POPLAR, Name::POPULARITY>::reassembly(Parameters const &parameters, Shards<Aggregation<SHARE>> const &aggregations, Processed processed) -> Reassembled {
    throw exception::Unimplemented{};
    return {};
  }
}
#endiv
