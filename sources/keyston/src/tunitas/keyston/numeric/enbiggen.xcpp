// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::numeric {
  namespace package_enbiggen {
    namespace body::exported { }
    namespace interface = body::exported;
  }
  using namespace package_enbiggen::interface;
}
#import tunitas.keyston.measurement.Specimen
namespace tunitas::keyston::numeric::package_enbiggen {
  using Underlying = std::underlying_type_t<measurement::Specimen>;
  namespace body { }
}
#endiv
#divert <hpp>
namespace tunitas::keyston::numeric::package_enbiggen::body {
  namespace exported {
    //
    // Convert the smallnum Specimen to a bignum for computation.
    //
    // Specification:
    //
    //   Convert from the modular form to the underlying integer form.
    //
    //   Just what you see.
    //   Just what it says on the label
    //
    // Design:
    //
    //   Trivial (nowadays).
    //
    // Usage:
    //
    //   Obvious.  You see it, don't you?
    //
    inline constexpr auto enbiggen(measurement::Specimen s) -> Underlying { return underlying(s); }
  }
}
#endiv
