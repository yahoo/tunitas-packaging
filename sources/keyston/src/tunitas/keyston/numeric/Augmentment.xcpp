// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.numeric.required.Augmentment
namespace tunitas::keyston::numeric {
  //
  // Provide a treatment for the variant value; in an accumulator scenario.
  //
  // Specification:
  //
  //   The moral equivalent of
  //
  //   auto visitor = variant::Visitor{[](auto &, auto const &)            { throw exception::Variant{}; },
  //                                   [](uint256_t &lhs, auto const &rhs) { lhs += ...something...rhs...something...; }};
  //
  // Design:
  //
  //   A lambda is an implicit class with operator()(...)
  //   A Visitor with lambdas is just a class that inherits from the types given in its initializer.
  //   You know how that works.  It's documented in std::visit and in tunitas::variant::Visitor
  //
  // Usage:
  //
  //   auto augmentment = Augmentment{[&m](uint256_t &&lhs, uint256_t const &rhs) { lhs += rhs; }};
  //   std::accumulator(start, finish, uitn256_t{}, augmentment);
  //
  template<required::Augmentment AUGMENTMENT> struct Augmentment;
  template<required::Augmentment AUGMENTMENT> Augmentment(AUGMENTMENT &&) -> Augmentment<AUGMENTMENT>;
}
#endiv
#divert <hpp>
#import tunitas.keyston.exception.Variant
#import tunitas.keyston.numeric.returned.Result
namespace tunitas::keyston {
  template<numeric::required::Augmentment AUGMENTMENT> struct tunitas::keyston::numeric::Augmentment : public AUGMENTMENT {
    using AUGMENTMENT::operator();
    template<typename LHS, typename RHS> auto operator()(LHS, RHS) const -> typename returned::Result<decltype(&AUGMENTMENT::operator())>::Type { throw exception::Variant{}; }
  };
}
#endiv
