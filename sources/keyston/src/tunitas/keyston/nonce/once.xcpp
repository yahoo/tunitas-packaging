// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.nonce.required.Nonce
#import tunitas.keyston.nonce.required.Entropy
namespace tunitas::keyston::nonce {
  //
  // Run the entropy generator to produce the nonce (once).
  //
  // Specification:
  //
  //   Just what it says on the label.
  //   This is a trivial one-liner, but it makes for idiomatic usage at the call site.
  //
  // Design:
  //
  //   Useful one-shot generators; e.g. Sequence
  //
  //   "nonce once" whut?
  //   But "nonce" means "for this occasion"
  //   And "once" means ... well, once, er, one time.
  //
  // Usage:
  //
  //   auto verify_key = nonce::once<array::Fixed<Octet, 100>, entropy::Sequence>();
  //
  template<required::Nonce NONCE, required::Entropy> inline auto once() -> NONCE;
  template<required::Nonce NONCE, required::Entropy ENTROPY> inline auto once([[inout]] ENTROPY &) -> NONCE;
}
#endiv
#divert <ipp>
#import tunitas.keyston.nonce.Generator
namespace tunitas::keyston {
  template<nonce::required::Nonce NONCE, nonce::required::Entropy ENTROPY> auto nonce::once() -> NONCE {
    auto source = ENTROPY{};
    return once<NONCE>(source);
  }
  template<nonce::required::Nonce NONCE, nonce::required::Entropy ENTROPY> auto nonce::once(ENTROPY &source) -> NONCE {
    return Generator<NONCE, ENTROPY>{source}();
  }
}
#endiv
