// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.InstanceOf
#forward tunitas.keyston.nonce.Unsigned
namespace tunitas::keyston::nonce::required {
  //
  // Is this type wrapped in Unsigned<...>
  //
  template<typename UNSIGNED> concept Unsigned = InstanceOf<UNSIGNED, nonce::Unsigned>;
}
#endiv
#import tunitas.integer.integers
namespace {
  namespace testate {
    namespace required = tunitas::keyston::nonce::required;
    using namespace tunitas::integer::integers;
    using tunitas::keyston::nonce::Unsigned;
    //
    static_assert(!required::Unsigned<uint8_t>);
    static_assert(!required::Unsigned<Unsigned<uint8_t>>);
    //
    static_assert(!required::Unsigned<uint16_t>);
    static_assert(!required::Unsigned<Unsigned<uint16_t>>);
    //
    static_assert(!required::Unsigned<uint32_t>);
    static_assert(!required::Unsigned<uint64_t>);
    static_assert(!required::Unsigned<uint128_t>);
    static_assert(!required::Unsigned<uint256_t>);
    static_assert(!required::Unsigned<uint512_t>);
    static_assert(!required::Unsigned<uint1024_t>);
    static_assert(!required::Unsigned<uint2048_t>);
    static_assert(!required::Unsigned<uint4096_t>);
    static_assert(!required::Unsigned<uint8192_t>);
  }
}
#endiv
