// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.InstanceOf
#forward tunitas.keyston.nonce.Element
namespace tunitas::keyston::nonce::required {
  //
  // Is this type wrapped in nonce::Element<...>
  //
  template<typename ELEMENT> concept Element = InstanceOf<ELEMENT, nonce::Element>;
}
#endiv
#divert <cpp>
#import tunitas.keyston.nonce.Element
#import tunitas.keyston.field.Element
namespace {
  namespace testate {
    namespace required = tunitas::keyston::nonce::required;
    namespace field = tunitas::keyston::field;
    using tunitas::keyston::nonce::Element;
    using namespace tunitas::integer::integers;
    //
    static_assert(required::Element<Element<field::Element<64>>>);
    static_assert(required::Element<Element<field::Element<128>>>);
    static_assert(required::Element<Element<field::Element<255>>>);
    //
    static_assert(!required::Element<uint16_t>);
    static_assert(!required::Element<uint32_t>);
    static_assert(!required::Element<uint64_t>);
    static_assert(!required::Element<uint128_t>);
  }
}
#endiv
