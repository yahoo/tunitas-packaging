// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.field.required.Element
#import tunitas.keyston.nonce.generator.Generator.template
#import tunitas.keyston.nonce.Element
namespace tunitas::keyston::nonce::generator {
  //
  // Fill up a (field) element
  //
  template<field::required::Element ELEMENT, required::Entropy ENTROPY> struct Generator<Element<ELEMENT>, ENTROPY>;
}
#endiv
#divert <hpp>
#import tunitas.integer.distribution.Uniform
#import tunitas.integer.distribution.usage.Randomness
#import tunitas.keyston.field.Element
#import tunitas.keyston.field.element.traits.Element
#import tunitas.keyston.field.Definition
#import tunitas.keyston.nonce.generator.Randomness.Generator.Unsigned.UNSIGNED
namespace tunitas::keyston::nonce::generator {
  template<field::required::Element ELEMENT, required::Entropy ENTROPY> struct Generator<Element<ELEMENT>, ENTROPY> {
    using Entropy = ENTROPY;
    inline explicit Generator(Entropy &held);
    using Result = typename Element<ELEMENT>::Type;
    inline auto operator()() -> Result;
  protected:
    inline static constexpr auto const MODULUS = field::element::traits::Element<ELEMENT>::Field::MODULUS;
    using Distribution = integer::distribution::Uniform<typename field::element::traits::Element<Result>::Underlying>;
    Distribution distribution;
    //
    using Subentropy = Randomness<Generator<Unsigned<typename field::element::traits::Element<Result>::Underlying>, Entropy>>;
    static_assert(tunitas::integer::distribution::usage::Randomness<Subentropy>);
    Subentropy subsource;
  };
}
#endiv
#divert <ipp>
namespace tunitas::keyston::nonce::generator {
  template<field::required::Element L, required::Entropy E> Generator<Element<L>, E>::Generator(Entropy &e)
    : distribution{0u, MODULUS-1u}
    , subsource{e}
  { }
  template<field::required::Element L, required::Entropy E> auto Generator<Element<L>, E>::operator()() -> Result { return Result{distribution(subsource)}; }
}
#endiv
#divert <cpp>
#import tunitas.keyston.field.Element
static_assert(sizeof(tunitas::keyston::field::Element<64>));
#import tunitas.keyston.nonce.usage.Generator
#import tunitas.entropy.Serial
namespace {
  namespace testate {
    using namespace tunitas::keyston::nonce;
    namespace entropy = tunitas::entropy;
    namespace usage = tunitas::keyston::nonce::usage;
    namespace field = tunitas::keyston::field;
    //
    static_assert(usage::Generator<Generator<Element<field::Element<64>>, entropy::Serial>>);
    static_assert(usage::Generator<Generator<Element<field::Element<128>>, entropy::Serial>>);
    static_assert(usage::Generator<Generator<Element<field::Element<255>>, entropy::Serial>>);
  }
}
#endiv
