// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.Scheme
#import tunitas.keyston.vdaf.Name
namespace tunitas::keyston::vdaf::is {
  //
  // Are the SCHEME and NAME valid combinations?
  //
  namespace [[eponymous]] algorithm {
    using enum Scheme;
    template<Scheme, Name> struct Positive;
    template<Scheme, Name> struct Negative;
    template<Scheme, Name> struct Algorithm;
  }
  using algorithm::Algorithm;
}
#endiv
#divert <hpp>
#import std.true_type
#import std.false_type
namespace tunitas::keyston::vdaf::is {
  template<Scheme SCHEME, Name NAME> struct algorithm::Positive : std::false_type { };
  template<Scheme SCHEME, Name NAME> struct algorithm::Negative : std::true_type { };
  namespace algorithm {
    template<Name NAME> struct Positive<ADHOC, NAME> : public std::true_type { };
    template<Name NAME> requires (0x0000'0000u <= underlying(NAME) && underlying(NAME) <= 0x0000'0fffu) struct Positive<PRIO, NAME>   : public std::true_type { };
    template<Name NAME> requires (0x0000'1000u <= underlying(NAME) && underlying(NAME) <= 0x0000'1fffu) struct Positive<POPLAR, NAME> : public std::true_type { };
    //
    template<Name NAME> requires (0x0000'0000u <= underlying(NAME) && underlying(NAME) <= 0x0000'1fffu) struct Negative<PRIO, NAME>   : public std::false_type { };
    template<Name NAME> requires (0x0000'0000u <= underlying(NAME) && underlying(NAME) <= 0x0000'1fffu) struct Negative<POPLAR, NAME> : public std::false_type { };
    //
    template<Name NAME> requires (0x0000'0000u <= underlying(NAME) && underlying(NAME) <= 0x0000'0fffu) struct Negative<POPLAR, NAME> : public std::false_type { };
    template<Name NAME> requires (0x0000'1000u <= underlying(NAME) && underlying(NAME) <= 0x0000'1fffu) struct Negative<PRIO, NAME>   : public std::false_type { };
    template<Name NAME> struct Negative<ADHOC, NAME> {
      inline static constexpr auto const value = !Negative<PRIO, NAME>::value && !Negative<POPLAR, NAME>::value;
    };
  }
  template<Scheme SCHEME, Name NAME> struct algorithm::Algorithm {
    inline static constexpr auto const value = Positive<SCHEME, NAME>::value && !Negative<SCHEME, NAME>::value;
  };
}
#endiv
