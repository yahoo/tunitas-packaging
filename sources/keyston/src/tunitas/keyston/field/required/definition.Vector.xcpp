// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.field.vector.Definition
#import tunitas.keyston.field.required.definition.Field
namespace tunitas::keyston::field::required::definition {
  //
  // Is this type a vector  description?
  // Rhymes with InstanceOf, but accounts for the NTTP (NON-Type Template Parameter)
  // This is diagnosable without the complete type of vector::Definition<...>, so the complete type may not ever be available
  //
  template<typename VECTOR> concept Vector = requires(VECTOR) {
    { []<typename FIELD, Size CAPACITY>(field::vector::Definition<FIELD, CAPACITY> *) requires definition::Field<FIELD>
      {} (static_cast<VECTOR *>(nullptr)) };
  };
}
#endiv
#divert <cpp>
#import tunitas.keyston.Field
namespace {
  namespace testate {
    namespace required = tunitas::keyston::field::required;
    using tunitas::keyston::Field;
    //
    static_assert(required::definition::Vector<Field<64>::Vector<2>>);
    static_assert(required::definition::Vector<Field<128>::Vector<2>>);
    static_assert(required::definition::Vector<Field<255>::Vector<2>>);
  }
}
#endiv
