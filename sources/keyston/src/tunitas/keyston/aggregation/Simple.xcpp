// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::aggregation {
  //
  // What even is a aggregation result?
  //
  // Specification:
  //
  //   A number in Z (mod m)
  //   They are aggregatable.
  //
  //   But NOT drawn from the same (enumeration) domain a measurement::Specimen.
  //
  //   This type is not mentioned in any standard (draft).
  //
  // Design:
  //
  //   They have a data type for that in C++23.
  // 
  // Usage:
  //
  //   auto aggregated = Simple{99u};
  //
  enum class Simple : std::uint64_t;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import tunitas.keyston.formatter.Formatter
namespace tunitas::keyston::aggregation {
  inline constexpr auto underlying(Simple c) { return std::underlying_type_t<Simple>(c); }
  using std::move;
  inline auto swap(Simple &a, Simple &b) noexcept -> void { std::swap(a, b); }
  inline constexpr auto operator+(Simple a, Simple b) -> Simple { return Simple{underlying(a) + underlying(b)}; }
  inline constexpr auto operator+=(Simple &lhs, Simple rhs) -> Simple &;
  inline auto format(Simple) -> formatter::Formatter<Simple>;
}
#endiv
#divert <ipp>
namespace tunitas::keyston {
  constexpr auto aggregation::operator+=(Simple &lhs, Simple rhs) -> Simple & {
    lhs = Simple{underlying(lhs) + underlying(rhs)};
    return lhs;
  }
  auto aggregation::format(Simple item) -> formatter::Formatter<Simple> { return {item}; }
}
#import tunitas.keyston.formatter.io // to activate format(...)
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::aggregation;
    static_assert(std::is_swappable_v<Simple>);
  }
}  
#endiv
