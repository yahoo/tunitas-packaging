// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.aggregation.Simple
#import nonstd.units.quantity.Quantity
#import std.uint64_t
namespace tunitas::keyston::aggregation {
  //
  // A aggregation of "How many"
  //
  // Authorities:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-03.html
  //   Verifiable Distributed Aggregation Function
  //
  //   https://ietf-wg-ppm.github.io/draft-ietf-ppm-dap/draft-ietf-ppm-dap.html
  //   Section 4. Protocol Definition
  //
  // Specification:
  //
  //   It's in there.
  //
  // Design:
  //
  //   It's a standard unit of "summation of items" or "them all."
  //   The use of 'enum Tag' as the quantity Name means that Summation is ADL-capable for namespace aggregation.
  //   The format(...) function relies upon this.
  //
  // [[FIXTHIS]] nonstd::units::quantity::Quantity should be nonstd::coordinate::Coordinate because this is an (unsigned) position, not a (signed) delta
  //
  // Usage:
  //
  //   Yes.  As one does.
  //
  //   auto summed = Summation{};
  //
  namespace [[eponymous]] summation {
    // The tag MUST be in namespace aggregation so ADL will find underlying(...).
    // The tag SHOULD be unusable as an integer to prevent inadvertent usage as such.
    enum class Tag : bool;
    //
    // the representation of the quantity ----------------------------------\\\\\\\\\\\\\\ (here)
    // the tag for uniqueness --------------------------\\\ (here)          ||||||||||||||
    //                                                  |||                 ||||||||||||||
    //                                                  vvv                 vvvvvvvvvvvvvv
    using Summation = nonstd::units::quantity::Quantity<Tag, std::ratio<1>, std::uint64_t>;
  }
  using summation::Summation;
}
#endiv
#divert <hpp>
#import std.underlying_type
#import tunitas.keyston.formatter.Formatter
namespace tunitas::keyston::aggregation::summation {
  inline constexpr auto underlying(Summation s) { return s.count(); }
  // move(...) from the "ancestor"
  // swap(...) eadem ratione
  inline auto format(Summation) -> formatter::Formatter<Summation>;
}
#endiv
#divert <ipp>
namespace tunitas::keyston::aggregation {
  auto summation::format(Summation item) -> formatter::Formatter<Summation> { return {item}; }
}
#import tunitas.keyston.formatter.io // to activate format(...)
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::aggregation;
    static_assert(std::is_swappable_v<Summation>);
  }
}  
#endiv
