// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::af {
  //
  // The final aggregation
  //
  // Specification:
  //
  //   The usual variant-record machinery
  //   Also presentation UX machinery.
  //
  // Design:
  //
  //   Sure, why do you ask?  You don't think we got this off ChatGEEPEETEE do you?
  //
  // Usage:
  //
  //   As one does.
  //
  struct Aggregation;
}
#endiv
#divert <hpp>
#import tunitas.keyston.aggregation.Container
#import tunitas.keyston.formatter.Formatter
namespace tunitas::keyston {
  namespace af {
    using std::move;
    inline auto format(Aggregation const &) -> formatter::Formatter<Aggregation, Aggregation const &>;
  }
  struct af::Aggregation : public aggregation::Container {
    using Ancestor = aggregation::Container;
  public:
    Aggregation() = default;
    using Ancestor::Container;
  };
  static_assert(std::semiregular<af::Aggregation>);
}
static_assert(std::semiregular<tunitas::keyston::af::Aggregation>);
#endiv
#divert <ipp>
namespace tunitas::keyston {
  auto af::format(Aggregation const &item) -> formatter::Formatter<Aggregation, Aggregation const &> { return {item}; }
}
#import tunitas.keyston.formatter.io
#endiv
#divert <cpp>
namespace {
  namespace testate {
    using namespace tunitas::keyston::af;
    static_assert(std::semiregular<tunitas::keyston::af::Aggregation>);
    static_assert(std::semiregular<Aggregation>);
    static_assert(std::swappable<Aggregation>);
  }
}
#endiv
