// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#forward tunitas.keyston.prio.Customizer
#import tunitas.keyston.prio.Name
namespace tunitas::keyston::prio::required {
  //
  // Is this a Customizer?
  // This must be diagnosed with only the type declaration; without the type definition.
  // This is the moral equivalent of IntanceOf because Customizer<...> uses NTTP (Non-Template Type Parameters ), 
  //
  // The ALGORITHM is expected to be vdaf::Name, the formal eternal on-the-wire name of the algorithm.
  // The ALGORITHM is NOT expected to be prio::Name.  And the concept enforces that
  //
  template<typename CUSTOMIZER> concept Customizer = requires(CUSTOMIZER) {
    { []<auto ALGORITHM>(prio::Customizer<ALGORITHM> *)
      requires (not same_as<typename CUSTOMIZER::Algorithm, prio::Name>)
      {}(static_cast<CUSTOMIZER *>(nullptr)) };
  };
}
#endiv
