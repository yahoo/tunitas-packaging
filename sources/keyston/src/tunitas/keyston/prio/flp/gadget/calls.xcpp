// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tunitas.keyston.prio.flp.gadget.Calls
#import std.constructible_from
namespace tunitas::keyston::prio::flp::gadget {
  //
  // A constructor for the gadget calls
  //
  // Specification:
  //
  //    Obvious.
  //
  // Design:
  //
  //   Infer the number at the call site.
  //
  // Usage:
  //
  //   You need a tutorial on how to call a constructor function?  O.Rly?
  //   Well, here ya go!
  //   
  //   auto called = gadget::calls(1u, 2u, 3u);
  //
  template<typename... COUNT> inline constexpr auto calls(COUNT ...) -> Calls<sizeof...(COUNT)> requires (0 < sizeof...(COUNT) && (std::constructible_from<Items, COUNT> && ... ));
}
#endiv
#divert <ipp>
#import tunitas.keyston.prio.flp.gadget.Calls
namespace tunitas::keyston::prio::flp {
  template<typename... COUNT> inline constexpr auto gadget::calls(COUNT ...item) -> Calls<sizeof...(COUNT)> requires (0 < sizeof...(COUNT) && (std::constructible_from<Items, COUNT> && ... )) {
    return Calls<sizeof...(COUNT)>{static_cast<Items>(item)...};
  }
}
#endiv
