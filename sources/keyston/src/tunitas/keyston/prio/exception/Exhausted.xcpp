// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tunitas::keyston::prio::exception {
  //
  // A resource has run out in Tunitas Keyston PRIO.
  //
  // Specification:
  //
  //   Yes.
  //   These are logic errors because the condition could have been detected prior to the site of use.
  //
  // Design:
  //
  //   More than a type alias.  There is no design.
  //
  // Usage:
  //
  //   Throw it!
  //
  struct [[nodiscard]] Exhausted;
}
#endiv
#divert <hpp>
#import tunitas.exception.complete.Basic
#import tunitas.exception.partial.Exhausted
#import tunitas.exception.Aspect
#import tunitas.keyston.exception.Aspect
#import tunitas.keyston.prio.exception.Aspect
class tunitas::keyston::prio::exception::Exhausted final : public complete::Basic<partial::Exhausted, prio::exception::Aspect, keyston::exception::Aspect, tunitas::exception::Aspect> {
  using Ancestor = complete::Basic<partial::Exhausted, prio::exception::Aspect, keyston::exception::Aspect, tunitas::exception::Aspect>;
public:
  explicit Exhausted() : Ancestor{"exhausted"} {}
  using Ancestor::Basic;
};
#endiv
#divert <cpp>
#import std.derived_from
namespace {
  namespace testate {
    using tunitas::keyston::prio::exception::Exhausted;
    using std::logic_error;
    static_assert(std::derived_from<Exhausted, logic_error>);
  }
}
#endiv
