// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.keyston.constants
#include <hpp/tunitas.keyston.constants>
namespace tunitas::keyston::histogram {
  //
  // A histogram is counts relative to the buckets (stored separately)
  //
  // Specification:
  //
  //   I-D.irtf-cfrg-vdaf
  //   https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-05.html
  //   Verifiable Distributed Aggregation Function
  //   7.1.1 Encoding the Input
  //   <quote>The type of measurement being aggregated is defined by the FLP.</quote>
  //
  // Schema:
  //
  //   A Boundaries has one fewer bucket than the number of Histogram buckets.
  //   A Histogram has one more bucket than the number of Boundary values.
  //
  //   Histogram: | H0 | H1 | H2 | H3 | ...more... | Hn-1 | Hn |
  //              |____|____|____|____|            |______|____|
  //              
  //   H0 contains specimens less than Boundaries[0]
  //   H1 contains specimens less than Boundaries[1]
  //   H2 contains specimens less than Boundaries[2]
  //   H3 contains specimens less than Boundaries[3]
  //   ...more...
  //   Hn-1 contains specimens less than Boundaries[n-1]
  //   Hn   contains specimens greater than or equal to Boundaries[n-1] out to the measurement limit Limits<measurement::Specimen>::max()
  //
  // Design:
  //
  //   A new type so that ADL will find the associated operators.
  //   These rae self-sizing (i.e. the array length is a compile-time constant).
  //
  // Usage:
  //
  //   auto histogram = Histogram{};
  //
  template<Size CAPACITY = constants::HISTOGRAM_BUCKET_COUNT> struct Histogram;
}
#endiv
#divert <hpp>
#import tunitas.array.Fixed
#import tunitas.keyston.aggregation.Count
#import tunitas.array.Fixed
#import tunitas.keyston.histogram.Definition
#import tunitas.keyston.histogram.Boundaries
#import tunitas.keyston.formatter.Formatter
namespace tunitas::keyston {
  namespace histogram {
    using std::move;
    // swap(...) from the ancestor is fine
    template<Size CAPACITY> inline auto format(Histogram<CAPACITY> const &) -> formatter::Formatter<Histogram<CAPACITY>, Histogram<CAPACITY> const &>;
    template<Size CAPACITY> inline auto operator==(Histogram<CAPACITY> const &, Histogram<CAPACITY> const &) -> bool;
    template<Size CAPACITY> inline auto operator+(Histogram<CAPACITY> &&, Histogram<CAPACITY> &&) -> Histogram<CAPACITY>;
    template<Size CAPACITY> inline auto operator+(Histogram<CAPACITY> &&, Histogram<CAPACITY> const &) -> Histogram<CAPACITY>;
    template<Size CAPACITY> inline auto operator+(Histogram<CAPACITY> const &, Histogram<CAPACITY> &&) -> Histogram<CAPACITY>;
    template<Size CAPACITY> inline auto operator+(Histogram<CAPACITY> const &, Histogram<CAPACITY> const &) -> Histogram<CAPACITY>;
  }
  template<Size CAPACITY> class histogram::Histogram : public array::Fixed<aggregation::Count, histogram::Definition<CAPACITY>::COUNT.count()> {
    // WATCHOUT 'array' names a constructor in the Ancestor
    using Ancestor = tunitas::array::Fixed<aggregation::Count, histogram::Definition<CAPACITY>::COUNT.count()>;
  public:
    Histogram() = default;
    using Ancestor::Fixed;
    using Ancestor::operator=;
    auto operator=(Histogram const &) -> Histogram & = default;
    inline auto operator+=(Histogram const &) -> Histogram &;
    //
    using Boundaries = histogram::Boundaries<histogram::Definition<CAPACITY>::COUNT.count()>;
    // use histogram::encode(...) to construct a histogram from a measurement::Specimen
  };
}
#import nonstd.container.Traits.tunitas.keyston.histogram.Histogram.CAPACITY
#endiv
#divert <ipp>
#import tunitas.array.enumerate
#import std.equal
#import std.mismatch
namespace tunitas::keyston {
  template<Size CAPACITY> auto histogram::format(Histogram<CAPACITY> const &item) -> formatter::Formatter<Histogram<CAPACITY>, Histogram<CAPACITY> const &> { return {item}; }
  template<Size CAPACITY> auto histogram::operator==(Histogram<CAPACITY> const &a, Histogram<CAPACITY> const &b) -> bool { return std::equal(a.begin(), a.end(), b.begin(), b.end()); }
  template<Size CAPACITY> auto histogram::operator+(Histogram<CAPACITY> &&a, Histogram<CAPACITY> &&b)      -> Histogram<CAPACITY> { return move(a += b); }
  template<Size CAPACITY> auto histogram::operator+(Histogram<CAPACITY> &&a, Histogram<CAPACITY> const &b) -> Histogram<CAPACITY> { return move(a += b); }
  template<Size CAPACITY> auto histogram::operator+(Histogram<CAPACITY> const &a, Histogram<CAPACITY> &&b) -> Histogram<CAPACITY> { return move(b += a); }
  template<Size CAPACITY> auto histogram::operator+(Histogram<CAPACITY> const &a, Histogram<CAPACITY> const &b) -> Histogram<CAPACITY> {
    auto c{a};
    c += b;
    return c;
  }
  template<Size _> auto histogram::Histogram<_>::operator+=(Histogram const &other) -> Histogram & {
    for (auto [index, location] : enumerate(*this)) {
      location = location + other.at(index);
    }
    return *this;
  }
}
#import tunitas.keyston.formatter.io // to activate format(...)
#endiv
