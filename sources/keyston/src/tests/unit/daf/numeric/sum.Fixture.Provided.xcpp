!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#include <hpp/tests.unit.daf.numeric.sum.Fixture>
#endiv
#divert <hpp>
#import tests.unit.daf.numeric.Palette
namespace tests::unit::daf::numeric::sum {
  struct Fixture::Provided : public Palette {
    using El = Element<128>;
    struct Disassembly {
      inline static constexpr auto ONE = Specimen{1};
      inline static constexpr auto TWO = Specimen{2};
      inline static constexpr auto THREE = Specimen{3};
      // have some give bits in the full 16 bytes of the randomness
      inline static constexpr auto RANDOMNESS = defaults::RANDOMNESS;
  };
    struct Computation {
      // CANARY=3296; ( echo obase=2; echo $CANARY ) | bc | rev | sed -e 's/./&u, /g'
      inline static constexpr auto const CANARY = Input<SHARE>::Sum{El{0u}, El{0u}, El{0u}, El{0u}, El{0u}, El{1u}, El{1u}, El{1u}, El{0u}, El{0u}, El{1u}, El{1u}};
    };
    struct Amalgamation {
      inline static constexpr auto const ZERO = Output<SHARE>::Sum{El{0u}};
      inline static constexpr auto const ONE = Output<SHARE>::Sum{El{1u}};
      inline static constexpr auto const TWO = Output<SHARE>::Sum{El{2u}};
      inline static constexpr auto const THREE = Output<SHARE>::Sum{El{3u}};
    };
    struct Reassembly {
      inline static constexpr auto const TWO = Aggregation<SHARE>::Sum{El{2u}};
      inline static constexpr auto const THREE = Aggregation<SHARE>::Sum{El{3u}};
    };
  };
}
#endiv
