!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#include <hpp/tests.unit.daf.numeric.constant.Fixture>
#endiv
#divert <hpp>
#import tests.unit.daf.numeric.Palette
#import tunitas.keyston.numeric.Treatment
namespace tests::unit::daf::numeric::constant {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsubobject-linkage"
  struct Fixture::Expected : public Palette {
    class Disassembly {
      class _Treatment : public Treatment<decltype([](Input<SHARE>::Count const &that) -> Input<SHARE>::Count { return that; })> { };
      using El = Element<64>;
    public:
      inline static constexpr auto const ZERO = Input<SHARE>::Count{El{0}};
      inline static constexpr auto const CANARY = Input<SHARE>::Count{El{14795}};
      _Treatment treatment{};
    };
    class Computation {
      class _iTreatment : public Treatment<decltype([](Input<SHARE>::Count const &that) -> Input<SHARE>::Count { return that; })> { };
      class _oTreatment : public Treatment<decltype([](Output<SHARE>::Count const &that) -> Output<SHARE>::Count { return that; })> { };
    public:
      _iTreatment itreatment{};
      _oTreatment otreatment{};
    };
    class Amalgamation {
      class _Treatment : public Treatment<decltype([](Aggregation<SHARE>::Count const &that) -> Aggregation<SHARE>::Count { return that; })> { };
      using El = Element<64>;
    public:
      inline static constexpr auto const ZERO = Aggregation<SHARE>::Count{El{0}};
      inline static constexpr auto const CANARY = Aggregation<SHARE>::Count{El{27950}};
      inline static constexpr auto const SMALLER = Aggregation<SHARE>::Count{El{27950}}; // and "last one wins"
      inline static constexpr auto const BIGGER = Aggregation<SHARE>::Count{El{27951}};
      _Treatment treatment{};
    };
    class Reassembly {
      class _Treatment : public Treatment<decltype([](Aggregation<WHOLE>::Count const &that) -> Aggregation<WHOLE>::Count { return that; })> { };
    public:
      inline static auto const CANARY = Aggregation<WHOLE>::Count{4642};
      _Treatment treatment{};
    };
  };
#pragma GCC diagnostic pop
}
#endiv
