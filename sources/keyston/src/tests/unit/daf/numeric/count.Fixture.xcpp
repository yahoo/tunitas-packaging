!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::daf::numeric::count {
  class Fixture;
}
#endiv
#divert <hpp>
#import tunitas.exception.feature.Invariant
#import tunitas.keyston.daf.Function
#import tests.unit.daf.numeric.Palette
struct tests::unit::daf::numeric::count::Fixture : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  struct Function : public library::Function<PRIO, library::Name::COUNT> {
    template<typename TYPE> using Shards = ::tunitas::keyston::Shards<TYPE>;
    using Parameters = library::Parameters;
    template<Slice SLICE> using Measurement = library::Measurement<SLICE>;
    template<Slice SLICE> using Input       = library::Input<SLICE>;
    template<Slice SLICE> using Public      = library::Public<SLICE>;
    template<Slice SLICE> using Output      = library::Output<SLICE>;
    template<Slice SLICE> using Aggregation = library::Aggregation<SLICE>;
  };
  //
  auto test_disassembly_good() -> void;
  auto test_computation_good() -> void;
  auto test_amalgamation_empty() -> void;
  auto test_amalgamation_good() -> void;
  auto test_amalgamation_fail() -> void;
  auto test_reassembly_good() -> void;
protected:
  struct Expected;
  struct Provided;
  struct Exception {
    using Invariant = ::tunitas::exception::feature::Invariant;
  };
};
#endiv
#divert <cpp>
auto tests::unit::daf::numeric::count::Fixture::suite() -> Suite {
  auto series = Stream{"count"sv};
  series << []{
            auto dis = Stream{"disassembly"sv};
            dis << add("good", &Fixture::test_disassembly_good)
                << END;
            return dis;
          }()
         << []{
           auto com = Stream{"computation"sv};
           com << add("good", &Fixture::test_computation_good)
               << END;
           return com;
         }()
         << []{
           auto ama = Stream{"amalgamation"sv};
           ama << add("good", &Fixture::test_amalgamation_good)
               << END;
           return ama;
         }()
         << []{
           auto rea = Stream{"reassembly"sv};
           rea << add("good", &Fixture::test_reassembly_good)
               << END;
           return rea;
         }()
         << END;
  return settle(series);
}
#import tests.unit.daf.numeric.count.Fixture.Provided
#import tests.unit.daf.numeric.count.Fixture.Expected
namespace tests::unit::daf::numeric::count {
  auto Fixture::test_disassembly_good() -> void {
    using Provided = Fixture::Provided::Disassembly;
    using Expected = Fixture::Expected::Disassembly;
    auto expected = Expected{};
    //
    auto parameters = Function::Parameters{};
    auto measurement = Function::Measurement<WHOLE>{Provided::CANARY};
    auto randomness = Function::Randomness{Provided::RANDOMNESS};
    auto [publick, inputs] = Function::disassembly(parameters, measurement, randomness);
    //
    require(ASSERTION, sizeof(publick)); // don't care what it is
#if 1
    auto left = visit(expected.treatment, inputs.at(0_shard));
    auto right = visit(expected.treatment, inputs.at(1_shard));
    require(ASSERTION, Expected::CANARY == left + right);
#else
    // This is no longer true now that we incorporate randomnmess into the split algo
    require(ASSERTION, Expected::CANARY == visit(expected.treatment, inputs.at(0_shard)));
    require(ASSERTION, Expected::ZERO == visit(expected.treatment, inputs.at(1_shard)));
#endif
  }
  auto Fixture::test_computation_good() -> void {
    using Provided = Fixture::Provided::Computation;
    using Expected = Fixture::Expected::Computation;
    auto expected = Expected{};
    //
    auto parameters = Function::Parameters{};
    auto publick = Function::Public<SHARE>{};
    auto input = Function::Input<SHARE>{Provided::CANARY};
    auto output = Function::computation(parameters, 0_shard, publick, input);
    //
    require(ASSERTION, visit(expected.otreatment, output) == visit(expected.itreatment, input));
  }
  auto Fixture::test_amalgamation_empty() -> void try {
    using Expected = Fixture::Expected::Amalgamation;
    auto expected = Expected{};
    //
    auto parameters = Parameters{};
    auto outputs = Function::Series<Function::Output<SHARE>>{};// empty, see?
    auto amalgamated = Function::amalgamation(parameters, outputs);
    require(ASSERTION, Expected::ZERO == visit(expected.treatment, amalgamated));
  } catch (Exception::Invariant const &) {
    require(ASSERTION);
  }
  auto Fixture::test_amalgamation_good() -> void {
    using Provided = Fixture::Provided::Amalgamation;
    using Expected = Fixture::Expected::Amalgamation;
    auto expected = Expected{};
    //
    auto parameters = Function::Parameters{};
    auto outputs = []{
      auto output = Function::Output<SHARE>{Provided::ONE};
      return Function::Series<Function::Output<SHARE>>{output, output, output};
    }();
    auto amalgamated = Function::amalgamation(parameters, outputs);
    require(ASSERTION, Expected::AMALGAMATED == visit(expected.treatment, amalgamated));
  }
  auto Fixture::test_amalgamation_fail() -> void try {
    using Provided = Fixture::Provided::Amalgamation;
    //
    auto parameters = Function::Parameters{};
    auto outputs = []{
      Function::Output<SHARE> outputs[]{Provided::ZERO, Provided::ONE};
      return Function::Series<Function::Output<SHARE>>{outputs[0], outputs[1], outputs[1]};
    }();
    Function::amalgamation(parameters, outputs);
    impossible(ASSERTION);
  } catch (Exception::Invariant const &) {
    require(ASSERTION);
  }
  auto Fixture::test_reassembly_good() -> void {
    using Provided = Fixture::Provided::Reassembly;
    using Expected = Fixture::Expected::Reassembly;
    auto expected = Expected{};
    //
    auto parameters = Function::Parameters{};
    auto aggregations = []{
      auto aggregation = Function::Aggregation<SHARE>{Provided::CANARY};
      return Function::Shards<Function::Aggregation<SHARE>>{aggregation, aggregation};
    }();
    auto processed = Function::Processed{11}; // this number is irrelevant (unused)
    auto reassembled = Function::reassembly(parameters, aggregations, processed);
    //
    require(ASSERTION, Expected::CANARY == visit(expected.treatment, reassembled));
  }
}
#endiv
