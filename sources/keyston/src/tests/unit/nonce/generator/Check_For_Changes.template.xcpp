// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.required.InstanceOf
#import tunitas.keyston.nonce.Generator
namespace tests::unit::nonce::generator {
  //
  // Assert that there was a change from the previous
  // The default implementation relies upon operator!=(Result, Result)
  //
  template<required::InstanceOf<library::Generator> SUBJECT> struct Check_For_Changes;
}
#endiv
#divert <hpp>
#import std.same_as
#import tunitas.keyston.nonce.Since
#import tunitas.keyston.nonce.Bundle
#import tests.unit.nonce.Palette
namespace tests::unit::nonce {
  template<required::InstanceOf<generator::library::Generator> SUBJECT> struct generator::Check_For_Changes : protected Palette {
    using Subject = SUBJECT;
    using Result = typename Subject::Result;
    //
    static auto check([[inout]] Subject &, Result const &previous) -> void;
  protected:
    // Any other Bundles of Since with wider precision we don't detect and can't remediate around
    inline static constexpr auto const IS_GENERATOR_OF_TIME_DURATION_SINCE =
      ((std::same_as<Result, noncelib::Since<typename Palette::Seconds>> ||
        std::same_as<Result, noncelib::Since<typename Palette::Milliseconds>> ||
        std::same_as<Result, noncelib::Since<typename Palette::Microseconds>>)
       ||
       (std::same_as<Result, noncelib::Bundle<noncelib::Since<typename Palette::Seconds>>> ||
        std::same_as<Result, noncelib::Bundle<noncelib::Since<typename Palette::Milliseconds>>> ||
        std::same_as<Result, noncelib::Bundle<noncelib::Since<typename Palette::Microseconds>>>));
  };
}
#endiv
#divert <tpp>
#import std..same_as
#import tunitas.keyston.nonce.generator.Generator
#import tunitas.array.Fixed
#import std.byte
namespace tests::unit::nonce::generator {
  template<typename _> auto Check_For_Changes<_>::check(Subject &subject, Result const &previous) -> void {
    static_assert(!std::same_as<Subject, ::tunitas::keyston::nonce::generator::Generator<::tunitas::array::Fixed<std::byte, 0ul>, typename Subject::Entropy>>);
    auto perform = [&]{
      auto again = subject();
      require(ASSERTION, again != previous);
    };
    if constexpr (IS_GENERATOR_OF_TIME_DURATION_SINCE) {
      if (Palette::delay<Seconds>()) {
        perform();
      }
    } else {
      perform();
    }
  }
}
#endiv
