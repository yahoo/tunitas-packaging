// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::histogram { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.array.Variable
#import tunitas.keyston.measurement.Specimen
#import tunitas.error.by.required.Indicator
struct tests::unit::histogram::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Histogram() -> void;
  auto test_usage_Boundaries() -> void;
  template<error::by::required::Indicator> auto test_usage_Boundaries_extend() -> void;
protected:
  using Variable = ::tunitas::array::Variable<::tunitas::keyston::measurement::Specimen>;
  static auto generate() -> Variable;
};
#endiv
#divert <cpp>
#import tunitas.keyston.histogram.Boundaries
#import tunitas.error.by.Exception
#import tunitas.error.by.Optional
#import tunitas.error.by.Outcome
//
// The specializations MUST occur before suite() so that their address is known
//
namespace tests::unit::histogram {
  template<> auto Fixture::test_usage_Boundaries_extend<error::by::Exception>() -> void {
    auto variable = generate();
    auto extended = library::Boundaries<>::extend(error::by::Exception{}, variable); // <----- test this
    require(ASSERTION, 0 < extended.size());
    require(ASSERTION, library::Boundaries<>::Value{3} == extended.at(extended.size()-1));
  }
  template<> auto Fixture::test_usage_Boundaries_extend<error::by::Optional>() -> void {
    auto variable = generate();
    auto extended = library::Boundaries<>::extend(error::by::Optional{}, variable); // <---- test this
    require(ASSERTION, true == (bool) extended);
    require(ASSERTION, 0 < extended->size());
    require(ASSERTION, library::Boundaries<>::Value{3} == extended->at(extended->size()-1));
  }
  template<> auto Fixture::test_usage_Boundaries_extend<error::by::Outcome>() -> void {
    auto variable = generate();
    auto extended = library::Boundaries<>::extend(error::by::Outcome{}, variable); // <---- test this
    require(ASSERTION, good(extended));
    auto const &inside{value(extended)};
    require(ASSERTION, 0 < inside.size());
    require(ASSERTION, library::Boundaries<>::Value{3} == inside.at(inside.size()-1));
  }
}
#import tests.unit.histogram.Boundaries
#import tests.unit.histogram.Histogram
auto tests::unit::histogram::Fixture::suite() -> Suite {
  auto series = Stream{"histogram"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Boundaries", &Fixture::test_usage_Boundaries)
                  << add("Histogram", &Fixture::test_usage_Histogram)
                  << []{
                    auto ext = Stream{"extend"sv};
                    ext << add("Exception", &Fixture::test_usage_Boundaries_extend<error::by::Exception>)
                        << add("Optional", &Fixture::test_usage_Boundaries_extend<error::by::Exception>)
                        << add("Outcome", &Fixture::test_usage_Boundaries_extend<error::by::Exception>)
                        << END;
                    return ext;
                  }()
                  << END;
              return use;
            }()
         << add<Histogram>()
         << add<Boundaries>()
         << END;
  return settle(series);
}
#import tunitas.keyston.histogram.Boundaries
#import tunitas.keyston.histogram.Histogram
namespace tests::unit::histogram {
  auto Fixture::generate() -> Variable {
    auto variable = Variable{};
    require(ASSERTION, 0 == variable.size());
    variable.push_back(Variable::Value{1});
    variable.push_back(Variable::Value{2});
    variable.push_back(Variable::Value{3});
    return variable;
  }
  auto Fixture::test_usage_Boundaries() -> void {
    using Subject = library::Boundaries<>;
    auto subject = Subject{};
    require(ASSERTION, sizeof(subject));
    require(ASSERTION, 0 < subject.size());
  }
  auto Fixture::test_usage_Histogram() -> void {
    using Subject = library::Histogram<>;
    auto subject = Subject{};
    require(ASSERTION, 0 < subject.size());
    require(ASSERTION, subject == subject); // ...... operator== exists
    require(ASSERTION, !(subject != subject)); // ... as such
  }
}
#endiv
