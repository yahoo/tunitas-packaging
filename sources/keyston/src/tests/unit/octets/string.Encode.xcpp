// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::octets::string { struct Encode; }
#endiv
#divert <hpp>
#import tests.unit.octets.Palette
struct tests::unit::octets::string::Encode : public rigging::suite::Fixture, protected Palette {
  static auto suite() -> Suite;
  //
  auto test_encode() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::octets::string::Encode::suite() -> Suite {
  auto series = Stream{"encode"sv};
  series << add("encode", &Encode::test_encode)
         << END;
  return settle(series);
}
#import tunitas.octets.string // for encode(...)
namespace tests::unit::octets::string {
  auto Encode::test_encode() -> void {
    for (auto i{0uz}, e{17uz}; e != i; ++i) {
      auto specimen = generate<Variable>(1uz << i);
      auto got = library::encode(specimen);
      require(ASSERTION, 0 < got.size());
    }
  }
}
#endiv
