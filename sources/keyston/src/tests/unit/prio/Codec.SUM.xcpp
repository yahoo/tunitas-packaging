// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import tests.unit.prio.Codec.template
namespace tests::unit::prio {
  template<> auto Codec<library::Codec<SUM>>::test_known_encode() -> void;
  template<> auto Codec<library::Codec<SUM>>::test_known_truncate() -> void;
  template<> auto Codec<library::Codec<SUM>>::test_known_decode() -> void;
}
#endiv
#divert <cpp>
namespace tests::unit::prio {
  template<> auto Codec<library::Codec<SUM>>::test_known_encode() -> void {
    auto specimen = Subject::Measurement{5};
    auto expected = Subject::Encoded{generate(1u), generate(0u), generate(1u), generate(0u), generate(0u), generate(0u), generate(0u)};
    auto observed = Subject::encode(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Codec<library::Codec<SUM>>::test_known_truncate() -> void {
    auto specimen = Subject::Encoded{generate(1u), generate(0u), generate(1u), generate(0u), generate(1u)};
    auto expected = Subject::Truncated{generate(21u)};
    auto observed = Subject::truncate(specimen);
    require(ASSERTION, expected == observed);
  }
  template<> auto Codec<library::Codec<SUM>>::test_known_decode() -> void {
    auto specimen = Subject::Truncated{generate(23u)};
    auto expected = Subject::Decoded{23u};
    auto observed = Subject::decode(specimen, Subject::Processed{});
    require(ASSERTION, expected == observed);
  }
}
#endiv
