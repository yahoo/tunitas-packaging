// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::af::numeric {
  //
  // The palette of values for testing.
  //
  // Usage:
  //
  //   By inheritance into a companion Fixture.  You know how this works.
  //
  struct Palette;
}
#endiv
#divert <hpp>
#import tunitas.keyston.aggregation.Count
#import tunitas.keyston.measurement.Specimen
#import tunitas.keyston.aggregation.Simple
#import tunitas.keyston.aggregation.Summation
#import tunitas.keyston.af.Parameters
#import tunitas.keyston.af.Measurement
#import tunitas.keyston.af.Intermediate
#import tunitas.keyston.af.Aggregation
class tests::unit::af::numeric::Palette {
protected:
  ~Palette() = default;
public:
  struct Inventory {
    using Specimen = ::tunitas::keyston::measurement::Specimen;
    //
    using Count = ::tunitas::keyston::aggregation::Count;
    using Summation = ::tunitas::keyston::aggregation::Summation;
    //
    using Parameters = ::tunitas::keyston::af::Parameters;
    using Measurement = ::tunitas::keyston::af::Measurement;
    using Intermediate = ::tunitas::keyston::af::Intermediate;
    using Aggregation = ::tunitas::keyston::aggregation::Simple;
  };
  inline static auto const SPECIMEN = Inventory::Specimen{3};
  inline static auto const INTERMEDIATE0 = Inventory::Intermediate{Inventory::Count{0}};
  inline static auto const INTERMEDIATE = Inventory::Intermediate{Inventory::Count{4}};
  inline static auto const ZERO = Inventory::Aggregation{0};
  inline static auto const COUNT = Inventory::Aggregation{1};
  inline static auto const SUM = Inventory::Aggregation{7};
  //
  // using a slightly different naming convention
  struct Initial {
    inline static auto const COUNT = Inventory::Intermediate{::tunitas::keyston::aggregation::Count{0}};
    inline static auto const HISTOGRAM = Inventory::Intermediate{::tunitas::keyston::aggregation::Histogram{}};
    // WATCHOUT - unless you fill the empty population to a size matching the prefixes, the thing won't hunt.
    inline static auto const EMPTY_POPULATION = Inventory::Intermediate{::tunitas::keyston::aggregation::Popularity{}};
    static auto generate_population(Inventory::Parameters const &p) -> Inventory::Intermediate {
      auto fill = ::tunitas::keyston::aggregation::Popularity(p.prefixes.value().size(), Inventory::Count{});
      return {fill};
    };
  };
};
#endiv
