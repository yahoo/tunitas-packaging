!// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::af::numeric { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.keyston.Slice
#import tunitas.keyston.Shards
struct tests::unit::af::numeric::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  using enum ::tunitas::keyston::Slice;
  template<typename TYPE> using Shards = ::tunitas::keyston::Shards<TYPE>;
  //
  auto test_components_Computed() -> void;
  auto test_components_Finalized() -> void;
};
#endiv
#divert <cpp>
#import tests.unit.af.numeric.zero.Fixture
#import tests.unit.af.numeric.constant.Fixture
#import tests.unit.af.numeric.count.Fixture
#import tests.unit.af.numeric.sum.Fixture
#import tests.unit.af.numeric.histogram.Fixture
#import tests.unit.af.numeric.popularity.Fixture
auto tests::unit::af::numeric::Fixture::suite() -> Suite {
  auto series = Stream{"numeric"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use // NONE?
                  << END;
              return use;
            }()
         << []{
              auto use = Stream{"components"sv};
              use << add("Computed", &Fixture::test_components_Computed)
                  << add("Finalized", &Fixture::test_components_Finalized)
                  << END;
              return use;
            }()
         << add<zero::Fixture>()
         << add<constant::Fixture>()
         << add<count::Fixture>()
         << add<sum::Fixture>()
         << add<histogram::Fixture>()
         << add<popularity::Fixture>()
         << END;
  return settle(series);
}
#import tunitas.keyston.af.numeric.components
namespace tests::unit::af::numeric {
  auto Fixture::test_components_Computed() -> void {
    using namespace library::components;
    using Subject = Computed;
    //
    auto subject0 = Subject{};
    require(ASSERTION, sizeof(subject0));
    //
    auto specimen = ::tunitas::keyston::af::Intermediate{};
    auto subject1 = Subject{specimen};
    require(ASSERTION, sizeof(subject1));
  }
  auto Fixture::test_components_Finalized() -> void {
    using namespace library::components;
    using Subject = Finalized;
    //
    auto subject0 = Subject{};
    require(ASSERTION, sizeof(subject0));
    //
    auto specimen = ::tunitas::keyston::af::Aggregation{};
    auto subject1 = Subject{specimen};
    require(ASSERTION, sizeof(subject1));
  }
}
#endiv
