// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::span { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::span::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Fixed() -> void;
  auto test_usage_Variable() -> void;
protected:
  struct Specimen { };
  inline static constexpr auto SPECIMENS_COUNT = 7uz;
  Specimen       mutable_specimens[SPECIMENS_COUNT]{};
  Specimen const constie_specimens[SPECIMENS_COUNT]{};
};
#endiv
#divert <cpp>
#import tunitas.span.Fixed
#import tunitas.span.Variable
#import tests.unit.span.md.Fixture
auto tests::unit::span::Fixture::suite() -> Suite {
  auto series = Stream{"span"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Fixed", &Fixture::test_usage_Fixed)
                  << add("Variable", &Fixture::test_usage_Variable)
                  << END;
              return use;
            }()
         << add<md::Fixture>()
         << END;
  return settle(series);
}
#import tunitas.span.Fixed
#import tunitas.span.Variable
namespace tests::unit::span {
  auto Fixture::test_usage_Fixed() -> void {
    using Subject = library::Fixed<Specimen const, SPECIMENS_COUNT>;
    // the fixed spans DO NOT have a default constructor
    // use the constie span on the mutable data
    { auto subject = Subject{&mutable_specimens[0], sizeof(mutable_specimens)/sizeof(mutable_specimens[0])};
      require(ASSERTION, SPECIMENS_COUNT == subject.size());
      require(ASSERTION, nullptr != subject.data()); }
  }
  auto Fixture::test_usage_Variable() -> void {
    using Subject = library::Variable<Specimen>;
    // the variable spans have a default constructor
    { auto subject = Subject{};
      require(ASSERTION, 0 == subject.size());
      require(ASSERTION, nullptr == subject.data()); }
    { auto subject = Subject{&mutable_specimens[0], sizeof(mutable_specimens)/sizeof(mutable_specimens[0])};
      require(ASSERTION, SPECIMENS_COUNT == subject.size());
      require(ASSERTION, nullptr != subject.data()); }
  }
}
#endiv
