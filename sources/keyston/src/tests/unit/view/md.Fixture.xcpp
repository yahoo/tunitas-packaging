// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.view.md
namespace tests::unit::view::md {
  class Fixture;
  namespace library = tunitas::view::md;
}
#endiv
#divert <hpp>
struct tests::unit::view::md::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  auto test_usage() -> void;
};
#endiv
#divert <cpp>
auto tests::unit::view::md::Fixture::suite() -> Suite {
  auto series = Stream{"md"sv};
  series << call("usage", &Fixture::test_usage)
         << END;
  return settle(series);
}
#import tunitas.view.md.View
#import tunitas.view.md.Fixed
#import tunitas.view.md.Variable
namespace tests::unit::view::md {
  auto Fixture::test_usage() -> void {
    // These are externally-supplied types so there is not much (new) to test (here)
    constexpr auto SIZE = 99uz;
    char buf[SIZE]{};
    auto w = library::View<char, std::extents<std::size_t, SIZE>>{&buf[0], SIZE};
    auto f = library::Fixed<char, std::extents<std::size_t, SIZE>>{&buf[0], SIZE};
    auto v = library::Variable<char, std::extents<std::size_t, std::dynamic_extent>>{&buf[0], SIZE};
    require(ASSERTION, w.data_handle() == f.data_handle());
    require(ASSERTION, f.data_handle() == v.data_handle());
    require(ASSERTION, w.extent(0) == f.extent(0));
    require(ASSERTION, f.extent(0) == v.extent(0));
  }
}
#endiv
