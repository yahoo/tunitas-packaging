// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
namespace tests::unit::protocol::query::partial { class Fixture; }
#endiv
#divert <hpp>
#import tunitas.rheem.protocol.query.partial.Partial
#import tests.unit.protocol.query.similar.Fixture
struct tests::unit::protocol::query::partial::Fixture : public similar::Fixture<library::Partial, library::Record> {
  using Ancestor = similar::Fixture<library::Partial, library::Record>;
public:
  static auto suite() -> Suite;
};
#endiv
#divert <ipp>
// Additionally, test bodies require visibility to this (these)
#import tunitas.rheem.protocol.query.partial.cast
#endiv
#divert <cpp>
#import tests.unit.protocol.query.similar.Object
#import tests.unit.protocol.query.similar.Cast
#import tests.unit.protocol.query.similar.Is
auto tests::unit::protocol::query::partial::Fixture::suite() -> Suite {
  auto series = stanza("partial"sv);
  series << add<similar::Object<library::Partial, library::Record>>()
         << add<similar::Cast<library::Partial, library::Record>>()
         << add<similar::Is<library::Partial, library::Record>>()
         << END;
  return settle(series);
}
#endiv
