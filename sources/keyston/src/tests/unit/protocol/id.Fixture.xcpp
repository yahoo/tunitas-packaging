// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import tunitas.rheem.protocol.id
namespace tests::unit::protocol::id {
  class Fixture;
  namespace library = ::tunitas::rheem::protocol::id;
}
#endiv
#divert <hpp>
struct tests::unit::protocol::id::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  template<typename SUBJECT> auto test_simple() -> void;
};
#endiv
#divert <tpp>
namespace tests::unit::protocol::id {
  template<typename SUBJECT> auto Fixture::test_simple() -> void {
    auto subject = SUBJECT{};
    require(ASSERTION, sizeof (subject));
    auto a = SUBJECT{};
    auto b = SUBJECT{};
    swap(a, b);
  }
}
#endiv
#divert <cpp>
#import tunitas.rheem.protocol.id
auto tests::unit::protocol::id::Fixture::suite() -> Suite {
  auto series = Stream{"id"sv};
  series << add("Batch", &Fixture::test_simple<library::Batch>)
         << add("Job", &Fixture::test_simple<library::Job>)
         << add("Report", &Fixture::test_simple<library::Report>)
         << add("Task", &Fixture::test_simple<library::Task>)
         << END;
  return settle(series);
}
#endiv
