// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <fpp>
#import nonstd.container.Traits
#forward tunitas.array.Variable
namespace nonstd::container {
  template<typename TYPE> struct Traits<tunitas::array::Variable<TYPE>>;
  template<typename TYPE> struct Traits<tunitas::array::Variable<TYPE> const>;
}
#endiv
#divert <hpp>
#import std.vector
namespace nonstd::container {
  template<typename TYPE> struct Traits<tunitas::array::Variable<TYPE> const> {
    using Container = tunitas::array::Variable<TYPE> const;
    using Value = typename Container::Value;
    using Iterator = typename std::vector<TYPE>::const_iterator;
    using Type [[deprecated("AVOID, instead prefer the correct nomenclature which is 'Iterator' as in Traits<Variable<TYPE const>>::Iterator") ]] = Iterator;
  };
  template<typename TYPE> struct Traits<tunitas::array::Variable<TYPE>> {
    using Container = tunitas::array::Variable<TYPE>;
    using Value = typename Container::Value;
    using Iterator = typename std::vector<TYPE>::iterator;
    using Type [[deprecated("AVOID, instead prefer the correct nomenclature which is 'Iterator' as in Traits<Variable<TYPE>>::Iterator") ]] = Iterator;
  };
}
#endiv
