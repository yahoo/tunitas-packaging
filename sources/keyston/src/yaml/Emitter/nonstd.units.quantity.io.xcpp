// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import yaml.Emitter
#import nonstd.units.quantity.Quantity // want #forward but there is no point
#import nonstd.required.Enumeration
#import nonstd.required.Ratio
#import nonstd.required.Integer
namespace YAML {
  // follow https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML STL Containers and Other Overloads
  template<nonstd::required::Enumeration TAG, nonstd::required::Ratio SCALE, nonstd::required::Integer REPRESENTATION> inline auto operator<<(Emitter &, nonstd::units::quantity::Quantity<TAG, SCALE, REPRESENTATION> const &) -> Emitter &;
}
#endiv
#divert <ipp>
#import std.same_as
#import nonstd.units.quantity.Quantity
template<nonstd::required::Enumeration TAG, nonstd::required::Ratio SCALE, nonstd::required::Integer REPRESENTATION> auto YAML::operator<<(Emitter &e, nonstd::units::quantity::Quantity<TAG, SCALE, REPRESENTATION> const &q) -> Emitter & {
  if constexpr (std::same_as<SCALE, std::ratio<1>>) {
    return e << q.count();
  } else {
    return e << yaml::Flow << yaml::BeginSeq << q.count() << SCALE::num << SCALE::den << yaml::EndSeq;
  }
}
#endiv
