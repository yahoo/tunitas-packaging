// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import yaml.Emitter
#forward tunitas.octets.Fixed
#forward tunitas.octets.Variable
#import std.size_t
namespace YAML {
  // follow https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML STL Containers and Other Overloads
  inline auto operator<<(Emitter &, tunitas::octets::Variable const &) -> Emitter &;
  template<std::size_t CAPACITY> inline auto operator<<(Emitter &, tunitas::octets::Fixed<CAPACITY> const &) -> Emitter &;
}
#endiv
#divert <ipp>
#import tunitas.octets.to_hexidecimal
#import tunitas.octets.Fixed
#import tunitas.octets.Variable
/* ........................ */ auto YAML::operator<<(Emitter &e, tunitas::octets::Variable const &o)        -> Emitter & { return e << tunitas::octets::to_hexidecimal(o); }
template<std::size_t CAPACITY> auto YAML::operator<<(Emitter &e, tunitas::octets::Fixed<CAPACITY> const &o) -> Emitter & { return e << tunitas::octets::to_hexidecimal(o); }
#endiv
