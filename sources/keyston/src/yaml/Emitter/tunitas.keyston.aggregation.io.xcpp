// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import yaml.Emitter
#forward tunitas.keyston.aggregation.Container
namespace YAML {
  // follow https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML STL Containers and Other Overloads
  inline auto operator<<(Emitter &, tunitas::keyston::aggregation::Container const &) -> Emitter &;
  inline auto operator<<(Emitter &, tunitas::keyston::aggregation::Simple const &) -> Emitter &;
  // [the] Count & Sum .............. variants are handled by their ancestry in Quantity<...>
  // [the] Histogram & Popularity ... variants are handled by their ancestry in array::Fixed<...> and array::Variant<...> respectively
}
#endiv
#divert <ipp>
#import tunitas.keyston.aggregation.Container
#import tunitas.Visitor
#import tunitas.visit
#import yaml.Emitter.tunitas.array.io
#import yaml.Emitter.nonstd.units.quantity.io
auto YAML::operator<<(Emitter &e, tunitas::keyston::aggregation::Container const &c) -> Emitter & {
  using namespace tunitas::keyston::aggregation::container;
  auto v = tunitas::Visitor{[&e](Count const &c)      { e << c; },
                            [&e](Simple const &s)     { e << s;},
                            [&e](Sum const &s)        { e << s; },
                            [&e](Histogram const &h)  { e << h; },
                            [&e](Popularity const &p) { e << p; }};
  visit(v, c);
  return e;
}
auto YAML::operator<<(Emitter &e, tunitas::keyston::aggregation::Simple const &s) -> Emitter &    { return e << underlying(s); }
#endiv
