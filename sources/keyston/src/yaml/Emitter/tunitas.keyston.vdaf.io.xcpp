// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-keyston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/components/keyston/tree/LICENSE
#divert <hpp>
#import yaml.Emitter
#import tunitas.keyston.vdaf.required.Definition
#forward tunitas.keyston.vdaf.Check
#import tunitas.Tuple
namespace YAML {
  // follow https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML STL Containers and Other Overloads
  //
  // Lifetimes:
  //
  //   The use of std::tie(...) requires that the lifetimes of the formatted objects is longer than the containing statement.
  //
  // Usage: (with std::tie so that the formattable objects are captured by constie reference (sic) rvalue)
  //
  //   out << yaml::Key << "prep_message" << yaml::Value << std::tie{check_success, check_whole);
  //
  template<tunitas::keyston::vdaf::required::Definition DEFINITION> inline auto operator<<(Emitter &, tunitas::Tuple<bool &, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> &> const &) -> Emitter &;
  template<tunitas::keyston::vdaf::required::Definition DEFINITION> inline auto operator<<(Emitter &, tunitas::Tuple<bool const &, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> const &> const &) -> Emitter &;
  template<tunitas::keyston::vdaf::required::Definition DEFINITION> inline auto operator_insert(Emitter &, bool const &, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> const &) -> Emitter &;
}
#import std.tie
#endiv
#divert <ipp>
#import tunitas.string.Storage
#import std.tie
template<tunitas::keyston::vdaf::required::Definition DEFINITION> auto YAML::operator<<(Emitter &e, tunitas::Tuple<bool &, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> &> const &t) -> Emitter & {
  auto const &[success, message] = t; // make it constie
  return operator_insert(e, success, message);
}
template<tunitas::keyston::vdaf::required::Definition DEFINITION> auto YAML::operator<<(Emitter &e, tunitas::Tuple<bool const &, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> const &> const &t) -> Emitter & {
  auto const &[success, message] = t; // it already was constie
  return operator_insert(e, success, message);
}
template<tunitas::keyston::vdaf::required::Definition DEFINITION> auto YAML::operator_insert(Emitter &e, bool const &success, tunitas::keyston::vdaf::Check<tunitas::keyston::Slice::WHOLE, DEFINITION> const &message) -> Emitter & {
  if (success) {
    return e << message;
  } else {
    return e << tunitas::string::Storage{"Proof Verification Failed"}; // because yaml-cpp doesn't admit to string views (yet)
  }
}
#endiv
