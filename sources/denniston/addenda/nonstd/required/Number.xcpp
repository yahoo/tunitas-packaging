// This is C++ 23 -*- c++ -*- -std=c++23 in the stylings of the S.C.O.L.D. design method.
// For terms and provenance see the LICENSE file at the top of the repository.
#divert <fpp>
#import nonstd.required.Integer
namespace nonstd::required {
  //
  // Is this type a Number?
  //
  // Design:
  //
  //   Hardcode.
  //
  // [[FIXTHIS]]
  //
  //   Omething with tratis to extend to non-standard types would be helpful.
  //   nonstd::numeric::Traits, numeric::Limits adn so on
  //
  // Usage:
  //
  //   As one does.
  //
  template<typename NUMBER> concept Number = Integer<NUMBER> || same_as<NUMBER, float> || same_as<NUMBER, double> || same_as<NUMBER, long double>;
}
#endiv
#divert <cpp>
#import nonstd.integers
namespace {
  namespace testate {
    using namespace nonstd::required;
    using namespace nonstd::integers;
    // signed
    static_assert(Number<int8_t>);
    static_assert(Number<int16_t>);
    static_assert(Number<int32_t>);
    static_assert(Number<int64_t>);
    static_assert(Number<int128_t>);
    // unsigned
    static_assert(Number<uint8_t>);
    static_assert(Number<uint16_t>);
    static_assert(Number<uint32_t>);
    static_assert(Number<uint64_t>);
    static_assert(Number<uint128_t>);
    //
    static_assert(Number<float>);
    static_assert(Number<double>);
    static_assert(Number<long double>);
    //
    // and the "not an integer" ones.
    static_assert(not Number<char>);
    static_assert(not Number<wchar_t>);
    static_assert(not Number<char8_t>);
    static_assert(not Number<char16_t>);
    static_assert(not Number<char32_t>);
    //
    // [[TODO]] ... however these are implemented
    // float16_t
    // float8_t
    //
    // and bignums, bigfloats adn all that
    // use nonstd::numeric::Traits
    // use nonstd::numeric::Limits
#warning TODO does not handle the hardware or software half-floats or exotic software-defined bignums
  }
}
#endiv
