// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::scheduler::backoff { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::scheduler::backoff::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Stepper() -> void;
};
#endiv
#divert <cpp>
#import tests.unit.scheduler.backoff.Stepper
auto tests::unit::scheduler::backoff::Fixture::suite() -> Suite {
  auto series = Stream{"backoff"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Stepper", &Fixture::test_usage_Stepper)
                  << END;
              return use;
            }()
         << add<Stepper>()
         << END;
  return settle(series);
}
#import tunitas.denniston.scheduler.backoff.Stepper
namespace tests::unit::scheduler::backoff {
  auto Fixture::test_usage_Stepper() -> void {
    using Subject = library::Stepper;
    {
      auto subject0 = Subject{};
      require(ASSERTION, true == (bool) subject0); // the first iteration is always allowed
    } {
      auto subject1 = Subject{2};
      require(ASSERTION, true == (bool)subject1);
      subject1.needs_another_iteration();
      ++subject1;
      require(ASSERTION, true == (bool)subject1);
      subject1.needs_another_iteration();
      ++subject1;
      require(ASSERTION, false == (bool)subject1);
    }
  }
}
#endiv
