// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tests.unit.concurrent.channel.Generator.template
namespace tests::unit::channel {
  //
  // Generate some random values
  // We're looking for a series of values, not true non-determinism.
  // But bracket with {{ }} to show these aren't random memory from a stray pointer.
  //
  // Usage:
  //
  //   Generator<string> generator;
  //   generator();
  //   generator();
  //   generator();
  //
  template<> struct Generator<string::Storage>;
}
#endiv
#divert <hpp>
#import std.default_random_engine
#import std.uniform_int_distribution
namespace tests::unit::channel {
  template<> struct Generator<string::Storage> {
    Generator();
    using Result = string::Storage;
    auto operator()() -> Result;
  private:
    std::default_random_engine engine;
    std::uniform_int_distribution<int> length;
    std::uniform_int_distribution<int> alphabet;
    std::uniform_int_distribution<int> goupper;
  };
}
#endiv
#divert <cpp>
namespace tests::unit::channel {
  Generator<string::Storage>::Generator()
    : length{1, 20}
    , alphabet{0, 25}
    , goupper{0, 1}
  { }
  auto Generator<string::Storage>::operator()() -> Result {
    Result ret{};
    ret += "{{generated:"s;
    for (auto i{0u}, e{0u+length(engine)}; e != i; ++i) {
      char _c = (char) 'a' + alphabet(engine);
      char cc = goupper(engine) ? std::toupper(_c) : _c;
      ret += cc;
    }
    ret += "}}"s;
    return ret;
  }
}
#endiv
