// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::concurrent::dictionary { struct Fixture; }
#endiv
#divert <hpp>
struct tests::unit::concurrent::dictionary::Fixture : rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  // any?  
};
#endiv
#divert <cpp>
#import tests.unit.concurrent.dictionary.sample
#import tests.unit.concurrent.dictionary.Dictionary
#import tunitas.denniston.concurrent.dictionary.Dictionary
namespace tests::unit::concurrent::dictionary {
  auto Fixture::suite() -> Suite {
    auto series = Stream{"dictionary"sv};
    using enum library::Complexity;
    using enum library::Concurrency;
    series << add<Dictionary<library::Dictionary<LINEAR, SEQUENTIAL, library::Parameters<sample::Key, sample::Index, sample::Value>>>>()
           << add<Dictionary<library::Dictionary<LINEAR, CONCURRENT, library::Parameters<sample::Key, sample::Index, sample::Value>>>>()
           << add<Dictionary<library::Dictionary<LOGARITHMIC, SEQUENTIAL, library::Parameters<sample::Key, sample::Value>>>>()
           << add<Dictionary<library::Dictionary<LOGARITHMIC, CONCURRENT, library::Parameters<sample::Key, sample::Value>>>>()      
           << END;
    return settle(series);
  }
}
#endiv
