// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::service { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::service::Fixture : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  auto test_usage_Dictionary() -> void;
  auto test_usage_Instance() -> void;
  auto test_usage_System() -> void;
};
#endiv
#divert <cpp>
#import tests.unit.service.client.Fixture
#import tests.unit.service.collector.Fixture
#import tests.unit.service.gateway.Fixture
#import tests.unit.service.instance.Fixture
#import tests.unit.service.processor.Fixture
#import tests.unit.service.Dictionary
auto tests::unit::service::Fixture::suite() -> Suite {
  auto series = Stream{"service"sv};
  series << []{
              auto use = Stream{"usage"sv};
              use << add("Dictionary", &Fixture::test_usage_Dictionary)
                  << add("Instance", &Fixture::test_usage_Instance)
                  << add("System", &Fixture::test_usage_System)
                  << END;
              return use;
            }()
         << add<Dictionary>()
         << add<client::Fixture>()
         << add<collector::Fixture>()
         << add<gateway::Fixture>()
         << add<instance::Fixture>()
         << add<processor::Fixture>()
         << END;
  return settle(series);
}
#import tunitas.denniston.service.Dictionary
#import tunitas.denniston.service.Instance
#import tunitas.denniston.service.instance.make
#import tunitas.denniston.service.instance.Collector
#import tunitas.denniston.service.System
#import tunitas.denniston.Configuration
#import tunitas.entropy.Source
namespace tests::unit::service {
  auto Fixture::test_usage_Dictionary() -> void {
    using Subject = library::Dictionary<::tunitas::hale::hpke::Side::SECRET>; // pick a side
    auto subject = Subject{};
    auto inserted1 = subject.insert(Subject::Key{}, Subject::Value{});
    require(ASSERTION, inserted1.second);
    auto inserted2 = subject.insert(Subject::Key{}, Subject::Value{});
    require(ASSERTION, !inserted2.second);
    auto found = subject.find(Subject::Key{});
    require(ASSERTION, (bool) found);
  }
  auto Fixture::test_usage_Instance() -> void {
    using Subject = library::Instance;
    Subject subject = library::instance::make<library::instance::Collector>();
    require(ASSERTION, sizeof (subject));
  }
  auto Fixture::test_usage_System() -> void {
    auto source = ::tunitas::entropy::Source{};
    auto world = ::tunitas::denniston::Configuration{source};
    {
      using Subject = library::System;
      auto subject = Subject{source, world};
      require(ASSERTION, sizeof (subject));
    } {
      constexpr auto const INITIAL_CLIENT_COUNT = 10uz;
      using Subject = library::System;
      auto subject = Subject{source, world, INITIAL_CLIENT_COUNT};
      require(ASSERTION, sizeof (subject));
    }
  }
}
#endiv
