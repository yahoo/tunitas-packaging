// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.protocol.packet
#import tunitas.denniston.protocol.Packet
namespace tests::unit::protocol::packet::is {
  class Fixture;
  namespace protocol = ::tunitas::denniston::protocol;
  using ::tunitas::denniston::protocol::Packet;
}
#endiv
#divert <hpp>
#forward tunitas.denniston.protocol.packet.Status
#forward tunitas.denniston.protocol.packet.Response
#forward tunitas.denniston.protocol.packet.Quit
namespace tests::unit::protocol::packet {
  struct is::Fixture : public rigging::suite::Fixture {
    static auto suite() -> Suite;
    //
    template<typename SUBJECT> auto test_is_ping() -> void;
    template<typename SUBJECT> auto test_is_quit() -> void;
    template<typename SUBJECT> auto test_is_status() -> void;
    auto test_is_ping_generic() -> void;
    auto test_is_quit_generic() -> void;
    auto test_is_status_generic() -> void;
  };
  namespace is {
    template<> auto Fixture::test_is_ping<library::Ping>() -> void;
    template<> auto Fixture::test_is_quit<library::Quit>() -> void;
    template<> auto Fixture::test_is_status<library::Status>() -> void;
  }
}
#endiv
#divert <tpp>
#import tunitas.denniston.protocol.packet.cast
#import tunitas.denniston.protocol.packet.make
namespace tests::unit::protocol::packet::is {
  template<typename SUBJECT> auto Fixture::test_is_ping() -> void {
    auto made = library::make<SUBJECT>();
    require(ASSERTION, !is_ping(made)); // <---------------------------------------- test this (false)
  }
  template<typename SUBJECT> auto Fixture::test_is_quit() -> void {
    auto made = library::make<SUBJECT>();
    require(ASSERTION, !is_quit(made)); // <---------------------------------------- test this (false)
  }
  template<typename SUBJECT> auto Fixture::test_is_status() -> void {
    auto made = library::make<SUBJECT>();
    require(ASSERTION, !is_status(made)); // <---------------------------------------- test this (false)
  }
}
#endiv
#divert <cpp>
#import tunitas.denniston.protocol.packet.Status
#import tunitas.denniston.protocol.packet.Ping
#import tunitas.denniston.protocol.packet.Provision
#import tunitas.denniston.protocol.packet.Quit
#import tunitas.denniston.protocol.packet.Query
#import tunitas.denniston.protocol.packet.Request
#import tunitas.denniston.protocol.packet.Response
#import tunitas.denniston.protocol.packet.Report
auto tests::unit::protocol::packet::is::Fixture::suite() -> Suite {
  auto series = Stream{"is"sv};
  series << []{
              auto qu = Stream{"ping"sv};
              qu << add("generic", &Fixture::test_is_ping_generic)
                 << add("Ping", &Fixture::test_is_ping<library::Ping>)
                 << add("Provision", &Fixture::test_is_ping<library::Provision>)
                 << add("Status", &Fixture::test_is_ping<library::Status>)
                 << add("Quit", &Fixture::test_is_ping<library::Quit>)
                 << END;
              return qu;
            }()
         << []{
              auto qu = Stream{"quit"sv};
              qu << add("generic", &Fixture::test_is_quit_generic)
                 << add("Ping", &Fixture::test_is_quit<library::Ping>)
                 << add("Provision", &Fixture::test_is_quit<library::Provision>)
                 << add("Status", &Fixture::test_is_quit<library::Status>)
                 << add("Quit", &Fixture::test_is_quit<library::Quit>)
                 << END;
              return qu;
            }()
         << []{
              auto qu = Stream{"status"sv};
              qu << add("generic", &Fixture::test_is_status_generic)
                 << add("Ping", &Fixture::test_is_status<library::Ping>)
                 << add("Provision", &Fixture::test_is_status<library::Provision>)
                 << add("Status", &Fixture::test_is_status<library::Status>)
                 << add("Quit", &Fixture::test_is_status<library::Quit>)
                 << END;
              return qu;
            }()
         << END;
  return settle(series);
}
namespace tests::unit::protocol::packet::is {
  template<> auto Fixture::test_is_ping<library::Ping>() -> void {
    auto made = library::make<library::Ping>();
    require(ASSERTION, is_ping(made)); // <---------------------------------------- test this (true)
  }
  auto Fixture::test_is_ping_generic() -> void {
    {
      Packet upcast = library::make<library::Quit>();
      require(ASSERTION, ! is_ping(upcast)); // <---------------------------------------- test this (the upcast)
    } {
      Packet upcast = library::make<library::Ping>();
      require(ASSERTION, is_ping(upcast)); // <---------------------------------------- test this (the upcast)
    }
  }
  template<> auto Fixture::test_is_quit<library::Quit>() -> void {
    auto made = library::make<library::Quit>();
    require(ASSERTION, is_quit(made)); // <---------------------------------------- test this (true)
  }
  auto Fixture::test_is_quit_generic() -> void {
    {
      Packet upcast = library::make<library::Ping>();
      require(ASSERTION, ! is_quit(upcast)); // <---------------------------------------- test this (the upcast)
    } {
      Packet upcast = library::make<library::Quit>();
      require(ASSERTION, is_quit(upcast)); // <---------------------------------------- test this (the upcast)
    }
  }
  template<> auto Fixture::test_is_status<library::Status>() -> void {
    auto made = library::make<library::Status>();
    require(ASSERTION, is_status(made)); // <---------------------------------------- test this (true)
  }
  auto Fixture::test_is_status_generic() -> void {
    {
      Packet upcast = library::make<library::Ping>();
      require(ASSERTION, ! is_status(upcast)); // <---------------------------------------- test this (the upcast)
    } {
      Packet upcast = library::make<library::Status>();
      require(ASSERTION, is_status(upcast)); // <---------------------------------------- test this (the upcast)
    }
  }
}
#endiv
