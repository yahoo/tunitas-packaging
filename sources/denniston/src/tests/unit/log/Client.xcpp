// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc, 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
namespace tests::unit::log { class Client; }
#endiv
#divert <hpp>
#import tunitas.denniston.log.Concentrator
#import tunitas.denniston.log.Client
#import tunitas.denniston.Species
struct tests::unit::log::Client : public rigging::suite::Fixture {
  static auto suite() -> Suite;
  //
  struct Concentrator : public library::Concentrator {
    using library::Concentrator::outbound; // now public so we can assign to it
  };
  using Subject = library::Client;
  using Species = ::tunitas::denniston::Species;
  //
  auto test_constructor_one() -> void;
  auto test_constructor_two() -> void;
  template<unsigned> auto test_format() -> void;
};
#endiv
#divert <cpp>
namespace tests::unit::log {
  // These definitions MUST appear before Client::suite() so that the specializations are declared ahead of their addresses being used
  template<> auto Client::test_format<0>() -> void {
    auto center = Concentrator{};
    center.outbound = &std::cerr;
    auto client = Subject{center, Species::GATEWAY};
    client.format("");
  }
  template<> auto Client::test_format<1>() -> void {
    auto center = Concentrator{};
    center.outbound = &std::cerr;
    auto client = Subject{center, Species::GATEWAY};
    client.format("char={} int={} string={}", 'a', 0xb, "c"s);
  }
  namespace {
    inline constexpr auto const FORMAT_COUNT = 2uz;
  }
}
#import std.integer_sequence
#import std.make_index_sequence
#import std.size_t
auto tests::unit::log::Client::suite() -> Suite {
  auto series = Stream{"Client"sv};
  series << []{
              auto con = Stream{"constructor"sv};
              con << add("one", &Client::test_constructor_one)
                  << add("two", &Client::test_constructor_two)
                  << END;
              return con;
            }()
         << []{
              auto form = Stream{"format"sv};
              [&form]<std::size_t... INDEX>(std::integer_sequence<std::size_t, INDEX...>) {
                ((form << add(std::to_string(INDEX), &Client::template test_format<INDEX>)), ...);
              }(std::make_index_sequence<FORMAT_COUNT>{});
              return form;
            }()
         << END;
  return settle(series);
}
namespace tests::unit::log {
  auto Client::test_constructor_one() -> void {
    auto client = Subject{Species::GATEWAY};
    //
    client.format("hello {}", "world"sv);
    client.format("{}", "This won't output anything because there is no concentrator and thus no outbound"sv);
  }
  auto Client::test_constructor_two() -> void {
    auto center = Concentrator{};
    center.outbound = &std::cerr;
    auto client = Subject{center, Species::GATEWAY};
    client.format("hello {}", "world"sv);
  }
}
#endiv
