// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.protocol.packet.Query.template
namespace tunitas::denniston::protocol::packet {
  //
  // Semantic:
  //
  //  The Client is asking the Configuration (service) for the TASKS which are available for it.
  //  The Client is asking the Configuration (service) if a specific TASK is available for it.
  //
  // Design:
  //
  //   No.  Yeah No.  No Yeah.
  //   In point of fact, there is a design decision here.
  //   To wit: the use of inheritance prevents the use of designated initialization.
  //
  // Response:
  //
  //   Success returns a Response<TASKS>
  //   Failure returns a Status
  //
  template<> struct Query<Get::TASKS>;
}
#endiv
#divert <hpp>
#import tunitas.denniston.protocol.packet._.task.Query
namespace tunitas::denniston::protocol::packet {
  template<> class Query<Get::TASKS> : public _::task::Query {
    using Ancestor = _::task::Query;
  public:
    explicit Query() = default;
    using Ancestor::Query;
  };
}
#endiv
