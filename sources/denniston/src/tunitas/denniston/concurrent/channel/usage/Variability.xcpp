// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <hpp>
#import tunitas.denniston.concurrent.channel.required.Variability
#forward tunitas.denniston.concurrent.channel.Variability
#forward tunitas.denniston.concurrent.channel.Variables
namespace tunitas::denniston::concurrent::channel::usage {
  //
  // The usage constraints on the Variability implementation
  // Requires the complete type of channel::Variability
  //
  template<typename VARIABILITY> concept Variability = required::Variability<VARIABILITY> && requires(VARIABILITY ity) {
    requires derived_from<VARIABILITY, channel::Variability>;
#if 0
    // Humph.  If this field is no public then this test won't work.   derived_from<...> above subsumes the intent.
    { ity.variables } -> convertible_to<Variables &>;
#endif
  };
}
#endiv
