// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <hpp>
#import tunitas.denniston.concurrent.dictionary.required.Valuable
#import tunitas.denniston.concurrent.dictionary.usage.Key_From
namespace tunitas::denniston::concurrent::dictionary::usage {
  //
  // Is this type suitable for the VALUE of a Dictionary<..., VALUE>
  // Now we have the complete type of VALUE
  //
  template<typename VALUE> concept Valuable = required::Valuable<VALUE> && requires(VALUE const &value) {
    // And because the VALU wil live in a container; e.g. std::vector<VALUE> or std::deque<VALUE> we also require
    requires std::is_default_constructible_v<VALUE>;
    requires std::is_copy_constructible_v<VALUE> || std::is_move_constructible_v<VALUE>;
    requires std::is_copy_assignable_v<VALUE> || std::is_move_assignable_v<VALUE>;
    requires std::is_swappable_v<VALUE>;
    requires Key_From<VALUE>;
  };
}
#endiv
