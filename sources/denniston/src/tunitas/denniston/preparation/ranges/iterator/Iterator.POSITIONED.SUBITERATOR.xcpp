=// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.denniston.preparation.ranges.iterator.Iterator.template
namespace tunitas::denniston::preparation::ranges::iterator {
  //
  // Iterator on the Step<POSITIONED> ancestor of the record
  //
  // Specification:
  //
  //    A projection at ancestor, the Step<POSITIONED> in the record.
  //    Obviously the underlying value type MUST be descended from Step<POSITIONED>.
  //
  // Design:
  //
  //   Yes.  See operator* where the projection onto ancestry of Record occurs.
  //
  // Usage:
  //
  //   You need a tutorial on how to use an iterator?  o.rly?
  //
  template<typename SUBITERATOR> struct Iterator<Projection::POSITIONED, SUBITERATOR>;
}
#endiv
#divert <hpp>
#import tunitas.denniston.preparation.ranges.iterator.Rebase
namespace tunitas::denniston::preparation::ranges::iterator {
  template<typename SUBITERATOR> struct Iterator<Projection::POSITIONED, SUBITERATOR> : public Rebase<Projection::POSITIONED, SUBITERATOR>::Type {
    using Ancestor = typename Rebase<Projection::POSITIONED, SUBITERATOR>::Type;
  public:
    [[implicit]] Iterator() = default;
    using Ancestor::Basis;
#if 202312 < __cplusplus
    template<typename SELF> auto operator*(this SELF *) -> nonstd::like_t<SELF, typename Ancestor::Reference> { return *Ancestor::subiterator; }
#else
    auto operator*() -> typename Ancestor::Reference                     { return *Ancestor::subiterator; }
    auto operator*() const -> typename Ancestor::Reference_More_Constie  { return *Ancestor::subiterator; }
    auto operator++() -> Iterator &    { return Ancestor::increment(*this); }
    auto operator++(int i) -> Iterator { return Ancestor::increment(*this, i); }
#endif
  };
}
#endiv
