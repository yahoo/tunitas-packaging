// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import nonstd.required.container.Basic
#import nonstd.required.iterator.Forward
#import nonstd.container.Traits
#include <hpp/nonstd.container.Traits>
namespace tunitas::denniston::preparation::ranges::required::container {
  //
  //  Is this container suitable for that certain constructor ranges::Subrange::Subrange(CONTAINER &&)
  //
  // Specification:
  //
  //   Does the CONTAINER have the begin() and end().
  //   Are the iterators so produced convertaible to the SUBITERATOR (constie-sense matching constie-sense)
  //
  //   This MUST be diagnosable without the complete type of CONTAINER.
  //   Thus we rely upon container::Traits.
  //
  // Design:
  //
  //   Just what you see.
  //
  // Usage:
  //
  //   template<required::container::Extractible_From<Subiterator> CONTAINER> inline [[implicit]] Subrange(CONTAINER &&);
  //
  //   Because it's inferred at the call site, CONTAINER will always be a reference (that decays according to CONTAINER && in a template)
  //
  namespace [[eponymous]] extractible_from {
    // The machinery here is dedicated to stripping off references and constie in the appropriate order.
    namespace consistency {
      template<typename CONTAINER> concept IsA_Container = required::container::Basic<std::remove_const_t<CONTAINER>>;
      template<typename ITERATOR> concept IsAn_Iterator = required::iterator::Forward<ITERATOR>;
      template<typename CONTAINER_CONSTIE_MAYBE, typename SUBITERATOR> concept Consistency = requires(CONTAINER_CONSTIE_MAYBE, SUBITERATOR) {
        requires IsAn_Iterator<SUBITERATOR>;
        requires IsA_Container<std::remove_const_t<CONTAINER_CONSTIE_MAYBE>>;
        requires convertible_to<typename nonstd::container::Traits<CONTAINER_CONSTIE_MAYBE>::Iterator, SUBITERATOR>;
      };
    }
    using consistency::Consistency;
    template<typename CONTAINER_CONSTIE_MAYBE_REFERENCE, typename SUBITERATOR> concept Extractible_From = requires(CONTAINER_CONSTIE_MAYBE_REFERENCE, SUBITERATOR) {
      requires std::is_reference_v<CONTAINER_CONSTIE_MAYBE_REFERENCE>;
      requires Consistency<std::remove_reference_t<CONTAINER_CONSTIE_MAYBE_REFERENCE>, SUBITERATOR>;
    };
  }
  using extractible_from::Extractible_From;
}
#endiv
