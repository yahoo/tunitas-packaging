// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2022.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-denniston/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/denniston/tree/LICENSE
#divert <fpp>
#import tunitas.variant.Visitor
namespace tunitas::denniston::role::package_io {
  //
  // The bundle of types from to_bundle(...)
  //
  // Specification:
  //
  //   Just what it says on the label.
  //
  // Design:
  //
  //   Works like a variant (std::variant)
  //
  // Usage:
  //
  //   auto bundle = to_bundle(species);
  //   auto bundle = to_bundle(genus);
  //
  //   auto visitor = Visitor{[](Null)         { ...no name was recovered... },
  //                          [](string::View) { ...a simple name was recovered... },
  //                          [](Indexed)      { ...a name+index was recovered... }};
  //   auto got = visit(visitor, bundle);
  //
  struct Bundled;
  namespace body::exported {
    using variant::Visitor;
  }
}
#import std.variant_size.tunitas.denniston.role.package_io.Bundled
#import std.variant_alternative.N.tunitas.denniston.role.package_io.Bundled
#endiv
#divert <hpp>
#import tunitas.denniston.role.package_io.Variant
namespace tunitas::denniston::role {
  class package_io::Bundled : public body::Variant {
    using Ancestor = body::Variant;
  public:
    Bundled() = default;
    using Ancestor::variant; // yup, you "just have to know" that the constructor name is really of std::variant
  };
}
#import std.visit.tunitas.denniston.role.package_io.Bundled
#endiv
